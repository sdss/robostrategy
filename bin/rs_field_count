#!/usr/bin/env python
# encoding: utf-8
#
# @Author: Michael R. Blanton
# @Date: May 20, 2019
# @Filename: rs_field_count
# @License: BSD 3-Clause
# @Copyright: Michael R. Blanton


from __future__ import division
from __future__ import print_function
from __future__ import absolute_import
from __future__ import unicode_literals

import argparse
import os
import sys
import numpy as np
import fitsio
import robostrategy.header
import robostrategy.params as params
import sdss_access.path

sdss_path = sdss_access.path.Path(release='sdss5', preserve_envvars=True)


def make_count_entry(targets, fields_entry, utcadences,
                     utcartons, count_dtype):
    count_entry = np.zeros(1, dtype=count_dtype)

    count_entry['fieldid'] = fields_entry['fieldid']
    count_entry['racen'] = fields_entry['racen']
    count_entry['deccen'] = fields_entry['deccen']
    count_entry['ntargets'] = len(targets)
    iok = np.where(targets['within'])[0]
    count_entry['nwithin'] = len(iok)

    for indx in np.arange(len(utcadences), dtype=np.int32):
        utcadence = utcadences[indx]
        ic = np.where(targets['cadence'] == utcadence)[0]
        count_entry['nwithin_pcd'][0, indx] = targets['within'][ic].sum()

    for indx in np.arange(len(utcartons), dtype=np.int32):
        utcarton = utcartons[indx]
        ip = np.where(targets['carton'] == utcarton)[0]
        count_entry['nwithin_pct'][0, indx] = targets['within'][ip].sum()

    return(count_entry)


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Counts of targets in each field')

    parser.add_argument('-p', '--plan', dest='plan',
                        type=str, help='name of plan', required=True)
    parser.add_argument('-o', '--observatory', dest='observatory',
                        type=str, help='apo or lco',
                        choices=['apo', 'lco'], required=True)

    args = parser.parse_args()
    plan = args.plan
    observatory = args.observatory

    rsParams = params.RobostrategyParams(plan=plan)
    if('Rotate' in rsParams.cfg['Fields']):
        rotate = True
        paname = rsParams.cfg['Fields']['Rotate']
    else:
        rotate = False
        paname = ''

    fields_file = sdss_path.full('rsFields', plan=plan,
                                 observatory=observatory)
    if(rotate):
        fields_file = fields_file.replace('rsFields', 'rsFieldsRotated')
    fields_array = fitsio.read(fields_file)

    target_cadence_file = sdss_path.full('rsTargets', plan=plan,
                                         observatory=observatory)
    target_cadence_file = target_cadence_file.replace('rsTargets',
                                                      'rsTargetCadences')

    carr = fitsio.read(target_cadence_file, ext='CADENCES')
    utcadences = carr['cadence']
    nutcadences = len(utcadences)

    carr = fitsio.read(target_cadence_file, ext='CARTONS')
    utcartons = carr['carton']
    nutcartons = len(utcartons)

    count_dtype = [('fieldid', np.int32),
                   ('racen', np.float64),
                   ('deccen', np.float64),
                   ('ntargets', np.int32),
                   ('nwithin', np.int32),
                   ('nwithin_pcd', np.int32, nutcadences),
                   ('nwithin_pct', np.int32, nutcartons)]

    count_array = np.zeros(len(fields_array), dtype=count_dtype)

    for ifield in np.arange(len(fields_array)):
        fields_entry = fields_array[ifield]
        fieldid = fields_entry['fieldid']
        print("fieldid {f}: Counting!".format(f=fieldid), flush=True)

        if(rotate):
            pa = np.float32(fields_entry[paname])
        else:
            pa = 0.

        field_target_file = sdss_path.full('rsFieldTargets', plan=plan,
                                           observatory=observatory,
                                           fieldid=fieldid)
        targets = fitsio.read(field_target_file, ext='TARGET')

        ce = make_count_entry(targets, fields_entry, utcadences,
                              utcartons, count_dtype)[0]
        count_array[ifield] = ce

    outdir = os.path.dirname(fields_file)
    cfilebase = 'rsFieldCount-{plan}-{obs}.fits'.format(plan=plan,
                                                        obs=observatory)
    count_file = os.path.join(outdir, cfilebase)

    hdr = robostrategy.header.rsheader()
    fitsio.write(count_file, count_array, header=hdr,
                 clobber=True)

    cadence_dtype = [('cadence', np.unicode_, 30)]
    cadence_arr = np.zeros(len(utcadences), dtype=cadence_dtype)
    cadence_arr['cadence'] = utcadences
    fitsio.write(count_file, cadence_arr, clobber=False)

    carton_dtype = [('carton', np.unicode_, 30)]
    carton_arr = np.zeros(len(utcartons), dtype=carton_dtype)
    carton_arr['carton'] = utcartons
    fitsio.write(count_file, carton_arr, clobber=False)
