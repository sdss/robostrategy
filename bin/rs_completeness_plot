#!/usr/bin/env python
# encoding: utf-8
#
# @Author: Michael R. Blanton
# @Date: Aug 3, 2018
# @Filename: rs_completeness_plot
# @License: BSD 3-Clause
# @Copyright: Michael R. Blanton


from __future__ import division
from __future__ import print_function
from __future__ import absolute_import
from __future__ import unicode_literals

import argparse
import os
import sys
import numpy as np
import matplotlib.pyplot as plt
import healpy
import fitsio
import sdss_access.path

sdss_path = sdss_access.path.Path(release='sdss5', preserve_envvars=True)


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Evaluate completeness of target assignments')

    parser.add_argument('-p', '--plan', dest='plan',
                        type=str, help='name of plan', required=True)
    parser.add_argument('-o', '--observatory', dest='observatory',
                        type=str, help='apo or lco or both',
                        choices=['apo', 'lco', 'both'], required=True)
    parser.add_argument('-O', '--open', dest='opentargets',
                        help='set to read open target results',
                        default=False, required=False,
                        action='store_true')
    parser.add_argument('-F', '--filler', dest='filler',
                        help='set to read filler target results',
                        default=False, required=False,
                        action='store_true')
    parser.add_argument('-X', '--final', dest='final',
                        help='set to read final target results',
                        default=False, required=False,
                        action='store_true')
    parser.add_argument('-K', '--complete', dest='complete',
                        help='set to read complete target results',
                        default=False, required=False,
                        action='store_true')
    parser.add_argument('-R', '--reassign', dest='reassign',
                        help='set to read reassignment target results',
                        default=False, required=False,
                        action='store_true')

    args = parser.parse_args()
    plan = args.plan
    observatory = args.observatory
    opentargets = args.opentargets
    filler = args.filler
    reassign = args.reassign
    complete = args.complete
    final = args.final

    if(int(opentargets) + int(filler) + int(complete) + int(reassign) + int(final) > 1):
        print("Only one of -O, -R, -F, -K can be set!")
        sys.exit()

    completeness_file = sdss_path.full('rsCompleteness', plan=plan,
                                       observatory=observatory)
    if(opentargets):
        completeness_file = completeness_file.replace('rsCompleteness',
                                                      'rsCompletenessOpen')
    if(filler):
        completeness_file = completeness_file.replace('rsCompleteness',
                                                      'rsCompletenessFiller')
    if(complete):
        completeness_file = completeness_file.replace('rsCompleteness',
                                                      'rsCompletenessComplete')
    if(reassign):
        completeness_file = completeness_file.replace('rsCompleteness',
                                                      'rsCompletenessReassign')
    if(final):
        completeness_file = completeness_file.replace('rsCompleteness',
                                                      'final/rsCompletenessFiller')

    ntargets_map, hdr = fitsio.read(completeness_file, header=True, ext=2)
    nside = np.int32(hdr['NSIDE'])
    ncadence = np.int32(hdr['NCADENCE'])
    ncarton = np.int32(hdr['NCARTON'])

    for icadence in np.arange(ncadence + 1):

        ntargets_map, hdr = fitsio.read(completeness_file, header=True,
                                        ext=icadence * 3 + 2)
        if('CADENCE' in hdr):
            cadence = hdr['CADENCE'].strip()
        else:
            cadence = 'all'
        ngot_map = fitsio.read(completeness_file,
                               ext=icadence * 3 + 3)
        fgot_map = fitsio.read(completeness_file,
                               ext=icadence * 3 + 4)

        fig = plt.figure(figsize=(8, 4))
        healpy.mollview(
            np.arcsinh(ntargets_map),
            title='$\sinh^{-1}$(Number of targets) ' + cadence,
            rot=(270., 0., 0.))
        ntargets_png_file = sdss_path.full(
            'rsAssignmentsPng', name='ntargets-cadence-{c}'.format(c=cadence),
            plan=plan, observatory=observatory)
        if(opentargets):
            ntargets_png_file = ntargets_png_file.replace('rsAssignments',
                                                          'rsAssignmentsOpen')
        if(filler):
            ntargets_png_file = ntargets_png_file.replace('rsAssignments',
                                                          'rsAssignmentsFiller')
        if(final):
            ntargets_png_file = ntargets_png_file.replace('rsAssignments',
                                                          'final/rsAssignmentsFinal')
        if(complete):
            ntargets_png_file = ntargets_png_file.replace('rsAssignments',
                                                          'rsAssignmentsComplete')
        if(reassign):
            ntargets_png_file = ntargets_png_file.replace('rsAssignments',
                                                          'rsAssignmentsReassign')
        plt.savefig(ntargets_png_file)
        plt.clf()

        fig = plt.figure(figsize=(8, 4))
        healpy.mollview(
            np.arcsinh(ngot_map),
            title='$\sinh^{-1}$(Number of targets gotten) ' + cadence,
            rot=(270., 0., 0.))
        ngot_png_file = sdss_path.full(
            'rsAssignmentsPng', name='ngot-cadence-{c}'.format(c=cadence),
            plan=plan, observatory=observatory)
        if(opentargets):
            ngot_png_file = ngot_png_file.replace('rsAssignments',
                                                  'rsAssignmentsOpen')
        if(filler):
            ngot_png_file = ngot_png_file.replace('rsAssignments',
                                                  'rsAssignmentsFiller')
        if(final):
            ngot_png_file = ngot_png_file.replace('rsAssignments',
                                                  'final/rsAssignmentsFinal')
        if(complete):
            ngot_png_file = ngot_png_file.replace('rsAssignments',
                                                  'rsAssignmentsComplete')
        if(reassign):
            ngot_png_file = ngot_png_file.replace('rsAssignments',
                                                  'rsAssignmentsReassign')
        plt.savefig(ngot_png_file)
        plt.clf()

        fig = plt.figure(figsize=(8, 4))
        healpy.mollview(
            np.arcsinh(fgot_map),
            title='Fraction of targets gotten ' + cadence,
            min=-0.1, max=1.,
            rot=(270., 0., 0.))
        fgot_png_file = sdss_path.full(
            'rsAssignmentsPng', name='fgot-cadence-{c}'.format(c=cadence), plan=plan,
            observatory=observatory)
        if(opentargets):
            fgot_png_file = fgot_png_file.replace('rsAssignments',
                                                  'rsAssignmentsOpen')
        if(filler):
            fgot_png_file = fgot_png_file.replace('rsAssignments',
                                                  'rsAssignmentsFiller')
        if(final):
            fgot_png_file = fgot_png_file.replace('rsAssignments',
                                                  'final/rsAssignmentsFinal')
        if(complete):
            fgot_png_file = fgot_png_file.replace('rsAssignments',
                                                  'rsAssignmentsComplete')
        if(reassign):
            fgot_png_file = fgot_png_file.replace('rsAssignments',
                                                  'rsAssignmentsReassign')
        plt.savefig(fgot_png_file)
        plt.clf()

    for icarton in np.arange(ncarton):

        ntargets_map, hdr = fitsio.read(completeness_file, header=True,
                                        ext=(ncadence + 1 + icarton) * 3 + 2)
        carton = hdr['CARTON'].strip()
        ngot_map = fitsio.read(completeness_file,
                               ext=(ncadence + 1 + icarton) * 3 + 3)
        fgot_map = fitsio.read(completeness_file,
                               ext=(ncadence + 1 + icarton) * 3 + 4)

        fig = plt.figure(figsize=(8, 4))
        healpy.mollview(
            np.arcsinh(ntargets_map),
            title='$\sinh^{-1}$(Number of targets) ' + carton,
            rot=(270., 0., 0.))
        ntargets_png_file = sdss_path.full(
            'rsAssignmentsPng', name='ntargets-carton-{c}'.format(c=carton),
            plan=plan, observatory=observatory)
        if(opentargets):
            ntargets_png_file = ntargets_png_file.replace('rsAssignments',
                                                          'rsAssignmentsOpen')
        if(filler):
            ntargets_png_file = ntargets_png_file.replace('rsAssignments',
                                                          'rsAssignmentsFiller')
        if(final):
            ntargets_png_file = ntargets_png_file.replace('rsAssignments',
                                                          'final/rsAssignmentsFinal')
        if(complete):
            ntargets_png_file = ntargets_png_file.replace('rsAssignments',
                                                          'rsAssignmentsComplete')
        if(reassign):
            ntargets_png_file = ntargets_png_file.replace('rsAssignments',
                                                          'rsAssignmentsReassign')
        plt.savefig(ntargets_png_file)
        plt.clf()

        fig = plt.figure(figsize=(8, 4))
        healpy.mollview(
            np.arcsinh(ngot_map),
            title='$\sinh^{-1}$(Number of targets gotten) ' + carton,
            rot=(270., 0., 0.))
        ngot_png_file = sdss_path.full(
            'rsAssignmentsPng', name='ngot-carton-{c}'.format(c=carton),
            plan=plan, observatory=observatory)
        if(opentargets):
            ngot_png_file = ngot_png_file.replace('rsAssignments',
                                                  'rsAssignmentsOpen')
        if(filler):
            ngot_png_file = ngot_png_file.replace('rsAssignments',
                                                  'rsAssignmentsFiller')
        if(final):
            ngot_png_file = ngot_png_file.replace('rsAssignments',
                                                  'final/rsAssignmentsFinal')
        if(complete):
            ngot_png_file = ngot_png_file.replace('rsAssignments',
                                                  'rsAssignmentsComplete')
        if(reassign):
            ngot_png_file = ngot_png_file.replace('rsAssignments',
                                                  'rsAssignmentsReassign')
        plt.savefig(ngot_png_file)
        plt.clf()

        fig = plt.figure(figsize=(8, 4))
        healpy.mollview(
            np.arcsinh(fgot_map),
            title='Fraction of targets gotten ' + carton,
            min=-0.1, max=1.,
            rot=(270., 0., 0.))
        fgot_png_file = sdss_path.full(
            'rsAssignmentsPng', name='fgot-carton-{c}'.format(c=carton),
            plan=plan, observatory=observatory)
        if(opentargets):
            fgot_png_file = fgot_png_file.replace('rsAssignments',
                                                  'rsAssignmentsOpen')
        if(filler):
            fgot_png_file = fgot_png_file.replace('rsAssignments',
                                                  'rsAssignmentsFiller')
        if(final):
            fgot_png_file = fgot_png_file.replace('rsAssignments',
                                                  'final/rsAssignmentsFinal')
        if(complete):
            fgot_png_file = fgot_png_file.replace('rsAssignments',
                                                  'rsAssignmentsComplete')
        if(reassign):
            fgot_png_file = fgot_png_file.replace('rsAssignments',
                                                  'rsAssignmentsReassign')
        plt.savefig(fgot_png_file)
        plt.clf()
