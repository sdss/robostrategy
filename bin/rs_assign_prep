#!/usr/bin/env python
# encoding: utf-8
#
# @Author: Michael R. Blanton
# @Date: Sept 26, 2018
# @Filename: rs_assign_prep
# @License: BSD 3-Clause
# @Copyright: Michael R. Blanton


from __future__ import division
from __future__ import print_function
from __future__ import absolute_import
from __future__ import unicode_literals

import os
os.environ['OPENBLAS_NUM_THREADS'] = '1'

import argparse
import sys
import multiprocessing
import numpy as np
import roboscheduler.cadence as cadence
import robostrategy.params as params
import sdss_access.path
import fitsio

sdss_path = sdss_access.path.Path(release='sdss5', preserve_envvars=True)

cadencelist = cadence.CadenceList(skybrightness_only=True)

noclobber = False
bright_stars_cache = None
dms = None

rmcadences = ['dark_174x8', 'dark_100x8',
              'dark_174x8_v1', 'dark_100x8_v1',
              'dark_174x8_v2', 'dark_100x8_v2']

def prep_field(indx):
    import robostrategy.field as field

    fieldid = allocate['fieldid'][indx]
    print("fieldid {f}: Prepping field".format(f=fieldid), flush=True)

    field_cadence = allocate['cadence'][indx].strip()

    if(refresh):
        field_cadence_refresh = allocate_refresh['cadence'][indx].strip()
        if(field_cadence == field_cadence_refresh):
            same_cadence = True
        else:
            same_cadence = False
    else:
        same_cadence = True

    print("fieldid {f}: Reading target file".format(f=fieldid), flush=True)
    field_target_file = sdss_path.full('rsFieldTargets',
                                       plan=plan, observatory=observatory,
                                       fieldid=fieldid)

    field_prep_file = field_target_file.replace('rsFieldTargets',
                                                'rsFieldPrep')

    if(((noclobber is True) | (refresh is True)) & os.path.isfile(field_prep_file)):
        if(same_cadence):
            print("Fieldid {f} exists already".format(f=fieldid))
            return
        else:
            print("Fieldid {f} being overwritten with new cadence".format(f=fieldid))
            field_cadence = field_cadence_refresh

    f = field.Field(filename=field_target_file, verbose=True,
                    fieldid=fieldid, collisionBuffer=collisionBuffer,
                    bright_neighbors=True, allgrids=False,
                    input_design_mode=dms)

    if((bright_stars_cache is not None) &
       (field_cadence != 'none')):
        cache_file = sdss_path.full('rsFieldTargets',
                                    plan=bright_stars_cache,
                                    observatory=observatory,
                                    fieldid=fieldid)
        cache_file = cache_file.replace('allocations',
                                        'bs-cache')
        cache_file = cache_file.replace('rsFieldTargets',
                                        'rsBrightStars')
        cache = fitsio.FITS(cache_file)
        cache[0].read_header()
        bsDict = field.read_bright_stars(fits=cache)
        for design_mode, fiberType in bsDict:
            bs = bsDict[design_mode, fiberType]
            f.set_bright_stars(design_mode=design_mode,
                               fiberType=fiberType,
                               bright_stars=bs)
        cache.close()

    print("fieldid {f}: Set field cadence".format(f=fieldid), flush=True)
    icalib = np.where(f.targets['category'] != 'science')[0]
    f.targets['cadence'][icalib] = field_cadence
    
    if(allocate['cadence'][indx] in rmcadences):
        print("fieldid {fid}: Not reassigning RM field, do not set incadence".format(fid=fieldid), flush=True)
        f.noincadence = True

    f.set_field_cadence(field_cadence)

    print("fieldid {f}: Write prepped file".format(f=fieldid), flush=True)
    f.tofits(field_prep_file)

    print("fieldid {f}: Done".format(f=fieldid), flush=True)
    return


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Prep file cadences based on allocation')

    parser.add_argument('-p', '--plan', dest='plan',
                        type=str, help='name of plan', required=True)
    parser.add_argument('-o', '--observatory', dest='observatory',
                        type=str, help='apo or lco',
                        choices=['apo', 'lco'], required=True)
    parser.add_argument('-s', '--start', dest='start',
                        type=np.int32, help='field to start', required=False,
                        default=0)
    parser.add_argument('-e', '--end', dest='end',
                        type=np.int32, help='field to end', required=False,
                        default=-1)
    parser.add_argument('-n', '--refresh', dest='refresh',
                        help='clobber ONLY when allocation has changed', required=False,
                        default=False, action='store_true')
    parser.add_argument('-C', '--no-clobber', dest='noclobber',
                        help='do not clobber', required=False,
                        default=False, action='store_true')
    parser.add_argument('-M', '--no-multiprocess', dest='nomultiprocess',
                        help='do not use multiprocess', required=False,
                        default=False, action='store_true')
    parser.add_argument('-r', '--reset-calibration', dest='resetcalibration',
                        type=str, help='list of calibration requirements', required=False,
                        default=None)

    args = parser.parse_args()
    plan = args.plan
    observatory = args.observatory
    refresh = args.refresh
    start = args.start
    end = args.end
    noclobber = args.noclobber
    nomultiprocess = args.nomultiprocess
    resetcalibration = args.resetcalibration

    if(resetcalibration is not None):
        import mugatu.designmode
        dms = mugatu.designmode.allDesignModes()
        for resetstr in resetcalibration.split(','):
            modecalib, value = resetstr.split('=')
            mode, typename, instrname = modecalib.split('_')
            calibname = typename + "_" + instrname
            if(typename == 'sky'):
                nm = 'skies'
            elif(typename == 'standard'):
                nm = 'stds'
            else:
                raise ValueError("No type {t}".format(t=typename))
            for d in dms: 
                if(mode in d):
                    print("Resetting calibration requirement {c} to {v} for {d}".format(c=calibname, v=value, d=d),
                          flush=True)
                    dms[d].__getattribute__('n_{nm}_min'.format(nm=nm))[instrname.upper()] = np.int32(value)
    else:
        dms = None
                
    rsParams = params.RobostrategyParams(plan=plan)

    collisionBuffer = 2.
    if('Assignment' in rsParams.cfg):
        if('collisionBuffer' in rsParams.cfg['Assignment']):
            collisionBuffer = np.float32(rsParams.cfg['Assignment']['collisionBuffer'])

    bright_stars_cache = None
    if('BrightStarsCache' in rsParams.cfg['Fields']):
        bright_stars_cache = rsParams.cfg['Fields']['BrightStarsCache']

    cadencelist = cadence.CadenceList(skybrightness_only=True)
    cadences_file = sdss_path.full('rsCadences', plan=plan,
                                   observatory=observatory)
    cadencelist.fromfits(filename=cadences_file, unpickle=True)

    allocate_file = sdss_path.full('rsAllocation', plan=plan,
                                   observatory=observatory)
    allocate = fitsio.read(allocate_file, ext='ALLOCATE')

    if(refresh):
        allocate_refresh_file = allocate_file.replace('rsAllocation', 'rsAllocationRefresh')
        allocate_refresh = fitsio.read(allocate_refresh_file, ext='ALLOCATE')

    if(end < 0):
        end = allocate['fieldid'].max()
    ikeep = np.where((allocate['fieldid'] >= start) &
                     (allocate['fieldid'] <= end))[0]

    np.random.shuffle(ikeep)
    if(nomultiprocess):
        for i in ikeep:
            prep_field(i)
    else:
        if(bright_stars_cache is None):
            with multiprocessing.Pool(2) as pool:
                pool.map(prep_field, ikeep)
        else:
            with multiprocessing.Pool() as pool:
                pool.map(prep_field, ikeep)
