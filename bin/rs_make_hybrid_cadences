#!/usr/bin/env python

import os
import sys
import fitsio
import argparse
import numpy as np
import roboscheduler.cadence as cadence
import sdss_access.path

sdss_path = sdss_access.path.Path(release='sdss5', preserve_envvars=True)

clist = cadence.CadenceList(skybrightness_only=True)


def make_hybrid_cadence_new(original_name=None, hybrid_name=None, ndone_epochs=None,
			    nexpper=2, nepochs=None):
    if(nepochs is None):
        nepochs = clist.cadences[original_name].nepochs

    nexp = clist.cadences[original_name].nexp[0:nepochs].copy()
    nexp[0:ndone_epochs] = nexpper

    for version in ['', '_v2']:
        clist.add_cadence(name=hybrid_name + version,
                          nepochs=nepochs,
                          skybrightness=clist.cadences[original_name].skybrightness[0:nepochs],
                          delta=clist.cadences[original_name].delta[0:nepochs],
                          delta_min=clist.cadences[original_name].delta_min[0:nepochs],
                          delta_max=clist.cadences[original_name].delta_max[0:nepochs],
                          nexp=nexp,
                          max_length=clist.cadences[original_name].max_length[0:nepochs],
                          min_moon_sep=clist.cadences[original_name].min_moon_sep[0:nepochs],
                          min_deltav_ks91=clist.cadences[original_name].min_deltav_ks91[0:nepochs],
                          min_twilight_ang=clist.cadences[original_name].min_twilight_ang[0:nepochs],
                          max_airmass=clist.cadences[original_name].max_airmass[0:nepochs],
                          obsmode_pk=clist.cadences[original_name].obsmode_pk[0:nepochs])

        clist.cadences[hybrid_name + version].label_root = hybrid_name
        clist.cadences[hybrid_name + version].label_version = version
    
    return


def make_mixed_cadence(original_name=None, new_name=None):
    version = ''
    nepochs = clist.cadences[original_name].nepochs - 1
    iepochs = np.arange(nepochs - 1, dtype=np.int32) + 1
    iepochs = np.append([0], iepochs)

    for version in ['', '_v2']:
        clist.add_cadence(name=new_name + version,
                          nepochs=nepochs,
                          skybrightness=clist.cadences[original_name].skybrightness[iepochs],
                          delta=clist.cadences[original_name].delta[iepochs],
                          delta_min=clist.cadences[original_name].delta_min[iepochs],
                          delta_max=clist.cadences[original_name].delta_max[iepochs],
                          nexp=clist.cadences[original_name].nexp[iepochs],
                          max_length=clist.cadences[original_name].max_length[iepochs],
                          min_moon_sep=clist.cadences[original_name].min_moon_sep[iepochs],
                          min_deltav_ks91=clist.cadences[original_name].min_deltav_ks91[iepochs],
                          min_twilight_ang=clist.cadences[original_name].min_twilight_ang[iepochs],
                          max_airmass=clist.cadences[original_name].max_airmass[iepochs],
                          obsmode_pk=clist.cadences[original_name].obsmode_pk[iepochs])
        
        clist.cadences[new_name + version].label_root = new_name
        clist.cadences[new_name + version].label_version = version
    
    return


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Create hybrid cadence file')

    parser.add_argument('-p', '--plan', dest='plan',
                        type=str, help='name of plan')

    parser.add_argument('-o', '--observatory', dest='observatory',
                        type=str, help='name of observatory')

    args = parser.parse_args()
    plan = args.plan
    observatory = args.observatory

    cadences_file = sdss_path.full('rsCadences', plan=plan,
                                   observatory=observatory)
    orig_cadences_file = cadences_file.replace('rsCadences', 'rsCadencesOrig')
    clist.fromfits(filename=orig_cadences_file, unpickle=False)

    hybrid_names = []

    bright_n = [2, 3, 4, 5, 6, 8, 12, 18]
    bright_names = ['bright_{n}x1'.format(n=n) for n in bright_n]
    single_n = range(2, 50) 
    single_names = ['bright_single_{n}x1'.format(n=n) for n in single_n]
    original_names = bright_names + single_names

    nexpper = 2
    ndone_epochs_s = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]
    for original_name in original_names:
        print("original= {o}".format(o=original_name))
        for ndone_epochs in ndone_epochs_s:
            nnotdone_epochs = clist.cadences[original_name].nepochs - ndone_epochs
            if(nnotdone_epochs > 0):
                for prefix in ['bright', 'bright_single']:
                    complete_name = '{prefix}_{d}x{p}'.format(prefix=prefix, p=nexpper, d=ndone_epochs)
                    if(complete_name not in clist.cadences):
                        hybrid_names.append(complete_name)
                        print(complete_name, flush=True)
                        make_hybrid_cadence_new(original_name=original_name, hybrid_name=complete_name,
                                                nexpper=nexpper, ndone_epochs=ndone_epochs,
                                                nepochs=ndone_epochs)

                    hybrid_name = '{prefix}_{d}x{p}+{nd}x1'.format(prefix=prefix, p=nexpper, d=ndone_epochs, nd=nnotdone_epochs)
                    hybrid_names.append(hybrid_name)
                    print(hybrid_name, flush=True)
                    make_hybrid_cadence_new(original_name=original_name, hybrid_name=hybrid_name,
                                            nexpper=nexpper, ndone_epochs=ndone_epochs)

    original_names = ['bright_2x1', 'bright_3x1', 'bright_4x1', 'bright_6x1', 'bright_8x1']
    nexpper = 4
    ndone_epochs_s = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    for original_name in original_names:
        for ndone_epochs in ndone_epochs_s:
            nnotdone_epochs = clist.cadences[original_name].nepochs - ndone_epochs
            if(nnotdone_epochs > 0):
                complete_name = 'bright_{d}x{p}'.format(p=nexpper, d=ndone_epochs)
                if(complete_name not in clist.cadences):
                    hybrid_names.append(complete_name)
                    print(complete_name, flush=True)
                    make_hybrid_cadence_new(original_name=original_name, hybrid_name=complete_name,
                                            nexpper=nexpper, ndone_epochs=ndone_epochs,
                                            nepochs=ndone_epochs)

                hybrid_name = 'bright_{d}x{p}+{nd}x1'.format(p=nexpper, d=ndone_epochs, nd=nnotdone_epochs)
                hybrid_names.append(hybrid_name)
                print(hybrid_name)
                make_hybrid_cadence_new(original_name=original_name, hybrid_name=hybrid_name,
                                        nexpper=nexpper, ndone_epochs=ndone_epochs)

    original_names = ['bright_6x2', 'bright_8x2']
    nexpper = 4
    ndone_epochs_s = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    for original_name in original_names:
        for ndone_epochs in ndone_epochs_s:
            nnotdone_epochs = clist.cadences[original_name].nepochs - ndone_epochs
            if(nnotdone_epochs > 0):
                complete_name = 'bright_{d}x{p}'.format(p=nexpper, d=ndone_epochs)
                if(complete_name not in clist.cadences):
                    hybrid_names.append(complete_name)
                    print(complete_name, flush=True)
                    make_hybrid_cadence_new(original_name=original_name, hybrid_name=complete_name,
                                            nexpper=nexpper, ndone_epochs=ndone_epochs,
                                            nepochs=ndone_epochs)

                hybrid_name = 'bright_{d}x{p}+{nd}x2'.format(p=nexpper, d=ndone_epochs, nd=nnotdone_epochs)
                hybrid_names.append(hybrid_name)
                make_hybrid_cadence_new(original_name=original_name, hybrid_name=hybrid_name,
                                        nexpper=nexpper, ndone_epochs=ndone_epochs)

    cadences = [c for c in clist.cadences]
    for c in cadences:
        if('mixed2_' in c):
            new_name = c.replace('mixed2_', 'mixed_')
            make_mixed_cadence(c, new_name)
            hybrid_names.append(new_name)

    new_cadences_file = cadences_file.replace('rsCadences', 'rsCadencesNew')
    clist_array = clist.toarray()
    fitsio.write(new_cadences_file, clist_array, clobber=True)

    cadences = [c for c in clist.cadences]
    for c in cadences:
        if(clist.cadences[c].label_root not in hybrid_names):
            print("pop {c} {l}".format(c=c, l=clist.cadences[c].label_root))
            clist.cadences.pop(c)
            
    hybrid_cadences_file = cadences_file.replace('rsCadences', 'rsCadencesHybrid')
    clist.tocsv(filename=hybrid_cadences_file.replace('.fits', '.csv'))

    fp = open(hybrid_cadences_file.replace('.fits', '.cfg'), 'w')
    for c in clist.cadences:
        txt = clist.cadences[c].epoch_text()
        fp.write(txt)
    fp.close()
