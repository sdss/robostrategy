#!/usr/bin/env python
# encoding: utf-8
#
# @Author: Michael R. Blanton
# @Date: Sept 26, 2018
# @Filename: rs_final_assignments
# @License: BSD 3-Clause
# @Copyright: Michael R. Blanton


from __future__ import division
from __future__ import print_function
from __future__ import absolute_import
from __future__ import unicode_literals

import os
os.environ['OPENBLAS_NUM_THREADS'] = '1'

import argparse
import sys
import shutil
import multiprocessing
import numpy as np
import astropy.io.fits as fits
import robostrategy.params as params
import roboscheduler.cadence as cadence
import sdss_access.path
import fitsio

sdss_path = sdss_access.path.Path(release='sdss5', preserve_envvars=True)


def process_field(ifield):
    field = fields[ifield]
    fieldid = field['fieldid'] + reset - 1

    old_cadence = field['cadence'] + '_' + version

    if(old_cadence in rename_dict):
        outfile = sdss_path.full('rsFieldAssignments', plan=plan,
                                 observatory=observatory, fieldid=fieldid)
        outfile = outfile.replace('targets/rsFieldAssignments', 'final/rsFieldAssignmentsFinal')
        
        hdulist = fits.open(outfile, mode='update')
        
        print("fieldid {fid}: Renaming cadence {old} to {new}".format(fid=fieldid,
                                                                      old=hdulist[0].header['FCADENCE'],
                                                                      new=rename_dict[old_cadence]))
        hdulist[0].header['FCADENCE'] = rename_dict[old_cadence]
        hdulist.flush()
        hdulist.close()
    return


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Final allocation file, splitting mixed cadences')

    parser.add_argument('-p', '--plan', dest='plan',
                        type=str, help='name of plan', required=True)

    parser.add_argument('-o', '--observatory', dest='observatory',
                        type=str, help='observatory', required=True)

    parser.add_argument('-r', '--reset', dest='reset',
                        type=np.int32, help='reset (specific "db" or number)',
                        required=True)

    args = parser.parse_args()
    plan = args.plan
    observatory = args.observatory
    reset = args.reset

    rsParams = params.RobostrategyParams(plan=plan)

    version = None
    if('CadenceVersions' in rsParams.cfg):
        if('version' in rsParams.cfg['CadenceVersions']):
            version = rsParams.cfg.get('CadenceVersions', 'version')

    if('FinalCadenceRenaming' in rsParams.cfg):
        rename_dict = rsParams.cfg['FinalCadenceRenaming']
    else:
        rename_dict = dict()

    allocate_file = sdss_path.full('rsAllocation', plan=plan,
                                   observatory=observatory)
    fields = fitsio.read(allocate_file, ext=1)
    
    with multiprocessing.Pool() as pool:
        pool.map(process_field, np.arange(len(fields), dtype=int))

