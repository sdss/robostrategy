#!/usr/bin/env python
# encoding: utf-8
#
# @Author: Michael R. Blanton
# @Date: Sept 26, 2018
# @Filename: rs_assign_kaiju
# @License: BSD 3-Clause
# @Copyright: Michael R. Blanton


from __future__ import division
from __future__ import print_function
from __future__ import absolute_import
from __future__ import unicode_literals

import argparse
import os
import sys
import numpy as np
import fitsio
import roboscheduler.cadence as cadence
import robostrategy.field as field
import robostrategy.allocate
import sdss_access.path

user_robo_data_dir = os.getenv('ROBOSTRATEGY_DATA')
sdss_path = sdss_access.path.Path(release='sdss5')
os.environ['ROBOSTRATEGY_DATA'] = user_robo_data_dir # Above call overwrites user specified directory


def count_lost(f, i):
    ilost = []
    igot = []
    for itarget in np.arange(f.ntarget):
        if((len(np.where(f.assignments[:, i] == itarget)[0]) > 0) &
           (len(np.where(f.kaiju_assignments[:, i] == itarget)[0]) == 0)):
            ilost.append(itarget)
        if(len(np.where(f.kaiju_assignments[:, i] == itarget)[0]) > 0):
            igot.append(itarget)
    ilost = np.array(ilost)
    igot = np.array(igot)
    if(len(igot) == 0):
        return(len(ilost), len(igot), np.zeros(0, dtype=np.int32),
               np.zeros(0, dtype=np.int32), np.zeros(0, dtype=np.int32),
               np.zeros(0, dtype=np.int32))
    dlost = []
    for i in ilost:
        d = np.sqrt((f.target_x[i] - f.target_x)**2 +
                    (f.target_y[i] - f.target_y)**2)
        d = d[d != 0.]
        dlost.append(d.min())
    dlost = np.array(dlost)
    dgot = []
    for i in igot:
        d = np.sqrt((f.target_x[i] - f.target_x)**2 +
                    (f.target_y[i] - f.target_y)**2)
        d = d[d != 0.]
        dgot.append(d.min())
    dgot = np.array(dgot)
    dglost = []
    for i in ilost:
        d = np.sqrt((f.target_x[i] - f.target_x[igot])**2 +
                    (f.target_y[i] - f.target_y[igot])**2)
        dglost.append(d.min())
    dglost = np.array(dglost)
    dggot = []
    for i in igot:
        d = np.sqrt((f.target_x[i] - f.target_x[igot])**2 +
                    (f.target_y[i] - f.target_y[igot])**2)
        d = d[d != 0.]
        dggot.append(d.min())
    dggot = np.array(dggot)
    nlost = len(ilost)
    ngot = len(igot)
    return(nlost, ngot, dlost, dgot, dglost, dggot)

if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Final assignment based on allocation')

    parser.add_argument('-p', '--plan', dest='plan',
                        type=str, help='name of plan', required=True)
    parser.add_argument('-o', '--observatory', dest='observatory',
                        type=str, help='apo or lco',
                        choices=['apo', 'lco'], required=True)

    args = parser.parse_args()
    plan = args.plan
    observatory = args.observatory

    cadencelist = cadence.CadenceList()
    cadences_file = sdss_path.full('rsCadences', plan=plan,
                                   observatory=observatory)
    cadencelist.fromfits(filename=cadences_file, unpickle=True)

    allocate_file = sdss_path.full('rsAllocation', plan=plan,
                                   observatory=observatory)
    allocate = robostrategy.allocate.AllocateLST(filename=allocate_file,
                                                 observatory=observatory)

    gfieldids = np.zeros(0, dtype=np.int32)
    lfieldids = np.zeros(0, dtype=np.int32)
    gexpids = np.zeros(0, dtype=np.int32)
    lexpids = np.zeros(0, dtype=np.int32)
    anlost = np.zeros(0, dtype=np.int32)
    angot = np.zeros(0, dtype=np.int32)
    adlost = np.zeros(0, dtype=np.float32)
    adgot = np.zeros(0, dtype=np.float32)
    adglost = np.zeros(0, dtype=np.float32)
    adggot = np.zeros(0, dtype=np.float32)
    for indx in np.arange(len(allocate.field_array)):
        fieldid = allocate.field_array['fieldid'][indx]
        if((fieldid % 1) == 0):
            print(fieldid, flush=True)

        f = field.Field(racen=allocate.field_array['racen'][indx],
                        deccen=allocate.field_array['deccen'][indx],
                        observatory=observatory)

        field_target_file = sdss_path.full('rsFieldAssignments',
                                           plan=plan, observatory=observatory,
                                           fieldid=fieldid)
        f.fromfits(field_target_file)

        if(f.field_cadence != 'none'):
            f.apply_kaiju()
            nexposures = cadencelist.cadences[f.field_cadence].nexposures
            for i in np.arange(nexposures):
                nlost, ngot, dlost, dgot, dglost, dggot = count_lost(f, i)
                anlost = np.append(anlost, nlost)
                angot = np.append(angot, ngot)
                adlost = np.append(adlost, dlost)
                adgot = np.append(adgot, dgot)
                adglost = np.append(adglost, dglost)
                adggot = np.append(adggot, dggot)
                lfieldids = np.append(lfieldids, fieldid + np.zeros(len(dglost)))
                gfieldids = np.append(gfieldids, fieldid + np.zeros(len(dggot)))
                lexpids = np.append(lexpids, i + np.zeros(len(dglost)))
                gexpids = np.append(gexpids, i + np.zeros(len(dggot)))

            field_assigned_file = sdss_path.full('rsFieldAssignments',
                                                 plan=plan,
                                                 observatory=observatory,
                                                 fieldid=fieldid)
            f.tofits(field_assigned_file)
            if(len(dgot) > 0):
                fitsio.write(field_assigned_file, dgot, clobber=False)
            else:
                fitsio.write(field_assigned_file, np.array([-1]),
                             clobber=False)
            if(len(dlost) > 0):
                fitsio.write(field_assigned_file, dlost, clobber=False)
            else:
                fitsio.write(field_assigned_file, np.array([-1]),
                             clobber=False)

    lostfile = 'rsKaijuLosses-{plan}-{obs}.fits'
    lostfile = lostfile.format(plan=plan, obs=observatory)
    fitsio.write(lostfile, angot, clobber=True)
    fitsio.write(lostfile, anlost, clobber=False)
    fitsio.write(lostfile, adgot, clobber=False)
    fitsio.write(lostfile, adlost, clobber=False)
    fitsio.write(lostfile, adggot, clobber=False)
    fitsio.write(lostfile, adglost, clobber=False)
    fitsio.write(lostfile, gfieldids, clobber=False)
    fitsio.write(lostfile, lfieldids, clobber=False)
    fitsio.write(lostfile, gexpids, clobber=False)
    fitsio.write(lostfile, lexpids, clobber=False)
