#!/usr/bin/env python
# encoding: utf-8
#
# @Author: Michael R. Blanton
# @Date: March 12, 2019
# @Filename: load_targets
# @License: BSD 3-Clause
# @Copyright: Michael R. Blanton

from __future__ import division
from __future__ import print_function
from __future__ import absolute_import
from __future__ import unicode_literals

import argparse
import os
import sys
import numpy as np
import sdss_access.path
import fitsio
import sdssdb.peewee.sdss5db.targetdb as targetdb
import peewee

sdss_path = sdss_access.path.Path()


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Load a set of targets')

    parser.add_argument('-f', '--filename', dest='filename',
                        type=str, help='file name',
                        required=True)

    parser.add_argument('-p', '--program', dest='program',
                        type=str, help='program name',
                        required=True)

    parser.add_argument('-t', '--type', dest='type',
                        type=str, help='type',
                        choices=['Science', 'Standard', 'Sky',
                                 'Guide'], default='Science',
                        required=False)

    parser.add_argument('-m', '--mapper', dest='mapper',
                        type=str, help='mapper name',
                        choices=['MWM', 'BHM'], required=True)

    args = parser.parse_args()
    program = args.program
    filename = args.filename
    mapper = args.mapper
    target_type = args.type

    targets = fitsio.read(filename, ext=1)

    # Create dictionary to look up spectrograph pk from instrument name
    surveys = targetdb.Survey.select().dicts()
    survey_pk = dict()
    for survey in surveys:
        survey_pk[survey['label']] = survey['pk']

    # Create dictionary to look up spectrograph pk from instrument name
    target_types = targetdb.TargetType.select().dicts()
    target_type_pk = dict()
    for ttype in target_types:
        target_type_pk[ttype['label']] = ttype['pk']

    # Create dictionary to look up spectrograph pk from instrument name
    cadences = targetdb.TargetCadence.select().dicts()
    cadence_pk = dict()
    for cadence in cadences:
        cadence_pk[cadence['name']] = cadence['pk']

    target_cadences_raw = np.unique(targets['cadence'])
    target_cadences = [x.decode().strip() for x in target_cadences_raw]
    db_cadences = [x['name'] for x in cadences]
    for target_cadence in target_cadences:
        if(target_cadence not in db_cadences):
            print("Cadence {tc} not in database, not loading targets.".format(tc=target_cadence))
            sys.exit(1)

    # Check if program already exists
    existing_programs = targetdb.Program.select().dicts()
    for existing_program in existing_programs:
        if(existing_program['label'] == program):
            print("Program {p} already in database, not loading targets.".format(p=program))
            sys.exit(1)

    # Insert new file
    existing_files = targetdb.File.select().dicts()
    file_pks = np.array([x['pk'] for x in existing_files])
    file_pk = file_pks.max() + 1
    file_insert = targetdb.File.insert(pk=file_pk, filename=os.path.basename(filename))

    # Insert new program
    program_pks = np.array([x['pk'] for x in existing_programs])
    program_pk = program_pks.max() + 1
    program_insert = targetdb.Program.insert(pk=program_pk,
                                             label=program,
                                             survey_pk=survey_pk[mapper])

    target_pk_max = (targetdb.Target.select(peewee.fn.Max(targetdb.Target.pk)).dicts())[0]['max']
    data = []
    for indx in np.arange(len(targets), dtype=np.int32):
        target = targets[indx]
        data_dict = dict()
        data_dict['pk'] = target_pk_max + 1 + indx
        data_dict['ra'] = target['ra']
        data_dict['dec'] = target['dec']
        data_dict['pmra'] = 0.
        data_dict['pmdec'] = 0.
        data_dict['file_pk'] = file_pk
        data_dict['file_index'] = indx
        data_dict['target_type_pk'] = target_type_pk[target_type]
        target_cadence = target['cadence'].decode().strip()
        if(target_cadence not in cadence_pk):
            print("Cadence {c} not in database, not loading.".format(c=target_cadence))
            sys.exit(1)
        data_dict['target_cadence_pk'] = cadence_pk[target_cadence]
        data_dict['program_pk'] = program_pk
        data_dict['priority'] = target['priority']
        data_dict['value'] = target['value']
        data.append(data_dict)

    file_insert.execute()
    program_insert.execute()

    chunksize = 200000
    nchunks = (len(data) // chunksize) + 1
    for ichunk in np.arange(nchunks, dtype=np.int32):
        ist = ichunk * chunksize
        ind = (ichunk + 1) * chunksize
        if(ind > len(data)):
            ind = len(data)
        print("{ist}-{ind}".format(ist=ist, ind=ind))
        targetdb.Target.insert_many(data[ist:ind]).execute()
