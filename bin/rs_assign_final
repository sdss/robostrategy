#!/usr/bin/env python
# encoding: utf-8
#
# @Author: Michael R. Blanton
# @Date: Sept 26, 2018
# @Filename: rs_assign_final
# @License: BSD 3-Clause
# @Copyright: Michael R. Blanton


from __future__ import division
from __future__ import print_function
from __future__ import absolute_import
from __future__ import unicode_literals

import argparse
import os
import sys
import multiprocessing
import numpy as np
import roboscheduler.cadence as cadence
import robostrategy.field as field
import robostrategy.allocate
import robostrategy.params as params
import sdss_access.path

#sdss_path = sdss_access.path.Path(release='sdss5')
sdss_path = sdss_access.path.Path()


def assign_field(indx):
    fieldid = allocate.field_array['fieldid'][indx]
    if((fieldid % 1) == 0):
        print(fieldid, flush=True)

    f = field.Field(racen=allocate.field_array['racen'][indx],
                    deccen=allocate.field_array['deccen'][indx],
                    observatory=observatory)
    if(rotate):
        f.pa = np.float32(allocate.fields[paname][indx])
        print(f.pa)

    field_target_file = sdss_path.full('rsFieldTargets',
                                       plan=plan, observatory=observatory,
                                       fieldid=fieldid)
    f.targets_fromfits(field_target_file)

    field_cadence = allocate.field_array['cadence'][indx].strip()
    f.set_field_cadence(field_cadence)

    if(f.field_cadence != 'none'):
        f.assign(kaiju=kaiju)

    field_assigned_file = sdss_path.full('rsFieldAssignments',
                                         plan=plan,
                                         observatory=observatory,
                                         fieldid=fieldid)
    f.tofits(field_assigned_file)


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Final assignment based on allocation')

    parser.add_argument('-p', '--plan', dest='plan',
                        type=str, help='name of plan', required=True)
    parser.add_argument('-o', '--observatory', dest='observatory',
                        type=str, help='apo or lco',
                        choices=['apo', 'lco'], required=True)
    parser.add_argument('-n', '--no-kaiju', dest='kaiju',
                        help='do not use kaiju',
                        default=True, action='store_false')
    parser.add_argument('-s', '--start', dest='start',
                        type=np.int32, help='field to start', required=False,
                        default=0)
    parser.add_argument('-e', '--end', dest='end',
                        type=np.int32, help='field to end', required=False,
                        default=-1)

    args = parser.parse_args()
    plan = args.plan
    observatory = args.observatory
    kaiju = args.kaiju
    start = args.start
    end = args.end
    print("kaiju = {kaiju}".format(kaiju=kaiju))

    rsParams = params.RobostrategyParams(plan=plan)
    if('Rotate' in rsParams.cfg['Fields']):
        rotate = True
        paname = rsParams.cfg['Fields']['Rotate']
    else:
        rotate = False
        paname = ''

    cadencelist = cadence.CadenceList()
    cadences_file = sdss_path.full('rsCadences', plan=plan,
                                   observatory=observatory)
    cadencelist.fromfits(filename=cadences_file, unpickle=True)

    allocate_file = sdss_path.full('rsAllocation', plan=plan,
                                   observatory=observatory)
    allocate = robostrategy.allocate.AllocateLST(filename=allocate_file,
                                                 observatory=observatory)

    if(end < 0):
        end = allocate.field_array['fieldid'].max()
    ikeep = np.where((allocate.field_array['fieldid'] >= start) &
                     (allocate.field_array['fieldid'] <= end))[0]

    with multiprocessing.Pool() as pool:
        pool.map(assign_field, ikeep)
