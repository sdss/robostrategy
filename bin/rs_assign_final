#!/usr/bin/env python
# encoding: utf-8
#
# @Author: Michael R. Blanton
# @Date: Sept 26, 2018
# @Filename: rs_assign_final
# @License: BSD 3-Clause
# @Copyright: Michael R. Blanton


from __future__ import division
from __future__ import print_function
from __future__ import absolute_import
from __future__ import unicode_literals

import argparse
import os
import sys
import numpy as np
import roboscheduler.cadence as cadence
import robostrategy.field as field
import robostrategy.allocate
import sdss_access.path

sdss_path = sdss_access.path.Path()


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Final assignment based on allocation')

    parser.add_argument('-p', '--plan', dest='plan',
                        type=str, help='name of plan', required=True)
    parser.add_argument('-o', '--observatory', dest='observatory',
                        type=str, help='apo or lco',
                        choices=['apo', 'lco'], required=True)

    args = parser.parse_args()
    plan = args.plan
    observatory = args.observatory

    cadencelist = cadence.CadenceList()
    cadences_file = sdss_path.full('rsCadences', plan=plan,
                                   observatory=observatory)
    cadencelist.fromfits(filename=cadences_file)

    allocate_file = sdss_path.full('rsAllocation', plan=plan,
                                   observatory=observatory)
    allocate = robostrategy.allocate.AllocateLST(filename=allocate_file)

    for indx in np.arange(len(allocate.field_array)):
        fieldid = allocate.field_array['fieldid'][indx]
        if((fieldid % 1) == 0):
            print(fieldid)

        f = field.Field(racen=allocate.fields['racen'][indx],
                        deccen=allocate.fields['deccen'][indx],
                        observatory=observatory)

        field_target_file = sdss_path.full('rsFieldTargets',
                                           plan=plan, observatory=observatory,
                                           fieldid=fieldid)
        f.targets_fromfits(field_target_file)

        for tindx in np.arange(f.ntarget):
            if('mwm_rv' in f.target_cadence[tindx]):
                f.target_x = f.target_x + 50. * np.random.random()
                f.target_y = f.target_y + 50. * np.random.random()
            if(f.target_cadence[tindx] == 'mwm_rv_16x1'):
                f.target_cadence[tindx] = 'mwm_rv_15x1'
            if(f.target_cadence[tindx] == 'mwm_rv_16x2'):
                f.target_cadence[tindx] = 'mwm_rv_15x2'
            if(f.target_cadence[tindx] == 'mwm_rv_16x3'):
                f.target_cadence[tindx] = 'mwm_rv_15x3'
            if(f.target_cadence[tindx] == 'mwm_rv_16x4'):
                f.target_cadence[tindx] = 'mwm_rv_15x4'

        values = np.ones(f.ntarget)

        f.field_cadence = allocate.field_array['cadence'][indx].decode().strip()

        if(f.field_cadence != 'none'):
            f.assign()

        field_assigned_file = sdss_path.full('rsFieldAssignments',
                                             plan=plan,
                                             observatory=observatory,
                                             fieldid=fieldid)
        f.tofits(field_assigned_file)
