#!/usr/bin/env python
# encoding: utf-8
#
# @Author: Michael R. Blanton
# @Date: Aug 3, 2018
# @Filename: rs_field_slots
# @License: BSD 3-Clause
# @Copyright: Michael R. Blanton


from __future__ import division
from __future__ import print_function
from __future__ import absolute_import
from __future__ import unicode_literals

import argparse
import os
import sys
import numpy as np
import fitsio
import robostrategy
import robostrategy.slots
import roboscheduler.scheduler
import roboscheduler.cadence as cadence
import robostrategy.params as params
import sdss_access.path

sdss_path = sdss_access.path.Path()


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Create available slots for fields')

    parser.add_argument('-p', '--plan', dest='plan',
                        type=str, help='name of plan', required=True)
    parser.add_argument("-o", "--observatory", dest="observatory", type=str,
                        required=False, help="observatory ('apo' or 'lco')",
                        default='apo')

    args = parser.parse_args()
    plan = args.plan
    observatory = args.observatory
    airmass_limit = 1.4
    airmass_pad = 0.2

    rsParams = params.RobostrategyParams(plan=plan)

    if('BrightOnlyBright' in rsParams.cfg['Allocation']):
        bright_only_bright = True
    else:
        bright_only_bright = False

    cadencelist = cadence.CadenceList()
    cadences_file = sdss_path.full('rsCadences', plan=plan,
                                   observatory=observatory)
    cadencelist.fromfits(cadences_file, unpickle=True)

    slots = robostrategy.slots.Slots(observatory=observatory)
    slots_file = sdss_path.full('rsSlots', plan=plan, observatory=observatory)
    slots.fromfits(filename=slots_file)

    options_file = sdss_path.full('rsOptions', plan=plan,
                                  observatory=observatory)
    field_options = fitsio.read(options_file)
    nfields = len(field_options)

    field_slots_dtype = [('fieldid', np.int32),
                         ('cadence', cadence.fits_type),
                         ('racen', np.float64),
                         ('deccen', np.float64),
                         ('needed', np.int32),
                         ('needed_sb', np.int32, slots.nskybrightness),
                         ('slots', np.int32, (slots.nlst,
                                              slots.nskybrightness))]
    field_slots = np.zeros(nfields, dtype=field_slots_dtype)
    field_slots['fieldid'] = field_options['fieldid']
    field_slots['cadence'] = [c.decode().strip()
                              for c in field_options['cadence']]
    field_slots['racen'] = field_options['racen']
    field_slots['deccen'] = field_options['deccen']
    field_cadences = [c.decode().strip() for c in field_options['cadence']]
    field_max_skybrightness = [cadencelist.cadences[c].skybrightness.max() for
                               c in field_cadences]

    # needed is how many exposures are needed for cadence
    # needed_sb says how many are needed in each skybrightness
    #   slot (assuming they use bright for bright, dark for dark)
    for i in range(len(field_cadences)):
        c = field_cadences[i]
        field_slots['needed'][i] = cadencelist.cadences[c].nexposures
        for iexp in range(cadencelist.cadences[c].nexposures):
            isb = -1
            # well, that's a bit dangerous isn't it
            # relies on skybrightness in cadence always <= 1
            while((cadencelist.cadences[c].skybrightness[iexp] >
                   slots.skybrightness[isb + 1]) &
                  (cadencelist.cadences[c].skybrightness[iexp] <=
                   slots.skybrightness[isb + 2])):
                isb = isb + 1
            field_slots['needed_sb'][i, isb] = field_slots['needed_sb'][i, isb] + 1

    observer = roboscheduler.scheduler.Observer(observatory=observatory)
    for ilst in np.arange(slots.nlst):
        clst = (np.float32(ilst) + 0.5) / np.float32(slots.nlst) * 360.
        lst = np.zeros(nfields, dtype=np.float32) + clst
        ha = observer.ralst2ha(ra=field_options['racen'], lst=lst)
        (alt, az) = observer.hadec2altaz(ha=ha,
                                         dec=field_options['deccen'],
                                         lat=observer.latitude)
        (alt_max, az_tmp) = observer.hadec2altaz(ha=np.zeros(nfields),
                                                 dec=field_options['deccen'],
                                                 lat=observer.latitude)
        airmass = observer.alt2airmass(alt=alt)
        airmass_min = observer.alt2airmass(alt=alt_max)
        for iskybrightness in np.arange(slots.nskybrightness):
            okalt = ((alt > 0) &
                     ((airmass < airmass_limit) |
                      (airmass < airmass_min + airmass_pad)))
            if(bright_only_bright):
                oksky = (np.abs(field_max_skybrightness -
                                slots.skybrightness[iskybrightness + 1]) <
                         1.e-2)
            else:
                # is OK if ANY exposure can use this skybrightness slot
                oksky = (field_max_skybrightness >=
                         slots.skybrightness[iskybrightness + 1])
            iok = np.where(okalt & oksky)[0]
            field_slots['slots'][iok, ilst, iskybrightness] = 1.

    slots_file = sdss_path.full('rsFieldSlots', plan=plan,
                                observatory=observatory)
    hd = {'RSTVER': robostrategy.__version__}
    fitsio.write(slots_file, field_slots, header=hd, clobber=True)
