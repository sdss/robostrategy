#!/usr/bin/env python
# encoding: utf-8
#
# @Author: Michael R. Blanton
# @Date: May 19, 2020
# @Filename: rs_stats
# @License: BSD 3-Clause
# @Copyright: Michael R. Blanton


from __future__ import division
from __future__ import print_function
from __future__ import absolute_import
from __future__ import unicode_literals

import argparse
import os
import sys
import configparser
import numpy as np
import fitsio
import sdss_access.path

sdss_path = sdss_access.path.Path(release='sdss5', preserve_envvars=True)

if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Gather numbers per carton both sites')

    parser.add_argument('-p', '--plan', dest='plan',
                        type=str, help='name of plan', required=True)
    parser.add_argument('-O', '--open', dest='opentargets',
                        help='set to read open target results',
                        default=False, required=False,
                        action='store_true')

    args = parser.parse_args()
    plan = args.plan
    opentargets = args.opentargets

    description_file = os.path.join(os.getenv('RSCONFIG_DIR'), 'etc',
                                    'carton_description.cfg')
    if(os.path.exists(description_file)):
        description_cfg = configparser.ConfigParser(allow_no_value=True)
        description_cfg.optionxform = str
        description_cfg.read(description_file)
        if(opentargets):
            carton_description = description_cfg['Open']
        else:
            carton_description = description_cfg['Mapper']
    else:
        carton_description = dict()

    html_path = os.path.dirname(sdss_path.full('rsCompleteness', plan=plan,
                                               observatory='apo'))

    if(opentargets):
        html_file = os.path.join(html_path, 'rs-open-stats.html')
        stats_file = os.path.join(html_path, 'rsStatsOpen-{p}.fits'.format(p=plan))
    else:
        html_file = os.path.join(html_path, 'rs-stats.html')
        stats_file = os.path.join(html_path, 'rsStats-{p}.fits'.format(p=plan))

    stats_dtype = [('carton', np.dtype('a40')),
                   ('ntarget', np.int32),
                   ('ngot', np.int32),
                   ('fgot', np.float32),
                   ('ntarget_apo', np.int32),
                   ('ngot_apo', np.int32),
                   ('fgot_apo', np.float32),
                   ('ntarget_lco', np.int32),
                   ('ngot_lco', np.int32),
                   ('fgot_lco', np.float32)]
    stats = np.zeros(0, dtype=stats_dtype)

    completeness_file = os.path.basename(sdss_path.full('rsCompleteness',
                                                        plan=plan,
                                                        observatory='both'))
    if(opentargets):
        completeness_file = completeness_file.replace('rsCompleteness',
                                                      'rsCompletenessOpen')

    completeness_hdr = fitsio.read_header(completeness_file, ext=1)

    ncarton = np.int32(completeness_hdr['NCARTON'])
    ncad = np.int32(completeness_hdr['NCADENCE'])
    for icarton in np.arange(ncarton):
        hdr = fitsio.read_header(completeness_file,
                                 ext=(ncad + 1 + icarton) * 3 + 2)
        carton = hdr['CARTON'].strip()
        ntarget = hdr['NTARGETS']
        ngot = hdr['NGOT']
        fgot = hdr['FGOT']
        ntarget_apo = hdr['NTAR_APO']
        ngot_apo = hdr['NGOT_APO']
        fgot_apo = hdr['FGOT_APO']
        ntarget_lco = hdr['NTAR_LCO']
        ngot_lco = hdr['NGOT_LCO']
        fgot_lco = hdr['FGOT_LCO']
        if(len(stats) > 0):
            plist = np.array([p.decode().strip()
                              for p in stats['carton']])
            ip = np.where(plist == carton)[0]
        else:
            ip = []
        if(len(ip) == 0):
            stats_one = np.zeros(1, dtype=stats_dtype)
            stats_one['carton'] = carton
            stats = np.append(stats, stats_one)
            plist = np.array([p.decode().strip()
                              for p in stats['carton']])
            ip = np.where(plist == carton)[0]
        print(carton)
        print(plist)
        ip = ip[0]
        stats['ngot'][ip] = ngot
        stats['ntarget'][ip] = ntarget
        stats['fgot'][ip] = fgot
        stats['ngot_lco'][ip] = ngot_lco
        stats['ntarget_lco'][ip] = ntarget_lco
        stats['fgot_lco'][ip] = fgot_lco
        stats['ngot_apo'][ip] = ngot_apo
        stats['ntarget_apo'][ip] = ntarget_apo
        stats['fgot_apo'][ip] = fgot_apo

    fitsio.write(stats_file, stats, clobber=True)

    fp = open(html_file, "w")
    fp.write("<html>")
    fp.write("""<head>
<style>
table, th, td {
  border: 1px solid black;
  border-collapse: collapse;
}
</style>
</head>
""")
    fp.write("<body>")
    fp.write("<h2>{p}</h2><table>".format(p=plan))

    fp.write("""<table style="border: 1px solid black;" cellspacing=0px>
<thead>
    <tr>
    <th><b>Carton</b></th>
    <th><b>Description</b></th>
    <th><b>Number Gotten</b></th>
    <th>Number Targets</th>
    <th>Fraction Gotten</th>
    <th>Number Gotten (APO) </th>
    <th>Number Targets (APO) </th>
    <th>Fraction Gotten (APO) </th>
    <th>Number Gotten (LCO)</th>
    <th>Number Targets (LCO)</th>
    <th>Fraction Gotten (LCO)</th>
    </tr>
</thead>""")

    row_template = """<tr>
<td align='right'><b>{carton}</b></td>
<td align='right'><b>{description}</b></td>
<td align='right'><b>{ngot}</b></td>
<td align='right'>{ntarget}</td>
<td align='right'>{fgot:5.2f}</td>
<td align='right'>{ngot_apo}</td>
<td align='right'>{ntarget_apo}</td>
<td align='right'>{fgot_apo:5.2f}</td>
<td align='right'>{ngot_lco}</td>
<td align='right'>{ntarget_lco}</td>
<td align='right'>{fgot_lco:5.2f}</td>
</tr>"""

    ps = np.array([p.decode().strip() for p in stats['carton']])
    isci = np.where(ps != 'CALIBRATION')[0]

    fp.write(row_template.format(carton='All Science',
                                 description='', 
                                 ngot=stats['ngot'][isci].sum(),
                                 ntarget=stats['ntarget'][isci].sum(),
                                 fgot=stats['ngot'][isci].sum() /
                                 stats['ntarget'][isci].sum(),
                                 ngot_apo=stats['ngot_apo'][isci].sum(),
                                 ntarget_apo=stats['ntarget_apo'][isci].sum(),
                                 fgot_apo=stats['ngot_apo'][isci].sum() /
                                 stats['ntarget_apo'][isci].sum(),
                                 ngot_lco=stats['ngot_lco'][isci].sum(),
                                 ntarget_lco=stats['ntarget_lco'][isci].sum(),
                                 fgot_lco=stats['ngot_lco'][isci].sum() /
                                 stats['ntarget_lco'][isci].sum()))

    for s in stats[isci]:
        carton = s['carton'].decode().strip()
        if(carton in carton_description):
            description = carton_description[carton]
        else:
            description = ''
        fp.write(row_template.format(carton=carton,
                                     description=description,
                                     ngot=s['ngot'],
                                     ntarget=s['ntarget'],
                                     fgot=s['fgot'],
                                     ngot_apo=s['ngot_apo'],
                                     ntarget_apo=s['ntarget_apo'],
                                     fgot_apo=s['fgot_apo'],
                                     ngot_lco=s['ngot_lco'],
                                     ntarget_lco=s['ntarget_lco'],
                                     fgot_lco=s['fgot_lco']))

    fp.write("</table>")
    fp.write("</body>")
    fp.write("</html>")
    fp.close()
