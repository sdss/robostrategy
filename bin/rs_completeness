#!/usr/bin/env python
# encoding: utf-8
#
# @Author: Michael R. Blanton
# @Date: Aug 3, 2018
# @Filename: rs_completeness
# @License: BSD 3-Clause
# @Copyright: Michael R. Blanton


from __future__ import division
from __future__ import print_function
from __future__ import absolute_import
from __future__ import unicode_literals

import argparse
import os
import sys
import numpy as np
import healpy
import fitsio
import sdss_access.path

sdss_path = sdss_access.path.Path()


def make_map(hpix=None, got=None):

    igot = np.where(got)[0]

    ntargets_map = np.bincount(hpix, minlength=healpy.nside2npix(nside))
    ngot_map = np.bincount(hpix[igot], minlength=healpy.nside2npix(nside))

    fgot_map = - np.ones(healpy.nside2npix(nside), dtype=np.float32)
    inz = np.where(ntargets_map > 0)[0]
    fgot_map[inz] = ngot_map[inz] / ntargets_map[inz]

    return(ntargets_map, ngot_map, fgot_map)

    hdr = dict()
    hdr['NSIDE'] = nside
    fitsio.write(completeness_file, ntargets_map, header=hdr, clobber=True)
    fitsio.write(completeness_file, ngot_map, clobber=False)
    fitsio.write(completeness_file, fgot_map, clobber=False)


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Evaluate completeness of target assignments')

    parser.add_argument('-p', '--plan', dest='plan',
                        type=str, help='name of plan', required=True)
    parser.add_argument('-o', '--observatory', dest='observatory',
                        type=str, help='apo or lco',
                        choices=['apo', 'lco'], required=True)

    args = parser.parse_args()
    plan = args.plan
    observatory = args.observatory

    targets_file = sdss_path.full('rsTargets', plan=plan,
                                  observatory=observatory)
    targets = fitsio.read(targets_file)
    outtargets_dtype = np.dtype(targets.dtype.descr +
                                np.dtype([('got', np.int32),
                                          ('covered', np.int32)]).descr)
    outtargets = np.zeros(len(targets), dtype=outtargets_dtype)
    for name in targets.dtype.names:
        outtargets[name] = targets[name]

    fields_file = sdss_path.full('rsFields', plan=plan,
                                 observatory=observatory)
    fields = fitsio.read(fields_file)
    ftype = np.array([t.decode().strip() for t in fields['type']])
    if(observatory == 'apo'):
        mindec = fields['deccen'][ftype != 'rm_north'].min()
        icovered = np.where(outtargets['dec'] > mindec)[0]
        outtargets['covered'][icovered] = 1
    if(observatory == 'lco'):
        maxdec = fields['deccen'][ftype != 'rm_south'].max()
        icovered = np.where(outtargets['dec'] < maxdec)[0]
        outtargets['covered'][icovered] = 1

    cadences = np.array([c.decode().strip() for c in targets['cadence']])
    base_cadences = np.array([c.split('-')[0] for c in cadences])
    base_cadences = np.array(["_".join(c.split('_')[0:-1])
                              for c in base_cadences])
    unique_base_cadences = np.unique(base_cadences)
    ikeep = np.where(unique_base_cadences != "")[0]
    unique_base_cadences = unique_base_cadences[ikeep]

    programs = np.array([x.decode().strip() for x in targets['program']])
    unique_programs = np.unique(programs)

    assigned_file = sdss_path.full('rsAssignments', plan=plan,
                                   observatory=observatory)
    assigned = fitsio.read(assigned_file)

    gotpk = np.zeros(targets['pk'].max() + 1, dtype=np.int8)
    gotpk[assigned['pk']] = 1
    got = gotpk[targets['pk']]
    outtargets['got'] = got

    nside = 32
    hpix = healpy.pixelfunc.ang2pix(nside, targets['ra'],
                                    targets['dec'], lonlat=True)

    completeness_file = sdss_path.full('rsCompleteness', plan=plan,
                                       observatory=observatory)

    icadence = np.where(cadences != "none")[0]
    ntargets_map, ngot_map, fgot_map = make_map(hpix=hpix[icadence],
                                                got=got[icadence])

    ntargets = len(np.where(outtargets['covered'][icadence])[0])
    ngot = np.int32(got[icadence].sum())
    fgot = np.float32(ngot) / np.float32(ntargets)

    hdr = dict()
    hdr['NSIDE'] = nside
    hdr['NCADENCE'] = len(unique_base_cadences)
    hdr['NPROGRAM'] = len(unique_programs)
    hdr['NTARGETS'] = ntargets
    hdr['NGOT'] = ngot
    hdr['FGOT'] = fgot
    fitsio.write(completeness_file, outtargets, header=hdr, clobber=True)
    fitsio.write(completeness_file, ntargets_map, header=hdr, clobber=False)
    fitsio.write(completeness_file, ngot_map, header=hdr, clobber=False)
    fitsio.write(completeness_file, fgot_map, header=hdr, clobber=False)

    for indx in np.arange(len(unique_base_cadences)):
        unique_base_cadence = unique_base_cadences[indx]
        print(unique_base_cadence)

        icadence = np.where(base_cadences == unique_base_cadence)[0]
        ntargets_map, ngot_map, fgot_map = make_map(hpix=hpix[icadence],
                                                    got=got[icadence])

        ntargets = len(np.where(outtargets['covered'][icadence])[0])
        ngot = np.int32(got[icadence].sum())
        fgot = np.float32(ngot) / np.float32(ntargets)

        hdr = dict()
        hdr['CADENCE'] = unique_base_cadence
        hdr['NTARGETS'] = ntargets
        hdr['NGOT'] = ngot
        hdr['FGOT'] = fgot
        fitsio.write(completeness_file, ntargets_map, header=hdr,
                     clobber=False)
        fitsio.write(completeness_file, ngot_map, header=hdr, clobber=False)
        fitsio.write(completeness_file, fgot_map, header=hdr, clobber=False)

    for indx in np.arange(len(unique_programs)):
        unique_program = unique_programs[indx]
        print(unique_program)

        iprogram = np.where(programs == unique_program)[0]
        ntargets_map, ngot_map, fgot_map = make_map(hpix=hpix[iprogram],
                                                    got=got[iprogram])

        ntargets = len(np.where(outtargets['covered'][iprogram])[0])
        ngot = np.int32(got[iprogram].sum())
        fgot = np.float32(ngot) / np.float32(ntargets)

        hdr = dict()
        hdr['PROGRAM'] = unique_program
        hdr['NTARGETS'] = ntargets
        hdr['NGOT'] = ngot
        hdr['FGOT'] = fgot
        fitsio.write(completeness_file, ntargets_map, header=hdr,
                     clobber=False)
        fitsio.write(completeness_file, ngot_map, header=hdr, clobber=False)
        fitsio.write(completeness_file, fgot_map, header=hdr, clobber=False)
