#!/usr/bin/env python
# encoding: utf-8
#
# @Author: Michael R. Blanton
# @Date: Aug 3, 2018
# @Filename: rs_targets_extract
# @License: BSD 3-Clause
# @Copyright: Michael R. Blanton


from __future__ import division
from __future__ import print_function
from __future__ import absolute_import
from __future__ import unicode_literals

import configparser
import argparse
import os
import sys
import numpy as np
import fitsio
import roboscheduler.cadence as cadence
import robostrategy.params as params
import sdssdb.peewee.sdss5db.targetdb as targetdb
import sdss_access.path

sdss_path = sdss_access.path.Path()


def get_targets(cfg=None):
    target0 = [('targetid', np.int32),
               ('pk', np.int64),
               ('ra', np.float64),
               ('dec', np.float64),
               ('value', np.int32),
               ('program', np.dtype('a30')),
               ('cadence', cadence.fits_type),
               ('category', np.dtype('a30'))]

    targets = np.zeros(0, dtype=target0)

    for program in cfg['Programs']:
        print(program)

        nt = (targetdb.Target.select(targetdb.Target.pk)
              .join(targetdb.Program)
              .where(targetdb.Program.label == program)).count()

        if(nt > 0):
            tmp_targets = np.zeros(nt, dtype=target0)

            ts = (targetdb.Target.select(targetdb.Target.ra,
                                         targetdb.Target.dec,
                                         targetdb.Target.pk,
                                         targetdb.Target.value,
                                         targetdb.Program.label.alias('program'),
                                         targetdb.TargetCadence.name.alias('cadence'))
                  .join(targetdb.Program).switch(targetdb.Target)
                  .join(targetdb.TargetCadence)
                  .where(targetdb.Program.label == program)).dicts()
            
            for indx, t in zip(np.arange(nt), ts):
                tmp_targets['ra'][indx] = t['ra']
                tmp_targets['dec'][indx] = t['dec']
                tmp_targets['pk'][indx] = t['pk']
                tmp_targets['program'][indx] = t['program']
                tmp_targets['cadence'][indx] = t['cadence']
                tmp_targets['value'][indx] = t['value']
                tmp_targets['category'][indx] = 'SCIENCE'

            targets = np.append(targets, tmp_targets)

    # Now add skies and standards
    nrandom = 4000000
    for skystandard in ['STANDARD', 'SKY']:
        for instrument in ['APOGEE', 'BOSS']:
            category = "{ss}_{inst}".format(ss=skystandard, inst=instrument)
            print(category)
            costhrandom = np.random.random(size=nrandom) * 2. - 1.
            thrandom = np.arccos(costhrandom) * 180. / np.pi
            decrandom = 90. - thrandom
            rarandom = np.random.random(size=nrandom) * 360.
            new_targets = np.zeros(nrandom, dtype=target0)
            new_targets['ra'] = rarandom
            new_targets['dec'] = decrandom
            new_targets['pk'] = -1
            new_targets['program'] = 'CALIBRATION'
            new_targets['cadence'] = 'none'
            new_targets['category'] = category
            targets = np.append(targets, new_targets)

    targets['targetid'] = np.arange(len(targets), dtype=np.int32)

    return(targets)


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Export targets as a FITS file')

    parser.add_argument('-p', '--plan', dest='plan',
                        type=str, help='name of plan', required=True)
    parser.add_argument('-o', '--observatory', dest='observatory',
                        type=str, help='apo or lco',
                        choices=['apo', 'lco'], required=True)

    args = parser.parse_args()
    plan = args.plan
    observatory = args.observatory

    rsParams = params.RobostrategyParams(plan=plan)

    cfgfile = os.path.join(os.getenv('ROBOSTRATEGY_DIR'), 'etc',
                           'robostrategy-{plan}.cfg'.format(plan=plan))
    cfg = configparser.ConfigParser(allow_no_value=True)
    cfg.optionxform = str
    cfg.read(cfgfile)

    targets = get_targets(cfg=cfg)

    try:
        for c in rsParams.cfg['TargetValueRescale']:
            indx = np.where(targets['cadence'] == c)[0]
            if(len(indx) > 0):
                scale = np.float32(rsParams.cfg.get('ValueRescale', c))
                targets['value'][indx] = targets['value'][indx] * scale
    except KeyError:
        print("No TargetValueRescale")
    

    targets_file = sdss_path.full('rsTargets', plan=plan,
                                  observatory=observatory)
    fitsio.write(targets_file, targets, clobber=True)
