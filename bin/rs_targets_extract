#!/usr/bin/env python
# encoding: utf-8
#
# @Author: Michael R. Blanton
# @Date: Aug 3, 2018
# @Filename: rs_targets_extract
# @License: BSD 3-Clause
# @Copyright: Michael R. Blanton


from __future__ import division
from __future__ import print_function
from __future__ import absolute_import
from __future__ import unicode_literals

import configparser
import argparse
import os
import sys
import numpy as np
import fitsio
import robostrategy
import roboscheduler.cadence
import robostrategy.params as params
import robostrategy.targets
import sdss_access.path

sdss_path = sdss_access.path.Path(release='sdss5', preserve_envvars=True)


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Export targets as a FITS file')

    parser.add_argument('-p', '--plan', dest='plan',
                        type=str, help='name of plan', required=True)
    parser.add_argument('-o', '--observatory', dest='observatory',
                        type=str, help='apo or lco',
                        choices=['apo', 'lco'], required=True)

    args = parser.parse_args()
    plan = args.plan
    observatory = args.observatory

    cadencelist = roboscheduler.cadence.CadenceList()
    cadences_file = sdss_path.full('rsCadences', plan=plan,
                                   observatory=observatory)
    cadencelist.fromfits(filename=cadences_file, unpickle=True)

    c2cfile = os.path.join(os.getenv('ROBOSTRATEGY_DIR'), 'etc',
                           'cadence-list-{plan}.cfg'.format(plan=plan))
    if(os.path.exists(c2cfile)):
       c2c = configparser.ConfigParser(allow_no_value=True)
       c2c.optionxform = str
       c2c.read(c2cfile)
    else:
       c2c = None

    rsParams = params.RobostrategyParams(plan=plan)

    nt = 0
    for carton in rsParams.cfg['Cartons']:
        version = rsParams.cfg['Cartons'][carton]
        nt = nt + robostrategy.targets.get_targets(carton, version,
                                                   justcount=True, c2c=c2c)

    for carton in rsParams.cfg['CartonsExtra']:
        version = rsParams.cfg['CartonsExtra'][carton]
        if(carton in rsParams.cfg['Cartons']):
            print("Duplicate carton in CartonsExtra! Ignoring!")
            continue
        nt = nt + robostrategy.targets.get_targets(carton, version,
                                                   justcount=True, c2c=c2c)

    targets = np.zeros(nt, dtype=robostrategy.targets.target_dtype)

    nt = 0
    for carton in rsParams.cfg['Cartons']:
        version = rsParams.cfg['Cartons'][carton]
        tmp_targets = robostrategy.targets.get_targets(carton, version, c2c=c2c)
        if(tmp_targets is not None):
            tmp_targets['rsassign'] = 1
            targets[nt:nt + len(tmp_targets)] = tmp_targets
            nt = nt + len(tmp_targets)

    for carton in rsParams.cfg['CartonsExtra']:
        version = rsParams.cfg['CartonsExtra'][carton]
        if(carton in rsParams.cfg['Cartons']):
            print("Duplicate carton in CartonsExtra! Ignoring!")
            continue
        tmp_targets = robostrategy.targets.get_targets(carton, version, c2c=c2c)
        if(tmp_targets is not None):
            tmp_targets['rsassign'] = 0
            targets[nt:nt + len(tmp_targets)] = tmp_targets
            nt = nt + len(tmp_targets)

    if(nt != len(targets)):
        print("Lost some targets ... hope that is expected!")
        targets.resize(nt)

    # FUDGE dark_1x4 to dark_2x2
    i4 = np.where(targets['cadence'] == 'dark_1x4')[0]
    targets['cadence'][i4] = 'dark_2x2'

    # Fudge open_fiber into science
    iopen = np.where(targets['category'] == 'open_fiber')[0]
    if(len(iopen) > 0):
        print("Recategorizing {n} targets from open_fiber to science".format(n=len(iopen)))
        targets['category'][iopen] = 'science'

    targets_file = sdss_path.full('rsTargets', plan=plan,
                                  observatory=observatory)

    hd = dict()
    hd['STRATVER'] = robostrategy.__version__
    fitsio.write(targets_file, targets, header=hd, clobber=True)
