#!/usr/bin/env python
# encoding: utf-8
#
# @Author: Joleen K. Carlberg
# @Date: Sept 15, 2021
# @Filename: rs_reassign_spares
# @License: BSD 3-Clause
# @Copyright: Joleen K. Carlberg and Michael R. Blanton

from __future__ import division
from __future__ import print_function
from __future__ import absolute_import
from __future__ import unicode_literals

import os
os.environ['OPENBLAS_NUM_THREADS'] = '1'

import argparse
import sys
import multiprocessing
import datetime
import numpy as np
import roboscheduler.cadence as cadence
from robostrategy.extra_field import extra_Field
import robostrategy.field as field
import robostrategy.allocate
import sdss_access.path
import pdb
import fitsio
import time

sdss_path = sdss_access.path.Path(release='sdss5',preserve_envvars=True)

# Modeling after rs_assign_final.

def assign_spares(fieldid):
    '''
    Read in an rsFieldAssignments file, make the reassignments,
    and write out an rsFieldReassignments file
    '''

    print(time.ctime(time.time()))
    print(f'Working on field {fieldid}')

    field_assigned_file = sdss_path.full('rsFieldAssignments',
                                          plan=plan,
                                          observatory=observatory,
                                          fieldid=fieldid)
    field_reassigned_file = field_assigned_file.replace('Assignments','Reassignments')

    f = extra_Field(filename=field_assigned_file)
    if f.fieldid != fieldid:
        f.fieldid = fieldid
    else:
        print(f'{fieldid} properly set. Can probably erase ths code') # Check on this

    any_extra = f.assign_spares()
    f.tofits(filename=field_reassigned_file)
    if any_extra:
        print(f'Writing new field {fieldid} assignments')

if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Reassign extra epochs to some MWM targets if available')

    parser.add_argument('-p', '--plan', dest='plan',
                         type=str, help='name of plan',required=True)
    parser.add_argument('-o', '--observatory', dest='observatory',
                         type=str, help='apo or lco',
                         choices=['apo','lco'],required=True)
    parser.add_argument('-s', '--start', dest='start',
                         type=np.int32, help='field to start',
                         required=False,default=0)
    parser.add_argument('-e', '--end', dest='end',
                         type=np.int32, help='field to end',
                         required=False, default=-1)
    parser.add_argument('-c', '--coordinate', dest='coordinate',
                         default=False, action='store_true',
                         help='coordinate target overlap')
#    parser.add_argument('-k', '--no-clobber', dest='noclobber',
#                         default=False, help='do not clobber',
#                         action='store_true')

    args = parser.parse_args()
    plan = args.plan
    observatory = args.observatory
    start = args.start
    end = args.end
    coordinate = args.coordinate
#    noclobber = args.noclobber
    print(time.ctime(time.time()))

    cadencelist = cadence.CadenceList(skybrightness_only=True)
    cadence_file = sdss_path.full('rsCadences',plan=plan,
                                  observatory=observatory)
    cadencelist.fromfits(filename=cadence_file, unpickle=True)

    allocate_file = sdss_path.full('rsAllocation', plan=plan,
                                   observatory=observatory)
    allocate = robostrategy.allocate.AllocateLST(filename=allocate_file,observatory=observatory)
    if(end < 0):
        end = allocate.field_array['fieldid'].max()
    ikeep = np.where((allocate.field_array['fieldid'] >= start) &
                      (allocate.field_array['fieldid'] <= end))[0]
    field_ids = allocate.field_array['fieldid'][ikeep]

    if coordinate:
        print("Still need to code this up")

    else:
        np.random.shuffle(field_ids)
        if len(field_ids) > 1:
            with multiprocessing.Pool() as pool:
                pool.map(assign_spares,field_ids)
        else:
            print(field_ids)
            assign_spares(field_ids[0]) # Good for testing code before sending to multiprocessor
    print('DONE: rs_assign_spares')
    print(time.ctime(time.time()))
