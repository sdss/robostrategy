#!/usr/bin/env python
# encoding: utf-8
#
# @Author: Michael R. Blanton
# @Date: Aug 3, 2018
# @Filename: rs_html
# @License: BSD 3-Clause
# @Copyright: Michael R. Blanton


from __future__ import division
from __future__ import print_function
from __future__ import absolute_import
from __future__ import unicode_literals

import configparser
import argparse
import os
import sys
import jinja2
import numpy as np
import fitsio
import sdss_access.path
import robostrategy.allocate
import robostrategy.params as params

sdss_path = sdss_access.path.Path(release='sdss5', preserve_envvars=True)

img_tag = "<a href='{png_file}'><img src='{png_file}' width=300px/></a>"

if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Evaluate completeness of target assignments')

    parser.add_argument('-p', '--plan', dest='plan',
                        type=str, help='name of plan', required=True)
    parser.add_argument('-o', '--observatory', dest='observatory',
                        type=str, help='apo or lco or both',
                        choices=['apo', 'lco', 'both'], required=True)
    parser.add_argument('-O', '--open', dest='opentargets',
                        help='set to read open target results',
                        default=False, required=False,
                        action='store_true')
    parser.add_argument('-F', '--filler', dest='filler',
                        help='set to read filler target results',
                        default=False, required=False,
                        action='store_true')
    parser.add_argument('-R', '--reassign', dest='reassign',
                        help='set to read reassignment target results',
                        default=False, required=False,
                        action='store_true')

    args = parser.parse_args()
    plan = args.plan
    observatory = args.observatory
    if(observatory == 'both'):
        both = True
        observatories = ['apo', 'lco']
    else:
        both = False
        observatories = [observatory]
    opentargets = args.opentargets
    filler = args.filler
    reassign = args.reassign

    description_file = os.path.join(os.getenv('RSCONFIG_DIR'), 'etc',
                                    'carton_description.cfg')
    if(os.path.exists(description_file)):
        description_cfg = configparser.ConfigParser(allow_no_value=True)
        description_cfg.optionxform = str
        description_cfg.read(description_file)
        if(opentargets):
            carton_description = description_cfg['Open']
        if(filler):
            carton_description = description_cfg['Filler']
        else:
            carton_description = description_cfg['Mapper']
    else:
        carton_description = dict()

    rsParams = params.RobostrategyParams(plan=plan)

    cadence_hdr = dict()
    spares = dict()
    for obs in observatories:
        field_cadence_file = os.path.basename(sdss_path.full('rsFieldCadences',
                                                             plan=plan,
                                                             observatory=obs))
        cadence_mask, tmp_cadence_hdr = fitsio.read(field_cadence_file, header=True)
        cadence_hdr[obs] = tmp_cadence_hdr

        spares_file = field_cadence_file.replace('FieldCadences',
                                                 'Spares')
        if(opentargets):
            spares_file = spares_file.replace('rsSpares', 'rsSparesOpen')
        if(filler):
            spares_file = spares_file.replace('rsSpares', 'rsSparesFiller')
        if(reassign):
            spares_file = spares_file.replace('rsSpares', 'rsSparesReassign')
        spares[obs] = fitsio.read(spares_file)

    completeness_file = os.path.basename(sdss_path.full('rsCompleteness',
                                                        plan=plan,
                                                        observatory=observatory))
    if(opentargets):
        completeness_file = completeness_file.replace('rsCompleteness',
                                                      'rsCompletenessOpen')
    if(filler):
        completeness_file = completeness_file.replace('rsCompleteness',
                                                      'rsCompletenessFiller')
    if(reassign):
        completeness_file = completeness_file.replace('rsCompleteness',
                                                      'rsCompletenessReassign')
    completeness_hdr = fitsio.read_header(completeness_file, ext=1)

    html_path = os.path.dirname(sdss_path.full('rsCompletenessHtml', plan=plan,
                                               observatory=observatory))
    html_file = os.path.join(html_path,
                             'rs-{observatory}.html'.format(observatory=observatory))
    if(opentargets):
        html_file = os.path.join(html_path,
                                 'rs-open-{observatory}.html'.format(observatory=observatory))

    if(filler):
        html_file = os.path.join(html_path,
                                 'rs-filler-{observatory}.html'.format(observatory=observatory))

    env = jinja2.Environment(
        loader=jinja2.PackageLoader("robostrategy"),
        autoescape=jinja2.select_autoescape()
    )

    rsinfo = dict()

    rsinfo['stage'] = ''
    if(opentargets):
        rsinfo['stage'] = 'Open'
    if(filler):
        rsinfo['stage'] = 'Filler'
    if(reassign):
        rsinfo['stage'] = 'Reassign'

    rsinfo['plan'] = plan
    rsinfo['observatory'] = observatory
    rsinfo['observatories'] = observatories
    rsinfo['summary'] = rsParams.cfg.get('Documentation', 'summary',
                                         fallback='No summary provided')

    rsinfo['method'] = "They are shown after science requirement target allocation."
    if(opentargets):
        rsinfo['method'] = "They are shown after open fiber target allocation."
    if(filler):
        rsinfo['method'] = "They are shown after filler target allocation."
    if(reassign):
        rsinfo['method'] = "They are shown after reassignment and open fiber target allocation."

    rsinfo['ngboss'] = completeness_hdr['NGBOSS']
    rsinfo['ngapogee'] = completeness_hdr['NGAPOGEE']
    
    rsinfo['Cartons'] = []
    for carton in rsParams.cfg['Cartons']:
        rsinfo['Cartons'].append({'carton':carton,
                                  'version':rsParams.cfg['Cartons'][carton]})
    
    rsinfo['Fields'] = []
    for field in rsParams.cfg['Fields']:
        rsinfo['Fields'].append({'key':field,
                                 'value':rsParams.cfg['Fields'][field]})
    
    rsinfo['CadencesFromTargets'] = []
    for cft in rsParams.cfg['CadencesFromTargets']:
        rsinfo['CadencesFromTargets'].append({'target_cadence':cft,
                                              'field_cadence':rsParams.cfg['CadencesFromTargets'][cft]})

    rsinfo['field_cadences'] = dict()
    for obs in observatories:
        rsinfo['field_cadences'][obs] = []
        ncad = np.int32(cadence_hdr[obs]['NCAD'])
        for icad in np.arange(ncad):
            field_cadence = cadence_hdr[obs]['CAD{icad}'.format(icad=icad)]
            last = field_cadence.split('_')[-1]
            if(last[0] == 'n'):
                field_cadence_base = "_".join(field_cadence.split('_')[0:-1])
            else:
                field_cadence_base = field_cadence
            entry = dict()
            entry['field_cadence_name'] = field_cadence
            entry['allocation_name'] = field_cadence_base
            rsinfo['field_cadences'][obs].append(entry)

    rsinfo['cadenceGroups'] = []
    ncad = np.int32(completeness_hdr['NCADENCE'])
    for icad in np.arange(ncad + 1):
        cg = dict()

        hdr = fitsio.read_header(completeness_file, ext=icad * 3 + 2)
        if('CADENCE' in hdr):
            cg['name'] = hdr['CADENCE'].strip()
        else:
            cg['name'] = 'all'

        cg['ntargets'] = hdr['NTARGETS']
        cg['ngot'] = hdr['NGOT']
        cg['fgot'] = "{fgot:4.3f}".format(fgot=hdr['FGOT'])
        
        rsinfo['cadenceGroups'].append(cg)

    rsinfo['cartons'] = []
    ncarton = np.int32(completeness_hdr['NCARTON'])
    for icarton in np.arange(ncarton):
        hdr = fitsio.read_header(completeness_file,
                                 ext=(ncad + 1 + icarton) * 3 + 2)
        cg = dict()
        cg['name'] = hdr['CARTON'].strip()

        cg['ntargets'] = hdr['NTARGETS']
        cg['ngot'] = hdr['NGOT']
        cg['nallowed'] = hdr['NALLOWED']
        cg['fgot'] = "{fgot:4.3f}".format(fgot=hdr['FGOT'])
        
        if(cg['name'] in carton_description):
            cg['description'] = carton_description[cg['name']]
        else:
            cg['description'] = ''

        rsinfo['cartons'].append(cg)

    rsinfo['spares'] = dict()

    for observatory in observatories:
        rsinfo['spares'][obs] = dict()
        rsinfo['spares'][obs]['boss'] = spares[obs]['nboss_spare'].sum()
        rsinfo['spares'][obs]['apogee'] = spares[obs]['napogee_spare'].sum()

    template = env.get_template('rs-template.html')
    page = template.render(rsinfo)

    fp = open(html_file, 'w')
    fp.write(page)
    fp.close()
