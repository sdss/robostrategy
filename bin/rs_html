#!/usr/bin/env python
# encoding: utf-8
#
# @Author: Michael R. Blanton
# @Date: Aug 3, 2018
# @Filename: rs_html
# @License: BSD 3-Clause
# @Copyright: Michael R. Blanton


from __future__ import division
from __future__ import print_function
from __future__ import absolute_import
from __future__ import unicode_literals

import configparser
import argparse
import os
import sys
import numpy as np
import fitsio
import sdss_access.path
import robostrategy.allocate

sdss_path = sdss_access.path.Path()
img_tag = "<a href='{png_file}'><img src='{png_file}' width=300px/></a>"

if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Evaluate completeness of target assignments')

    parser.add_argument('-p', '--plan', dest='plan',
                        type=str, help='name of plan', required=True)
    parser.add_argument('-o', '--observatory', dest='observatory',
                        type=str, help='apo or lco',
                        choices=['apo', 'lco'], required=True)

    args = parser.parse_args()
    plan = args.plan
    observatory = args.observatory

    cfgfile = os.path.join(os.getenv('ROBOSTRATEGY_DIR'), 'etc',
                           'robostrategy-{plan}.cfg'.format(plan=plan))
    cfg = configparser.ConfigParser(allow_no_value=True)
    cfg.optionxform = str
    cfg.read(cfgfile)

    field_cadence_file = os.path.basename(sdss_path.full('rsFieldCadences',
                                                         plan=plan, observatory=observatory))
    cadence_mask, cadence_hdr = fitsio.read(field_cadence_file, header=True)

    completeness_file = os.path.basename(sdss_path.full('rsCompleteness',
                                                        plan=plan, observatory=observatory))
    nt, completeness_hdr = fitsio.read(completeness_file, header=True)

    html_path = os.path.dirname(sdss_path.full('rsCompletenessHtml', plan=plan,
                                               observatory=observatory))
    html_file = os.path.join(html_path,
                             'rs-{observatory}.html'.format(observatory=observatory))

    fp = open(html_file, "w")
    fp.write("<html>")
    fp.write("""<head>
<style>
    table, th, tr, td {border: 1px solid black}
</style>
""")
    fp.write("<body>")

    summary = cfg.get('Documentation', 'summary',
                      fallback='No summary provided')
    description = cfg.get('Documentation', 'description',
                          fallback='No description provided')
    fp.write("""<h2>Description</h2>
<p>This page describes the results of robostrategy for plan {plan},
for the SDSS-V FPS program observing for the Milky Way Mapper and
the Black Hole Mapper. These results are for the operations at {obs}.</p>

<p><b>Summary:</b>{summary}</p>

<p><b>Description:</b>{description}</p>
""".format(plan=plan, summary=summary, description=description,
           obs=observatory.upper()))

    fp.write("""<p><b>Settings:</b></p>
<ul>""")
    if('AllFields' in cfg['Allocation']):
        fp.write("<li><i>AllFields</i>: All fields are guaranteed to get some observations.</li>")
    fp.write("""</ul>""")

    fp.write("""<table style="border: 1px solid black;" cellspacing=0px>""")

    fp.write("""<table style="border: 1px solid black;" cellspacing=0px>
    <thead>
        <tr>
            <th>Programs included.</th>
        </tr>
    </thead>""")
    fp.write("""<tbody>""")
    for program in cfg['Programs']:
        fp.write("<tr><td>{p}</td></tr>".format(p=program))
    fp.write("""</tbody>""")
    fp.write("""</table>""")

    fp.write("""<table style="border: 1px solid black;" cellspacing=0px>
    <thead>
        <tr>
            <th colspan="2">Field types included.</th>
        </tr>
        <tr>
            <td><b>Fields</b></td> <td><b>Cadences</b></td>
        </tr>
    </thead>""")
    fp.write("""<tbody>""")
    exclude = ['NSDiv']
    for field_type in cfg['Fields']:
        if(field_type not in exclude):
            fp.write("<tr><td>{ft}</td><td>{c}</td></tr>".format(ft=field_type,
                                                                 c=cfg.get('Fields', field_type)))
    fp.write("""</tbody>""")
    fp.write("""</table>""")

    fp.write("""<table style="border: 1px solid black;" cellspacing=0px>
    <thead>
        <tr>
            <th colspan="2">How field cadences are selected from targets.</th>
        </tr>
        <tr>
            <td><b>Target Cadence</b></td> <td><b>Field Cadences to Include</b></td>
        </tr>
    </thead>""")
    fp.write("""<tbody>""")
    exclude = []
    for target_cadence in cfg['CadencesFromTargets']:
        if(target_cadence not in exclude):
            clist = cfg.get('CadencesFromTargets', target_cadence)
            if(clist is None):
                clist = target_cadence
            fp.write("<tr><td>{tc}</td><td>{c}</td></tr>".format(tc=target_cadence,
                                                                 c=clist))
    fp.write("""</tbody>""")
    fp.write("""</table>""")

    fp.write("""<p>The full configuration file can be found on
<a href="https://github.com/sdss/robostrategy/blob/master/etc/robostrategy-{plan}.cfg">github</a>.
</p>
""".format(plan=plan))

    fp.write("""<h2>Output files</h2>

<p>The main results of the allocation process can be found in the following 
files. The last two, the rsAllocation and rsCompleteness files, are
the most useful ones to consult, so I put list their columns
explicitly.</p>

<ul> <li> <a href="rsTargets-{plan}-{observatory}.fits">rsTargets</a>:
list of target inputs </li>

<li> <a href="rsCadences-{plan}-{observatory}.fits">rsCadences</a>:
list of cadence definitions. This can be read into a CadenceList
object (found in the robostrategy.cadence Python module)
using the fromfits() method. </li>

<li> <a
href="rsAssignments-{plan}-{observatory}.fits">rsAssignments</a>: A
list of assignments of fields to targets. The exposure number in the
field cadence sequence is given (but the actual robot used is
not). </li>

<li> rsFieldAssignments: <a href="rs-{observatory}-fields.html">Compiled
here</a> is the list individual field assignments (in the <a href="targets">targets</a> directory), 
in individual rsField Assignments files.
Each of these files has the following HDUs:
 <ul>
 <li>HDU1: Table with list of targets. It has header keywords:
  <ul>
   <li><code>RACEN</code>: RA of field center, J2000 deg</li>
   <li><code>DECCEN</code>: Dec of field center, J2000 deg</li>
   <li><code>FCADENCE</code>: Name of field cadence</li>
  </ul>
  And columns:
  <ul>
   <li><code>ra</code>: RA of target, J2000 deg</li>
   <li><code>dec</code>: Dec of target, J2000 deg</li>
   <li><code>pk</code>: primary key in DB (munged for RM targets)</li>
   <li><code>cadence</code>: name of cadence for target</li>
   <li><code>type</code>: name of type of target (something like cadence, can ignore)</li>
  </ul>
 <li>HDU2: Image with assignments. It has a shape (546, nexposures),
        and the value is the 0-indexed integer into the table in HDU1 for
        target to be assigned to that positioner and exposure (or -1) if
        none. </li>
 </ul>
</li>

<li> <a
href="rsAllocation-{plan}-{observatory}.fits">rsAllocation</a>:
cadences chosen for each field, and the LST and LUNATION slots used.
The <code>slots</code> column has a 24-by-2 array with the allocation
of exposures by LST hour and lunation. If any of these values are
non-zero, then the field cadence listed has been fully observed.
<code>nfilled</code> will also be non-zero in this case. Note that
<code>slots_exposures</code> and <code>slots_time</code> differ
by a factor of the duration of each exposure times some cost associated
with the airmass of observation.
The columns of this file are:
<ul>
<li><code>fieldid</code>: unique ID number for field</li>
<li><code>racen</code>: RA center of field (J2000 deg)</li>
<li><code>deccen</code>: Dec center of field (J2000 deg)</li>
<li><code>cadence</code>: Name of chosen cadence</li>
<li><code>nfilled</code>: Number of observing exposures filled</li>
<li><code>nneeded</code>: Number of observing exposures needed</li>
<li><code>slots_exposures[2,24]</code>: How to distribute exposures across lunation and LST.</li>
<li><code>slots_time[2,24]</code>: How to distribute time across lunation and LST (hours).</li>
</ul>
</li>

<li> <a
href="rsCompleteness-{plan}-{observatory}.fits">rsCompleteness</a>:
Completeness information for all targets, and completeness maps for
all targets and for target cadence classes in healpix format. The HDUs
of the file are as follows:
<ul>
 <li>HDU1: Table with list of targets. It has header keywords:
 <ul>
  <li><code>NTARGETS</code>: number of targets covered (with "covered" set)</li>
  <li><code>NGOT</code>: number of targets gotten (with "got" set)</li>
  <li><code>FGOT</code>: fraction of targets gotten (with "got" set)</li>
  <li><code>NCADENCE</code>: number of cadences in further HDUs</li>
 </ul>
 And columns:
 <ul>
  <li><code>targetid</code>: unique target ID (not 100% sure this is right)</li>
  <li><code>pk</code>: primary key in DB (munged for RM targets)</li>
  <li><code>ra</code>: RA of target, J2000 deg</li>
  <li><code>dec</code>: Dec of target, J2000 deg</li>
  <li><code>program</code>: name of program for target</li>
  <li><code>cadence</code>: name of cadence for target</li>
  <li><code>type</code>: name of type of target (something like cadence, can ignore)</li>
  <li><code>got</code>: we got the target or not (1 or 0)</li>
  <li><code>covered</code>: in the area we consider "covered" by this telescope</li>
 </ul>
 <li>HDU2: Healpix map of targets. This is an integer image. There are important
   parameters in the header:
   <ul>
    <li><code>NSIDE</code>: "nside" value for healpix map, e.g. 32</li>
    <li><code>NTARGETS</code>: number of targets covered (with "covered" set)</li>
    <li><code>NGOT</code>: number of targets gotten (with "got" set)</li>
    <li><code>FGOT</code>: fraction of targets gotten (with "got" set)</li>
    <li><code>NCADENCE</code>: number of cadences in further HDUs</li>
   </ul></li>
 <li>HDU3: Healpix map of targets gotten. This is an integer image. It has a similar header as HDU2.</li>
 <li>HDU4: Healpix map of the fraction of targets gotten. This is a floating point image. It has a similar header as HDU2.</li>
 <li>Further HDUs come in triplets, one for each cadence. Each HDU has a header keyword <code>CADENCE</code> that tells you which cadence.</li>
</ul>
</li>

</ul>
""".format(plan=plan, observatory=observatory))

    fp.write("""<h2>Allocation of time</h2>

    <p> For both all time and for different lunations, the allocation of time as a function of LST.</p>
""")

    fp.write("<table>")
    fp.write("<tr>")
    png_file = os.path.basename(sdss_path.full('rsAllocationPng', plan=plan,
                                               observatory=observatory, name='lst-all'))
    fp.write("<td>")
    fp.write(img_tag.format(png_file=png_file))
    fp.write("</td>")

    png_file = os.path.basename(sdss_path.full('rsAllocationPng', plan=plan,
                                               observatory=observatory, name='lst-dark'))
    fp.write("<td>")
    fp.write(img_tag.format(png_file=png_file))
    fp.write("</td>")

    png_file = os.path.basename(sdss_path.full('rsAllocationPng', plan=plan,
                                               observatory=observatory, name='lst-bright'))
    fp.write("<td>")
    fp.write(img_tag.format(png_file=png_file))
    fp.write("</td>")

    fp.write("</tr>")
    fp.write("</table>")

    fp.write("""<h2>Cadences per field</h2>


    <p>The left column shows which fields had an opportunity to be allowed each cadence. The right column shows how exposures were allocated to those fields, within each cadence.</p>
""")

    fp.write("<table>")
    ncad = np.int32(cadence_hdr['NCAD'])
    for icad in np.arange(ncad):
        fp.write("<tr>")
        field_cadence = cadence_hdr['CAD{icad}'.format(icad=icad)]
        base_field_cadence = field_cadence.split('-')[0]
        print(base_field_cadence)

        png_file = os.path.basename(sdss_path.full('rsFieldCadencesPng',
                                                   name=field_cadence, plan=plan,
                                                   observatory=observatory))
        fp.write("<td>")
        fp.write(img_tag.format(png_file=png_file))
        fp.write("</td>")

        name = 'radec-{base_field_cadence}'.format(
            base_field_cadence=base_field_cadence)
        png_file = os.path.basename(
            sdss_path.full('rsAllocationPng', plan=plan,
                           observatory=observatory, name=name))
        fp.write("<td>")
        fp.write(img_tag.format(png_file=png_file))
        fp.write("</td>")

        fp.write("</tr>")
    fp.write("</table>")

    fp.write("""<h2>Target completeness</h2>

    <p>These plots show the completeness as a function of target class. In this case we define the target class according to cadence groups (for example, defining cadences like mwm_rv_NxM to be all within the same group). Targets either get all the necessary exposures for their cadence, or they get none.</p>

    <p>The left column shows the total number of targets in each healpix pixel (scaled with asinh to be able to see the dynamic range. The middle column shows the number of targets completed (scaled with asinh again). The right column shows the fraction. If the fraction is shown as negative (the darkest color) then that means there were zero targets in the pixel to begin with.</p>
""")

    fp.write("<table>")
    ncad = np.int32(completeness_hdr['NCADENCE'])
    for icad in np.arange(ncad + 1):
        fp.write("<tr>")

        ntargets_map, hdr = fitsio.read(completeness_file, header=True,
                                        ext=icad * 3 + 2)
        if('CADENCE' in hdr):
            cadence = hdr['CADENCE'].strip()
        else:
            cadence = 'all'

        ntarget = hdr['NTARGETS']
        ngot = hdr['NGOT']
        fgot = hdr['FGOT']

        png_file = os.path.basename(sdss_path.full(
            'rsAssignmentsPng', name='ntargets-{c}'.format(c=cadence),
            plan=plan, observatory=observatory))
        fp.write("<td>")
        fp.write(img_tag.format(png_file=png_file))
        fp.write("</td>")

        png_file = os.path.basename(sdss_path.full(
            'rsAssignmentsPng', name='ngot-{c}'.format(c=cadence),
            plan=plan, observatory=observatory))
        fp.write("<td>")
        fp.write(img_tag.format(png_file=png_file))
        fp.write("</td>")

        png_file = os.path.basename(sdss_path.full(
            'rsAssignmentsPng', name='fgot-{c}'.format(c=cadence), plan=plan,
            observatory=observatory))
        fp.write("<td>")
        fp.write(img_tag.format(png_file=png_file))
        fp.write("</td>")

        fp.write("<td>")
        fp.write("<table>")
        fp.write("<tr><td>Cadence group {c}</tr>".format(c=cadence))
        fp.write("<tr><td>n<sub>target</sub> = {n}</td></tr>".format(n=ntarget))
        fp.write("<tr><td>n<sub>got</sub> = {n}</td></tr>".format(n=ngot))
        fp.write("<tr><td>f<sub>got</sub> = {n:4.3f}</td></tr>".format(n=fgot))
        fp.write("</table>")
        fp.write("</td>")

        fp.write("</tr>")
    fp.write("</table>")

    fp.write("</body>")
    fp.write("</html>")

    fp.close()

    html_file = os.path.join(html_path,
                             'rs-{observatory}-fields.html'.format(observatory=observatory))

    fp = open(html_file, "w")
    fp.write("<html>")
    fp.write("""<head>
<style>
table, th, td {
  border: 1px solid black;
  border-collapse: collapse;
}
</style>
</head>
""")
    fp.write("<body>")
    fp.write("<table>")

    allocate_file = sdss_path.full('rsAllocation', plan=plan,
                                   observatory=observatory)
    allocate = robostrategy.allocate.AllocateLST(filename=allocate_file,
                                                 observatory=observatory)

    row_template = """<tr>
<td>{fieldid}</td>
<td>{cadence}</td>
<td><a href="targets/rsFieldAssignments-{plan}-{obs}-{fieldid}.fits">FITS output</a></td>
<td><a href="targets/rsFieldAssignments-{plan}-{obs}-{fieldid}.png">
<img src="targets/rsFieldAssignments-{plan}-{obs}-{fieldid}.thumb.png" width=100px height=100px/>
</a></td>
</tr>
"""

    for indx in np.arange(len(allocate.field_array)):
        field = allocate.field_array[indx]
        row = row_template.format(fieldid=field['fieldid'],
                                  cadence=field['cadence'].decode().strip(),
                                  plan=plan, obs=observatory)
        fp.write(row)

    fp.write("</table>")

    fp.write("</body>")
    fp.write("</html>")

    fp.close()
