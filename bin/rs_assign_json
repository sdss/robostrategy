#!/usr/bin/env python
# encoding: utf-8
#
# @Author: Michael R. Blanton
# @Date: Nov 29, 2019
# @Filename: rs_assign_json
# @License: BSD 3-Clause
# @Copyright: Michael R. Blanton


from __future__ import division
from __future__ import print_function
from __future__ import absolute_import
from __future__ import unicode_literals

import argparse
import os
import sys
import multiprocessing
import numpy as np
import roboscheduler.cadence as cadence
import robostrategy.field as field
import robostrategy.allocate
import sdss_access.path

user_robo_data_dir = os.getenv('ROBOSTRATEGY_DATA')
sdss_path = sdss_access.path.Path(release='sdss5')
os.environ['ROBOSTRATEGY_DATA'] = user_robo_data_dir # Above call overwrites user specified directory


def field_to_json(indx=None):
    fieldid = allocate.field_array['fieldid'][indx]
    if((fieldid % 1) == 0):
        print(fieldid, flush=True)

    field_file = sdss_path.full('rsFieldAssignments',
                                plan=plan, observatory=observatory,
                                fieldid=fieldid)
    f = field.Field(racen=allocate.fields['racen'][indx],
                    deccen=allocate.fields['deccen'][indx],
                    observatory=observatory)
    f.fromfits(field_file)

    json_file = ".".join(field_file.split('.')[0:-1]) + '.json'
    f.tojs(json_file)


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Output JSON for each field')

    parser.add_argument('-p', '--plan', dest='plan',
                        type=str, help='name of plan', required=True)
    parser.add_argument('-o', '--observatory', dest='observatory',
                        type=str, help='apo or lco',
                        choices=['apo', 'lco'], required=True)
    parser.add_argument('-s', '--start', dest='start',
                        type=np.int32, help='field to start', required=False,
                        default=0)
    parser.add_argument('-e', '--end', dest='end',
                        type=np.int32, help='field to end', required=False,
                        default=-1)

    args = parser.parse_args()
    plan = args.plan
    observatory = args.observatory
    start = args.start
    end = args.end

    cadencelist = cadence.CadenceList()
    cadences_file = sdss_path.full('rsCadences', plan=plan,
                                   observatory=observatory)
    cadencelist.fromfits(filename=cadences_file, unpickle=True)

    allocate_file = sdss_path.full('rsAllocation', plan=plan,
                                   observatory=observatory)
    allocate = robostrategy.allocate.AllocateLST(filename=allocate_file,
                                                 observatory=observatory)

    if(end < 0):
        end = allocate.field_array['fieldid'].max()
    ikeep = np.where((allocate.field_array['fieldid'] >= start) &
                     (allocate.field_array['fieldid'] <= end))[0]
    with multiprocessing.Pool() as pool:
        pool.map(field_to_json, ikeep)
