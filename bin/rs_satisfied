#!/usr/bin/env python
# encoding: utf-8
#
# @Author: Michael R. Blanton
# @Date: Sept 26, 2018
# @Filename: rs_assignments
# @License: BSD 3-Clause
# @Copyright: Michael R. Blanton

import argparse
import os
import sys
import numpy as np
import fitsio
import roboscheduler.cadence as cadence
import robostrategy.field as field
import robostrategy.allocate
import robostrategy.params as params
import sdss_access.path

user_robo_data_dir = os.getenv('ROBOSTRATEGY_DATA')
sdss_path = sdss_access.path.Path(release='sdss5')
os.environ['ROBOSTRATEGY_DATA'] = user_robo_data_dir # Above call overwrites user specified directory


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Put assignment results for each target into a file')

    parser.add_argument('-p', '--plan', dest='plan',
                        type=str, help='name of plan', required=True)
    parser.add_argument('-o', '--observatory', dest='observatory',
                        type=str, help='apo or lco',
                        choices=['apo', 'lco'], required=True)

    args = parser.parse_args()
    plan = args.plan
    observatory = args.observatory

    rsParams = params.RobostrategyParams(plan=plan)
    if('Rotate' in rsParams.cfg['Fields']):
        rotate = True
        paname = rsParams.cfg['Fields']['Rotate']
    else:
        rotate = False
        paname = ''

    cadencelist = cadence.CadenceList()
    cadences_file = sdss_path.full('rsCadences', plan=plan,
                                   observatory=observatory)
    cadencelist.fromfits(filename=cadences_file, unpickle=True)

    allocate_file = sdss_path.full('rsAllocation', plan=plan,
                                   observatory=observatory)
    allocate = robostrategy.allocate.AllocateLST(filename=allocate_file,
                                                 observatory=observatory)

    targets_file = sdss_path.full('rsTargets', plan=plan,
                                   observatory=observatory)
    full_targets = fitsio.read(targets_file)

    rsid2indx = dict()
    for indx, full_target in enumerate(full_targets):
        rsid2indx[full_target['rsid']] = indx

    satisfied_dtype = np.dtype([('carton_to_target_pk', np.int64),
                                ('rsid', np.int64),
                                ('catalogid', np.int64),
                                ('ra', np.float64),
                                ('dec', np.float64),
                                ('cadence', np.unicode_, 30),
                                ('satisfied', np.int32),
                                ('assigned', np.int32)])
    satisfied = np.zeros(len(full_targets), dtype=satisfied_dtype)

    xferlist = ['carton_to_target_pk', 'rsid', 'catalogid', 'ra', 'dec', 'cadence']
    for xfer in xferlist:
        satisfied[xfer] = full_targets[xfer]

    count = 0
    for indx in np.arange(len(allocate.field_array)):
        fieldid = allocate.field_array['fieldid'][indx]
        if((fieldid % 10) == 0):
            print(fieldid)

        field_assigned_file = sdss_path.full('rsFieldAssignments',
                                             plan=plan,
                                             observatory=observatory,
                                             fieldid=fieldid)
        try:
            header = fitsio.read_header(field_assigned_file, ext=0)
            targets = fitsio.read(field_assigned_file, ext=1)
            assignments = fitsio.read(field_assigned_file, ext=2)
        except:
            header = None
            targets = None
            assignments = None

        if(assignments is not None):
            isat = np.array([rsid2indx[rsid] for rsid in targets['rsid']],
                            dtype=np.int32)
            satisfied['satisfied'][isat] = (satisfied['satisfied'][isat] +
                                            assignments['satisfied'])
            satisfied['assigned'][isat] = (satisfied['assigned'][isat] +
                                           assignments['assigned'])

    assigned_file = sdss_path.full('rsAssignments', plan=plan,
                                   observatory=observatory)
    satisfied_file = assigned_file.replace('rsAssignments', 'rsSatisfied')
    fitsio.write(satisfied_file, satisfied, clobber=True)
