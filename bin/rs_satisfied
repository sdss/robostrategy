#!/usr/bin/env python
# encoding: utf-8
#
# @Author: Michael R. Blanton
# @Date: Sept 26, 2018
# @Filename: rs_assignments
# @License: BSD 3-Clause
# @Copyright: Michael R. Blanton

import argparse
import os
import sys
import numpy as np
import fitsio
import kaiju
import roboscheduler
import roboscheduler.cadence as cadence
import robostrategy
import robostrategy.header
import robostrategy.field as field
import robostrategy.allocate
import robostrategy.params as params
import sdss_access.path

sdss_path = sdss_access.path.Path(release='sdss5',
                                  preserve_envvars=True)


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Put assignment results for each target into a file')

    parser.add_argument('-p', '--plan', dest='plan',
                        type=str, help='name of plan', required=True)
    parser.add_argument('-o', '--observatory', dest='observatory',
                        type=str, help='apo or lco',
                        choices=['apo', 'lco'], required=True)
    parser.add_argument('-O', '--open', dest='opentargets',
                        help='set to read open target results',
                        default=False, required=False,
                        action='store_true')
    parser.add_argument('-R', '--reassign', dest='reassign',
                        help='set to read reassignment target results',
                        default=False, required=False,
                        action='store_true')

    args = parser.parse_args()
    plan = args.plan
    observatory = args.observatory
    opentargets = args.opentargets
    reassign = args.reassign

    rsParams = params.RobostrategyParams(plan=plan)
    if('Rotate' in rsParams.cfg['Fields']):
        rotate = True
        paname = rsParams.cfg['Fields']['Rotate']
    else:
        rotate = False
        paname = ''

    cadencelist = cadence.CadenceList()
    cadences_file = sdss_path.full('rsCadences', plan=plan,
                                   observatory=observatory)
    cadencelist.fromfits(filename=cadences_file, unpickle=True)

    allocate_file = sdss_path.full('rsAllocation', plan=plan,
                                   observatory=observatory)
    allocate = robostrategy.allocate.AllocateLST(filename=allocate_file,
                                                 observatory=observatory)

    targets_file = sdss_path.full('rsTargets', plan=plan,
                                   observatory=observatory)
    if(opentargets):
        targets_file = targets_file.replace('rsTargets', 'rsTargetsOpen')
    full_targets = fitsio.read(targets_file)

    rsid2indx = dict()
    for indx, full_target in enumerate(full_targets):
        rsid2indx[full_target['rsid']] = indx

    satisfied_dtype = np.dtype([('carton_to_target_pk', np.int64),
                                ('rsid', np.int64),
                                ('catalogid', np.int64),
                                ('ra', np.float64),
                                ('dec', np.float64),
                                ('cadence', np.unicode_, 30),
                                ('allowed', np.int32),
                                ('incadence', np.int32),
                                ('satisfied', np.int32),
                                ('assigned', np.int32),
                                ('nexps', np.int32),
                                ('nepochs', np.int32)])
    satisfied = np.zeros(len(full_targets), dtype=satisfied_dtype)

    xferlist = ['carton_to_target_pk', 'rsid', 'catalogid', 'ra', 'dec', 'cadence']
    for xfer in xferlist:
        satisfied[xfer] = full_targets[xfer]

    count = 0
    for indx in np.arange(len(allocate.field_array)):
        fieldid = allocate.field_array['fieldid'][indx]
        if((fieldid % 10) == 0):
            print(fieldid)

        field_assigned_file = sdss_path.full('rsFieldAssignments',
                                             plan=plan,
                                             observatory=observatory,
                                             fieldid=fieldid)
        if(opentargets):
            field_assigned_file = field_assigned_file.replace('rsFieldAssignments',
                                                              'rsFieldAssignmentsOpen')
        if(reassign):
            field_assigned_file = field_assigned_file.replace('rsFieldAssignments',
                                                              'rsFieldAssignmentsOpen')
        try:
            header = fitsio.read_header(field_assigned_file, ext=0)
            targets = fitsio.read(field_assigned_file, ext='TARGET')
            assignments = fitsio.read(field_assigned_file, ext='ASSIGN')
        except:
            print("Missing file {f}".format(f=field_assigned_file))
            header = None
            targets = None
            assignments = None

        if(assignments is not None):
            isin = np.array([r in rsid2indx for r in targets['rsid']],
                            dtype=bool)
            iin = np.where(isin)[0]
            isat = np.array([rsid2indx[rsid] for rsid in targets['rsid'][iin]],
                            dtype=np.int32)
            satisfied['satisfied'][isat] = (satisfied['satisfied'][isat] +
                                            assignments['satisfied'][iin])
            satisfied['assigned'][isat] = (satisfied['assigned'][isat] +
                                           assignments['assigned'][iin])
            satisfied['incadence'][isat] = (satisfied['incadence'][isat] +
                                            targets['incadence'][iin])
            if(len(assignments['allowed'].shape) > 1):
                satisfied['allowed'][isat] = (satisfied['allowed'][isat] +
                                              assignments['allowed'][iin, :].sum(axis=1))
            else:
                satisfied['allowed'][isat] = (satisfied['allowed'][isat] +
                                              assignments['allowed'][iin])
            satisfied['nexps'][isat] = (satisfied['nexps'][isat] +
                                        assignments['nexps'][iin])
            satisfied['nepochs'][isat] = (satisfied['nepochs'][isat] +
                                          assignments['nepochs'][iin])

    assigned_file = sdss_path.full('rsAssignments', plan=plan,
                                   observatory=observatory)
    satisfied_file = assigned_file.replace('rsAssignments', 'rsSatisfied')
    if(opentargets):
        satisfied_file = satisfied_file.replace('rsSatisfied',
                                                'rsSatisfiedOpen')
    if(reassign):
        satisfied_file = satisfied_file.replace('rsSatisfied',
                                                'rsSatisfiedReassign')

    hdr = robostrategy.header.rsheader()
    fitsio.write(satisfied_file, satisfied, header=hdr,
                 clobber=True)
