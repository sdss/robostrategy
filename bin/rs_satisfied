#!/usr/bin/env python
# encoding: utf-8
#
# @Author: Michael R. Blanton
# @Date: Sept 26, 2018
# @Filename: rs_satisfied
# @License: BSD 3-Clause
# @Copyright: Michael R. Blanton

import argparse
import os
import sys
import numpy as np
import fitsio
import roboscheduler.cadence as cadence
import robostrategy
import robostrategy.field
import robostrategy.header
import robostrategy.allocate
import sdss_access.path

sdss_path = sdss_access.path.Path(release='sdss5',
                                  preserve_envvars=True)


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Put assignment results for each target into a file')

    parser.add_argument('-p', '--plan', dest='plan',
                        type=str, help='name of plan', required=True)
    parser.add_argument('-o', '--observatory', dest='observatory',
                        type=str, help='apo or lco',
                        choices=['apo', 'lco'], required=True)
    parser.add_argument('-O', '--open', dest='opentargets',
                        help='set to read open target results',
                        default=False, required=False,
                        action='store_true')
    parser.add_argument('-F', '--filler', dest='filler',
                        help='set to read filler target results',
                        default=False, required=False,
                        action='store_true')
    parser.add_argument('-K', '--complete', dest='complete',
                        help='set to read complete target results',
                        default=False, required=False,
                        action='store_true')
    parser.add_argument('-R', '--reassign', dest='reassign',
                        help='set to read reassignment target results',
                        default=False, required=False,
                        action='store_true')
    parser.add_argument('-X', '--final', dest='final',
                        help='set to read final target results',
                        default=False, required=False,
                        action='store_true')
    parser.add_argument('-v', '--catchup-version', dest='catchup_version',
                        help='update to these catchup versions (comma separated list)',
                        default=None, required=False, type=str)

    args = parser.parse_args()
    plan = args.plan
    observatory = args.observatory
    opentargets = args.opentargets
    filler = args.filler
    complete = args.complete
    reassign = args.reassign
    final = args.final
    catchup_version = args.catchup_version
    if(catchup_version is not None):
        catchup = True
        catchup_versions = catchup_version.split(',')
    else:
        catchup = False
        catchup_versions = []

    if(int(final) + int(opentargets) + int(filler) + int(complete) + int(reassign) > 1):
        print("Only one of -O, -R, -F, -K, -X can be set!")
        sys.exit()

    cadencelist = cadence.CadenceList(skybrightness_only=True)
    cadences_file = sdss_path.full('rsCadences', plan=plan,
                                   observatory=observatory)
    if(final):
        cadences_file = cadences_file.replace('rsCadences',
                                              'final/rsCadencesFinal')
    cadencelist.fromfits(filename=cadences_file, unpickle=True)

    allocate_file = sdss_path.full('rsAllocation', plan=plan,
                                   observatory=observatory)
    if(final):
        allocate_file = allocate_file.replace('rsAllocation',
                                              'final/rsAllocationFinal')
    allocate = robostrategy.allocate.AllocateLST(filename=allocate_file,
                                                 observatory=observatory)

    replacements = dict()
    for catchup_version in catchup_versions:
        allocate_file_catchup = allocate_file.replace('final/rsAllocationFinal',
                                                      'catchup/rsAllocationCatchup{v}'.format(v=catchup_version.upper()))
        allocate_catchup = robostrategy.allocate.AllocateLST(filename=allocate_file_catchup,
                                                             observatory=observatory)
        for fieldid in np.unique(allocate_catchup.fields['fieldid']):
            replacements[fieldid] = catchup_version

    targets_file = sdss_path.full('rsTargets', plan=plan,
                                   observatory=observatory)
    open_targets_file = targets_file.replace('rsTargets', 'rsTargetsOpen')
    filler_targets_file = targets_file.replace('rsTargets', 'rsTargetsFiller')
    final_targets_file = targets_file.replace('rsTargets', 'final/rsTargetsFinal')

    if(opentargets):
        targets_file = open_targets_file
    elif(filler):
        targets_file = filler_targets_file
    elif(final):
        targets_file = final_targets_file
    
    full_targets = fitsio.read(targets_file)

    if(len(full_targets) != len(np.unique(full_targets['rsid']))):
        print("Uh oh---repeated rsid!")
        sys.exit()

    rsid2indx = dict()
    for indx, full_target in enumerate(full_targets):
        rsid2indx[full_target['rsid']] = indx

    stages = ['srd', 'reassign', 'open', 'filler', 'complete']
    nstages = len(stages)

    satisfied_dtype = np.dtype([('carton_to_target_pk', np.int64),
                                ('rsid', np.int64),
                                ('catalogid', np.int64),
                                ('ra', np.float64),
                                ('dec', np.float64),
                                ('cadence', np.unicode_, 30),
                                ('allowed', np.int32),
                                ('incadence', np.int32),
                                ('satisfied', np.int32),
                                ('assigned', np.int32),
                                ('extra', np.int32),
                                ('nexps', np.int32),
                                ('nexps_srd', np.int32),
                                ('nexps_reassign', np.int32),
                                ('nexps_open', np.int32),
                                ('nexps_filler', np.int32),
                                ('nexps_complete', np.int32),
                                ('nexps_equiv', np.int32),
                                ('nepochs', np.int32)])

    satisfied = np.zeros(len(full_targets), dtype=satisfied_dtype)

    xferlist = ['carton_to_target_pk', 'rsid', 'catalogid', 'ra', 'dec', 'cadence']
    for xfer in xferlist:
        satisfied[xfer] = full_targets[xfer]

    count = 0
    fieldids = np.unique(allocate.field_array['fieldid'])
    for fieldid in fieldids:
        if((fieldid % 10) == 0):
            print(fieldid)

        field_assigned_file = sdss_path.full('rsFieldAssignments',
                                             plan=plan,
                                             observatory=observatory,
                                             fieldid=fieldid)
        if(opentargets):
            field_assigned_file = field_assigned_file.replace('rsFieldAssignments',
                                                              'rsFieldAssignmentsOpen')
        if(filler):
            field_assigned_file = field_assigned_file.replace('rsFieldAssignments',
                                                              'rsFieldAssignmentsFiller')
        if(reassign):
            field_assigned_file = field_assigned_file.replace('rsFieldAssignments',
                                                              'rsFieldReassignments')
        if(complete):
            field_assigned_file = field_assigned_file.replace('rsFieldAssignments',
                                                              'rsFieldAssignmentsComplete')
        if(final):
            field_assigned_file = field_assigned_file.replace('targets/rsFieldAssignments',
                                                              'final/rsFieldAssignmentsFinal')

        if(fieldid in replacements):
            field_assigned_file = field_assigned_file.replace('final/rsFieldAssignmentsFinal',
                                                              'catchup/rsFieldAssignmentsCatchup{v}'.format(v=replacements[fieldid].upper()))

        try:
            header = fitsio.read_header(field_assigned_file, ext=0)
            targets = fitsio.read(field_assigned_file, ext='TARGET')
            assignments = fitsio.read(field_assigned_file, ext='ASSIGN')
            robots = fitsio.read(field_assigned_file, ext='ROBOTS')
        except:
            print("Missing file {f}".format(f=field_assigned_file))
            header = None
            targets = None
            assignments = None

        if(int(header['NEXP']) > 500):
            print("fieldid {f}: Assuming this is RM field, with cadence {fc}".format(f=fieldid, fc=header['FCADENCE']), flush=True)
            isrm = True
        else:
            isrm = False

        if(assignments is not None):
            isin = np.array([r in rsid2indx for r in targets['rsid']],
                            dtype=bool)
            iin = np.where(isin)[0]
            if((len(iin) != len(targets)) & (final)):
                print("WARNING: fieldid={f} not all targets in summary file in final stage".format(f=fieldid), flush=True)
            isat = np.array([rsid2indx[rsid] for rsid in targets['rsid'][iin]],
                            dtype=np.int32)
            satisfied['satisfied'][isat] = (satisfied['satisfied'][isat] +
                                            assignments['satisfied'][iin])
            satisfied['assigned'][isat] = (satisfied['assigned'][isat] +
                                           assignments['assigned'][iin])
            satisfied['extra'][isat] = (satisfied['extra'][isat] +
                                        assignments['extra'][iin])
            satisfied['incadence'][isat] = (satisfied['incadence'][isat] +
                                            assignments['incadence'][iin])
            if(len(assignments['allowed'].shape) > 1):
                satisfied['allowed'][isat] = (satisfied['allowed'][isat] +
                                              assignments['allowed'][iin, :].sum(axis=1))
            else:
                satisfied['allowed'][isat] = (satisfied['allowed'][isat] +
                                              assignments['allowed'][iin])
            satisfied['nexps'][isat] = (satisfied['nexps'][isat] +
                                        assignments['nexps'][iin])
            satisfied['nepochs'][isat] = (satisfied['nepochs'][isat] +
                                          assignments['nepochs'][iin])

            # Need to hack for RM fields
            if(isrm):
                nassigned = (assignments['robotID'][iin, ...] >= 0)
                if(len(nassigned.shape) > 1):
                    satisfied['nexps_srd'][isat] = (satisfied['nexps_srd'][isat] +
                                                    nassigned.sum(axis=1))
                else:
                    satisfied['nexps_srd'][isat] = (satisfied['nexps_srd'][isat] +
                                                    nassigned)
            
            ntot = 0
            for stage in stages:
                flag = robostrategy.field._expflagdict[stage.upper()]
                instage = ((assignments['expflag'][iin, ...] & flag) != 0)
                if(len(instage.shape) > 1):
                    satisfied['nexps_' + stage][isat] = (satisfied['nexps_' + stage][isat] +
                                                         instage.sum(axis=1))
                else:
                    satisfied['nexps_' + stage][isat] = (satisfied['nexps_' + stage][isat] +
                                                         instage)
                ntot = ntot + instage.sum()

            isequiv = ((assignments['equivRobotID'][iin, ...] >= 0) &
                       (assignments['robotID'][iin, ...] < 0))
            if(len(isequiv.shape) > 1):
                satisfied['nexps_equiv'][isat] = (satisfied['nexps_equiv'][isat] +
                                                  isequiv.sum(axis=1))
            else:
                satisfied['nexps_equiv'][isat] = (satisfied['nexps_equiv'][isat] +
                                                  isequiv)

    assigned_file = sdss_path.full('rsAssignments', plan=plan,
                                   observatory=observatory)
    satisfied_file = assigned_file.replace('rsAssignments', 'rsSatisfied')
    if(opentargets):
        satisfied_file = satisfied_file.replace('rsSatisfied',
                                                'rsSatisfiedOpen')
    if(filler):
        satisfied_file = satisfied_file.replace('rsSatisfied',
                                                'rsSatisfiedFiller')
    if(complete):
        satisfied_file = satisfied_file.replace('rsSatisfied',
                                                'rsSatisfiedComplete')
    if(reassign):
        satisfied_file = satisfied_file.replace('rsSatisfied',
                                                'rsSatisfiedReassign')
    if(final):
        satisfied_file = satisfied_file.replace('rsSatisfied',
                                                'final/rsSatisfiedFinal')

    if(catchup):
        satisfied_file = satisfied_file.replace('final/rsSatisfiedFinal',
                                                'catchup/rsSatisfiedCatchup{v}'.format(v=catchup_versions[-1].upper()))

    hdr = robostrategy.header.rsheader()
    fitsio.write(satisfied_file, satisfied, header=hdr,
                 clobber=True)
