#!/usr/bin/env python
# encoding: utf-8
#
# @Author: Michael R. Blanton
# @Date: Aug 3, 2018
# @Filename: rs_assign_ggsp
# @License: BSD 3-Clause
# @Copyright: Michael R. Blanton


from __future__ import division
from __future__ import print_function
from __future__ import absolute_import
from __future__ import unicode_literals

import argparse
import os
import sys
import numpy as np
import astropy.coordinates as coordinates
import astropy.units as units
import fitsio
import sdss_access.path

sdss_path = sdss_access.path.Path()


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Field assignment test for Galactic Genesis')

    parser.add_argument('-n', '--ncadence', dest='ncadence',
                        type=np.int32, help='max number of cadences',
                        default=100)
    parser.add_argument('-p', '--plan', dest='plan',
                        type=str, help='name of plan', required=True)
    parser.add_argument('-o', '--observatory', dest='observatory',
                        type=str, help='apo or lco',
                        choices=['apo', 'lco'], required=True)

    args = parser.parse_args()
    plan = args.plan
    observatory = args.observatory

    fields_file = sdss_path.full('rsFields', plan=plan,
                                 observatory=observatory)
    fields_array = fitsio.read(fields_file)

    targets_file = sdss_path.full('rsTargets', plan=plan,
                                  observatory=observatory)
    targets_all = fitsio.read(targets_file)
    targets_coord = coordinates.SkyCoord(ra=targets_all['ra'] * units.degree,
                                         dec=targets_all['dec'] * units.degree)

    for fields_entry in fields_array:
        fieldid = fields_entry['fieldid']
        if((fieldid % 1) == 0):
            print(fieldid)

        c = coordinates.SkyCoord(ra=fields_entry['racen'] * units.degree,
                                 dec=fields_entry['deccen'] * units.degree)
        indx = c.separation(targets_coord) < (1.5 * units.deg)
        targets = targets_all[indx]

        field_target_file = sdss_path.full('rsFieldTargets', plan=plan,
                                           observatory=observatory,
                                           fieldid=fieldid)
        fitsio.write(field_target_file, targets, clobber=True)
