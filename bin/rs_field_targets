#!/usr/bin/env python
# encoding: utf-8
#
# @Author: Michael R. Blanton
# @Date: Aug 3, 2018
# @Filename: rs_assign_ggsp
# @License: BSD 3-Clause
# @Copyright: Michael R. Blanton


from __future__ import division
from __future__ import print_function
from __future__ import absolute_import
from __future__ import unicode_literals

import argparse
import os
import sys
import numpy as np
import healpy
import fitsio
import sdss_access.path
import robostrategy.field as field
import robostrategy.params as params
import roboscheduler.cadence as cadence

sdss_path = sdss_access.path.Path(release='sdss5')
cadencelist = cadence.CadenceList()


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Field assignment test for Galactic Genesis')

    parser.add_argument('-n', '--ncadence', dest='ncadence',
                        type=np.int32, help='max number of cadences',
                        default=100)
    parser.add_argument('-p', '--plan', dest='plan',
                        type=str, help='name of plan', required=True)
    parser.add_argument('-o', '--observatory', dest='observatory',
                        type=str, help='apo or lco',
                        choices=['apo', 'lco'], required=True)

    args = parser.parse_args()
    plan = args.plan
    observatory = args.observatory

    rsParams = params.RobostrategyParams(plan=plan)
    if('Rotate' in rsParams.cfg['Fields']):
        rotate = True
        paname = rsParams.cfg['Fields']['Rotate']
    else:
        rotate = False
        paname = ''

    cadences_file = sdss_path.full('rsCadences', plan=plan,
                                   observatory=observatory)
    cadencelist.fromfits(filename=cadences_file, unpickle=True)

    fields_file = sdss_path.full('rsFields', plan=plan,
                                 observatory=observatory)
    if(rotate):
        fields_file = fields_file.replace('rsFields', 'rsFieldsRotated')
    fields_array = fitsio.read(fields_file)

    targets_file = sdss_path.full('rsTargets', plan=plan,
                                  observatory=observatory)
    targets_all = fitsio.read(targets_file)

    targets_covered_dtype = [('rsid', np.int64),
                             ('catalogid', np.int64),
                             ('pk', np.int64),
                             ('ra', np.float64),
                             ('dec', np.float64),
                             ('within_circle', np.int32),
                             ('within_circle_fields', np.int32, 30),
                             ('within_hex', np.int32),
                             ('within_hex_fields', np.int32, 30)]
    targets_covered = np.zeros(len(targets_all), dtype=targets_covered_dtype)
    targets_covered['rsid'] = targets_all['rsid']
    targets_covered['catalogid'] = targets_all['catalogid']
    targets_covered['pk'] = targets_all['pk']
    targets_covered['ra'] = targets_all['ra']
    targets_covered['dec'] = targets_all['dec']

    nside = 32
    hpix = healpy.pixelfunc.ang2pix(nside, targets_all['ra'],
                                    targets_all['dec'], lonlat=True)

    for fields_entry in fields_array:
        fieldid = fields_entry['fieldid']
        if((fieldid % 1) == 0):
            print(fieldid)

        hpix_field = healpy.pixelfunc.ang2pix(nside, fields_entry['racen'],
                                              fields_entry['deccen'],
                                              lonlat=True)
        neighbors = healpy.pixelfunc.get_all_neighbours(nside, hpix_field)
        hpix_check = np.append(neighbors, np.array([hpix_field]))

        keep = np.zeros(healpy.pixelfunc.nside2npix(nside), dtype=np.int32)
        keep[hpix_check] = 1
        icheck = np.where(keep[hpix])[0]

        # From Meeus Ch. 17
        deccen_rad = fields_entry['deccen'] * np.pi / 180.
        racen_rad = fields_entry['racen'] * np.pi / 180.
        dec_rad = targets_all['dec'][icheck] * np.pi / 180.
        ra_rad = targets_all['ra'][icheck] * np.pi / 180.
        x = (np.cos(deccen_rad) * np.sin(dec_rad) -
             np.sin(deccen_rad) * np.cos(dec_rad) *
             np.cos(ra_rad - racen_rad))
        y = np.cos(dec_rad) * np.sin(ra_rad - racen_rad)
        z = (np.sin(deccen_rad) * np.sin(dec_rad) +
             np.cos(deccen_rad) * np.cos(dec_rad) *
             np.cos(ra_rad - racen_rad))
        d_rad = np.arctan2(np.sqrt(x**2 + y**2), z)
        d_deg = d_rad * 180. / np.pi

        indx = np.where(d_deg < fields_entry['radius'])[0]
        icircle = icheck[indx]

        targets = targets_all[icircle]

        within_circle = targets_covered['within_circle'][icircle]
        targets_covered['within_circle_fields'][icircle,
                                                within_circle] = fieldid
        targets_covered['within_circle'][icircle] = within_circle + 1

        f = field.Field(racen=fields_entry['racen'],
                        deccen=fields_entry['deccen'],
                        observatory=observatory)
        if(rotate):
            f.pa = np.float32(fields_entry[paname])
        f.targets_fromarray(target_array=targets)
        ihex = icheck[indx[np.where(f.target_within)[0]]]
        within_hex = targets_covered['within_hex'][ihex]
        targets_covered['within_hex_fields'][ihex, within_hex] = fieldid
        targets_covered['within_hex'][ihex] = within_hex + 1

        field_target_file = sdss_path.full('rsFieldTargets', plan=plan,
                                           observatory=observatory,
                                           fieldid=fieldid)
        fitsio.write(field_target_file, targets, clobber=True)

    targets_covered_base = 'rsTargetsCovered-{plan}-{obs}.fits'
    targets_covered_base = targets_covered_base.format(plan=plan,
                                                       obs=observatory)
    targets_covered_file = os.path.join(os.path.dirname(targets_file),
                                        targets_covered_base)
    fitsio.write(targets_covered_file, targets_covered, clobber=True)
