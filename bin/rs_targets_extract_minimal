#!/usr/bin/env python
# encoding: utf-8
#
# @Author: Michael R. Blanton
# @Date: Aug 3, 2018
# @Filename: rs_targets_extract
# @License: BSD 3-Clause
# @Copyright: Michael R. Blanton


from __future__ import division
from __future__ import print_function
from __future__ import absolute_import
from __future__ import unicode_literals

import argparse
import os
import sys
import numpy as np
import fitsio
import roboscheduler.cadence as cadence
import sdssdb.peewee.sdss5db.targetdb as targetdb
import sdss_access.path

sdss_path = sdss_access.path.Path()


def get_targets():
    nt = targetdb.Target.select(targetdb.Target.ra,
                                targetdb.Target.dec).count()

    ts = (targetdb.Target.select(targetdb.Target.ra,
                                 targetdb.Target.dec,
                                 targetdb.Target.pk,
                                 targetdb.Program.label.alias('program'),
                                 targetdb.TargetCadence.name.alias('cadence'))
          .join(targetdb.Program).switch(targetdb.Target)
          .join(targetdb.TargetCadence).dicts())

    target_type = np.array(['apogee'] * nt)

    target0 = [('targetid', np.int32),
               ('pk', np.int64),
               ('ra', np.float64),
               ('dec', np.float64),
               ('program', np.dtype('a30')),
               ('cadence', cadence.fits_type),
               ('type', np.dtype('a30'))]
    targets = np.zeros(nt, dtype=target0)

    for indx, t in zip(np.arange(nt), ts):
        targets['ra'][indx] = t['ra']
        targets['dec'][indx] = t['dec']
        targets['pk'][indx] = t['pk']
        targets['program'][indx] = t['program']
        targets['cadence'][indx] = t['cadence']
        targets['type'][indx] = target_type[indx]

    # HACK
    program = np.array([p.decode().strip() for p in targets['program']])
    inotrm = np.where(program != 'ReSpeQ_RM')[0]
    targets = targets[inotrm]
    print(len(targets))
    fname = sdss_path.full('rsFields', observatory='apo', plan='straw-0')
    f = fitsio.read(fname)
    ftype = np.array([x.decode().strip() for x in f['type']])
    irmfields = np.where(ftype == 'rm_north')[0]
    for irmfield in irmfields:
        maxpk = targets['pk'].max()
        racen = f['racen'][irmfield]
        deccen = f['deccen'][irmfield]
        nnew = 800
        thran = np.pi * 2. * np.random.random(size=nnew)
        r2ran = (1.49**2) * np.random.random(size=nnew)
        rran = np.sqrt(r2ran)
        dra = rran * np.cos(thran)
        ddec = rran * np.sin(thran)
        new_targets = np.zeros(nnew, dtype=target0)
        new_targets['ra'] = (racen + dra / np.cos(np.pi / 180. * deccen))
        new_targets['dec'] = (deccen + ddec)
        new_targets['pk'] = maxpk + 1 + np.arange(nnew)
        new_targets['program'] = 'ReSpeQ_RM'
        new_targets['cadence'] = 'bhm_rm_174x8'
        new_targets['type'] = 'rm_north'
        targets = np.append(targets, new_targets)

    # HACK
    fname = sdss_path.full('rsFields', observatory='lco', plan='straw-0')
    f = fitsio.read(fname)
    ftype = np.array([x.decode().strip() for x in f['type']])
    irmfields = np.where(ftype == 'rm_south')[0]
    for irmfield in irmfields:
        maxpk = targets['pk'].max()
        racen = f['racen'][irmfield]
        deccen = f['deccen'][irmfield]
        nnew = 800
        thran = np.pi * 2. * np.random.random(size=nnew)
        r2ran = (1.49**2) * np.random.random(size=nnew)
        rran = np.sqrt(r2ran)
        dra = rran * np.cos(thran)
        ddec = rran * np.sin(thran)
        new_targets = np.zeros(nnew, dtype=target0)
        new_targets['ra'] = (racen + dra / np.cos(np.pi / 180. * deccen))
        new_targets['dec'] = (deccen + ddec)
        new_targets['pk'] = maxpk + 1 + np.arange(nnew)
        new_targets['program'] = 'ReSpeQ_RM'
        new_targets['cadence'] = 'bhm_rm_174x8'
        new_targets['type'] = 'rm_south'
        targets = np.append(targets, new_targets)

    program = np.array([p.decode().strip() for p in targets['program']])
    ispiders = np.where(program == 'SPIDERS_AGN')[0]
    targets['cadence'][ispiders] = 'bhm_spiders_1x4'

    # HACK
    keep = np.ones(len(targets))
    inot = np.where((program == 'ATLaS_RV') |
                    (program == 'ReSpeQ_MED') |
                    (program == 'ReSpeQ_WIDEA') |
                    (program == 'ReSpeQ_WIDEB') |
                    (program == 'Dust') |
                    (program == 'ATLaS_TESS'))[0]
    keep[inot] = 0

    targets = targets[keep > 0]
    targets['targetid'] = np.arange(len(targets), dtype=np.int32)

    return(targets)


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Export targets as a FITS file')

    parser.add_argument('-p', '--plan', dest='plan',
                        type=str, help='name of plan', required=True)
    parser.add_argument('-o', '--observatory', dest='observatory',
                        type=str, help='apo or lco',
                        choices=['apo', 'lco'], required=True)

    args = parser.parse_args()
    plan = args.plan
    observatory = args.observatory

    targets = get_targets()

    targets_file = sdss_path.full('rsTargets', plan=plan,
                                  observatory=observatory)
    fitsio.write(targets_file, targets, clobber=True)
