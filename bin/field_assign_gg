#!/usr/bin/env python
# encoding: utf-8
#
# @Author: Michael R. Blanton
# @Date: Aug 3, 2018
# @Filename: field_assign_gg
# @License: BSD 3-Clause
# @Copyright: Michael R. Blanton


from __future__ import division
from __future__ import print_function
from __future__ import absolute_import
from __future__ import unicode_literals

import argparse
import os
import sys
import numpy as np
import matplotlib.pyplot as plt
import fitsio
import roboscheduler.cadence as cadence
import robostrategy.field as field
import observesim.db.peewee.targetdb as targetdb


def get_targets(racen=None, deccen=None, radius=1.49):
    ramin = racen - radius / np.cos(deccen * np.pi / 180.)
    ramax = racen + radius / np.cos(deccen * np.pi / 180.)
    decmin = deccen - radius
    decmax = deccen + radius

    nt = targetdb.Target.select(targetdb.Target.ra,
                                targetdb.Target.dec,
                                targetdb.Program.label).where(targetdb.Target.ra.between(ramin, ramax) &
                                                                 targetdb.Target.dec.between(decmin, decmax)).join(targetdb.Program).count()
    ts = targetdb.Target.select(targetdb.Target.ra,
                                targetdb.Target.dec,
                                targetdb.Program.label).where(targetdb.Target.ra.between(ramin, ramax) &
                                                                 targetdb.Target.dec.between(decmin, decmax)).join(targetdb.Program).dicts()

    target_type = ['apogee'] * nt

    ra = np.zeros(nt, dtype=np.float64)
    dec = np.zeros(nt, dtype=np.float64)
    program = [''] * nt
    for indx, t in zip(np.arange(nt), ts):
        ra[indx] = t['ra']
        dec[indx] = t['dec']
        program[indx] = t['label']
    program = np.array(program)

    target0 = [('targetid', np.int32),
               ('ra', np.float64),
               ('dec', np.float64),
               ('cadence', 'a10'),
               ('type', 'a10')]
    targets = np.zeros(nt, dtype=target0)
    targets['targetid'] = np.arange(nt)
    targets['ra'] = ra
    targets['dec'] = dec
    targets['cadence'] = ['single' for t in target_type]
    targets['type'] = [str(t) for t in target_type]

    iprogram = np.where(program == 'Disco')[0]

    return(targets[iprogram])


def initialize_cadences(ncadence=None):
    cadencelist = cadence.CadenceList()
    cadencelist.reset()
    cadencelist.add_cadence(name='single',
                            nexposures=1,
                            delta=[0.],
                            delta_min=[0.],
                            delta_max=[0.],
                            lunation=[1.],
                            instrument=['apogee'])
    n = ncadence
    cadencelist.add_cadence(name='repeat-n', nexposures=n,
                            delta=[-1.] * n,
                            delta_min=[-1.] * n,
                            delta_max=[-1.] * n,
                            lunation=[-1.] * n,
                            instrument=['apogee'] * n)
    return()


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Field assignment test for Galactic Genesis')

    parser.add_argument('-n', '--ncadence', dest='ncadence',
                        type=np.int32, help='max number of cadences',
                        default=100)
    parser.add_argument('-p', '--plan', dest='plan',
                        type=str, help='name of plan')
    parser.add_argument('-t', '--telescope', dest='telescope',
                        type=str, help='north or south',
                        choices=['apo', 'lco'])

    args = parser.parse_args()

    initialize_cadences(ncadence=args.ncadence)

    fields_file = os.path.join(os.getenv('ROBOSTRATEGY_DATA'),
                               'plans', args.plan,
                               '{plan}-fields-{telescope}.fits'.format(plan=args.plan,
                                                                       telescope=args.telescope))
    fields_array = fitsio.read(fields_file)

    assign_dtype = [('fieldid', np.int32),
                    ('racen', np.float64),
                    ('deccen', np.float64),
                    ('ntargets', np.int32),
                    ('ngot', np.int32, args.ncadence),
                    ('valuegot', np.float32, args.ncadence)]

    assign_array = np.zeros(len(fields_array), dtype=assign_dtype)

    for fields_entry, assign_entry in zip(fields_array, assign_array):
        fieldid = fields_entry['fieldid']
        if((fieldid % 10) == 0):
            print(fieldid)
        targets = get_targets(racen=fields_entry['racen'],
                              deccen=fields_entry['deccen'],
                              radius=fields_entry['radius'])

        values = np.ones(len(targets))

        f = field.Field(racen=fields_entry['racen'],
                        deccen=fields_entry['deccen'])
        f.targets_fromarray(targets)
        f.field_cadence = 'repeat-n'
        f.assign()

        assign_entry['fieldid'] = fields_entry['fieldid']
        assign_entry['racen'] = fields_entry['racen']
        assign_entry['deccen'] = fields_entry['deccen']
        assign_entry['ntargets'] = len(targets)
        for indx in np.arange(args.ncadence, dtype=np.int32) + 1:
            igot = np.where(f.assignments[:, 0:indx] >= 0)
            tgot = f.assignments[igot]
            assign_entry['ngot'][indx - 1] = igot[0].size
            assign_entry['valuegot'][indx - 1] = values[tgot].sum()

    options_file = os.path.join(os.getenv('ROBOSTRATEGY_DATA'),
                                'allocations', args.plan,
                                '{plan}-options-{telescope}.fits'.format(plan=args.plan,
                                                                         telescope=args.telescope))
    fitsio.write(options_file, assign_array, clobber=True)
