#!/usr/bin/env python
# encoding: utf-8
#
# @Author: Michael R. Blanton
# @Date: Aug 3, 2018
# @Filename: rs_field_cadences
# @License: BSD 3-Clause
# @Copyright: Michael R. Blanton


from __future__ import division
from __future__ import print_function
from __future__ import absolute_import
from __future__ import unicode_literals

import argparse
import os
import sys
import numpy as np
import astropy.coordinates as coords
import astropy.units as u
import fitsio
import sdss_access.path
import robostrategy
import robostrategy.allocate
import robostrategy.header
import roboscheduler.cadence
import robostrategy.params as params

sdss_path = sdss_access.path.Path(release='sdss5', preserve_envvars=True)


def parse_cadence(cadence):
    words = cadence.split('_')
    prefix = '_'.join(words[:-1])
    nxm = words[-1]
    n, m = nxm.split('x')
    if(n[0] != 'n'):
        n = int(n)
    m = int(m)
    return(prefix, n, m)


def cadences_from_targets(cfg=None, target_cadences=None):
    field_cadences = []

    for target_cadence in cfg['CadencesFromTargets']:
        if(target_cadence in target_cadences):
            if(cfg['CadencesFromTargets'][target_cadence] is not None):
                curr_cadences = cfg['CadencesFromTargets'][target_cadence].split()
                for curr_cadence in curr_cadences:
                    field_cadences.append(curr_cadence)
            else:
                field_cadences.append(target_cadence)

    field_cadences = np.array(field_cadences)
    field_cadences = np.unique(field_cadences)

    return(field_cadences)


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Make list of cadences to try for each field')

    parser.add_argument('-n', '--ncadence', dest='ncadence',
                        type=np.int32, help='max number of cadences',
                        default=100)
    parser.add_argument('-p', '--plan', dest='plan',
                        type=str, help='name of plan', required=True)
    parser.add_argument('-o', '--observatory', dest='observatory',
                        type=str, help='apo or lco',
                        choices=['apo', 'lco'], required=True)
    parser.add_argument('-S', '--no-status', dest='nostatus',
                        help='do not use status', required=False,
                        default=False, action='store_true')

    args = parser.parse_args()
    plan = args.plan
    observatory = args.observatory
    nostatus = args.nostatus

    print("Reading cfg file ...", flush=True)
    rsParams = params.RobostrategyParams(plan=plan)

    darkPlane = False
    darkPlaneLat = 0

    if('forceTessOB' in rsParams.cfg['Fields']):
        print("Forcing TESS OB fields")
        forceTessOB = True
    else:
        print("Not forcing TESS OB fields")
        forceTessOB = False

    if('Rotate' in rsParams.cfg['Fields']):
        rotate = True
        paname = rsParams.cfg['Fields']['Rotate']
    else:
        rotate = False
        paname = ''

    print("Reading fields ...", flush=True)
    fields_file = sdss_path.full('rsFields', plan=plan,
                                 observatory=observatory)
    field_status_file = fields_file.replace('rsFields', 'rsStatus')
    if(rotate):
        fields_file = fields_file.replace('rsFields', 'rsFieldsRotated')
    fields_array = fitsio.read(fields_file)

    if(nostatus is False):
        print("Reading status file ...", flush=True)
        field_status = fitsio.read(field_status_file)
        field_status_hdr = fitsio.read_header(field_status_file, ext=1)
        fromplan = field_status_hdr['FROMPLAN']
    else:
        print("Not reading status file ...", flush=True)

    if(nostatus is False):
        print("Reading allocations  ...", flush=True)
        allocate_file_orig = sdss_path.full('rsAllocation', plan=fromplan,
                                            observatory=observatory)
        allocate_file = allocate_file_orig.replace('rsAllocation', 'rsAllocationRefresh')
        if(os.path.exists(allocate_file)):
            print("Using rsAllocationRefresh version of the allocation file", flush=True)
        else:
            allocate_file = allocate_file_orig
        allocate_fromplan = robostrategy.allocate.AllocateLST(filename=allocate_file,
                                                              observatory=observatory)
    else:
        print("Not reading allocations  ...", flush=True)
        fromplan = None
        allocate_fromplan = None

    print("Reading cadences ...", flush=True)
    cadencelist = roboscheduler.cadence.CadenceList(skybrightness_only=True)
    cadences_file = sdss_path.full('rsCadences', plan=plan,
                                   observatory=observatory)
    cadencelist.fromfits(cadences_file, unpickle=True)

    fields_coords = coords.SkyCoord(ra=fields_array['racen'] * u.degree,
                                    dec=fields_array['deccen'] * u.degree,
                                    frame='fk5')
    fields_coords_gal = fields_coords.transform_to('galactic')
    fields_l = fields_coords_gal.l.value
    fields_b = fields_coords_gal.b.value

    all_field_cadences = []
    for ifield, fields_entry in enumerate(fields_array):
        fieldid = fields_entry['fieldid']
        fieldtype = fields_entry['type'].strip()

        print("fieldid {f}: Setting cadences".format(f=fieldid), flush=True)

        field_target_file = sdss_path.full('rsFieldTargets', plan=plan,
                                           observatory=observatory,
                                           fieldid=fieldid)
        f = fitsio.read(field_target_file)

        iwithin = np.where(f['within'])[0]
        target_cadences = np.unique(f['cadence'][iwithin])

        cadences = np.array(rsParams.cfg['Fields'][fieldtype].split())
        if('FromTargets' in cadences):
            field_cadences = cadences_from_targets(cfg=rsParams.cfg,
                                                   target_cadences=target_cadences)
            field_cadences = list(field_cadences)
        else:
            field_cadences = []
        for cadence in cadences[cadences != 'FromTargets']:
            field_cadences.append(cadence)

        if(darkPlane & (np.abs(fields_b[ifield]) < darkPlaneLat)):
            field_cadences = ['mixed2_single_n2x1']

        forcedField = False
        if(forceTessOB):
            if('manual_mwm_tess_ob' in f['carton'][iwithin]):
                if('bright_8x4' in field_cadences):
                    field_cadences = ['bright_8x4']
                    forcedField = True
                if('bright_8x2' in field_cadences):
                    field_cadences = ['bright_8x2']
                    forcedField = True
                if('bright_8x1' in field_cadences):
                    field_cadences = ['bright_8x1']
                    forcedField = True

        if(nostatus is False):
            # If any exposures are done, make sure at least one of the current
            # cadences can accommodate those exposures
            iallocate = np.where(allocate_fromplan.field_array['fieldid'] == fieldid)[0]
            current_cadence = allocate_fromplan.field_array['cadence'][iallocate[0]]
            idone = np.where((field_status['rs_fieldid'] == fieldid) &
                             (field_status['status'] == 'done'))[0]
            if((len(idone) > 0) & (current_cadence != 'none')):
                current_exposures_done = field_status['field_exposure'][idone]
                current_epochs_done = cadencelist.cadences[current_cadence].epochs[current_exposures_done]
                current_epochs_done = np.unique(current_epochs_done)

                atleastone = False
                for option_cadence in field_cadences:
                    if(option_cadence == 'mixed2_single_n2x1'):
                        option_cadence = 'mixed2_single_nx1'
                    ok1, epochs_done1 = robostrategy.allocate.option_epochs_done(
                        option_cadence=option_cadence,
                        current_cadence=current_cadence,
                        current_exposures_done=current_exposures_done)

                    if(ok1):
                        option_exposures_done = np.zeros(0, dtype=np.int32)
                        ocadence = cadencelist.cadences[option_cadence]
                        for epoch in epochs_done1:
                            exps = ocadence.epoch_indx[epoch] + np.arange(ocadence.nexp[epoch],
                                                                          dtype=np.int32)
                            option_exposures_done = np.append(option_exposures_done, exps)
                        ok2, epochs_done2 = robostrategy.allocate.option_epochs_done(
                            current_cadence=option_cadence,
                            option_cadence=current_cadence,
                            current_exposures_done=option_exposures_done)

                        if(ok2):
                            atleastone = True
                            break

                # If this field isn't being forced then always add the option that we just
                # keep what has already been done
                if(forcedField == False):
                    print("fieldid {fid}: Checking for exactly completed cadence".format(fid=fieldid))
                    # Check all cadences with the right number of exposures
                    for complete_cadence in cadencelist.cadences:
                        nepochs = cadencelist.cadences[complete_cadence].nepochs
                        nexp_total = cadencelist.cadences[complete_cadence].nexp_total
                        if(len(current_exposures_done) == nexp_total):
                            # If the cadence can be used and all its epochs are satisfied, keep
                            # This call takes the current exposures and asks whether they
                            # will satisfy cadence under consideration if taken in the
                            # same order
                            print(current_cadence)
                            print(complete_cadence)
                            print(current_exposures_done)
                            ok1, epochs_done1 = robostrategy.allocate.option_epochs_done(
                                option_cadence=current_cadence,
                                current_cadence=complete_cadence,
                                current_exposures_done=np.arange(len(current_exposures_done), dtype=np.int32))
                            if(ok1 &
                               (len(epochs_done1) == cadencelist.cadences[complete_cadence].nepochs)):
                                print("fieldid {fid}: Adding exactly completed cadence: {h}".format(fid=fieldid, h=complete_cadence), flush=True)
                                field_cadences.append(complete_cadence)

                if(atleastone == False):
                    if(current_cadence in rsParams.cfg['ConvertToHybridCadences']):
                        prefix_c, n_c, m_c = parse_cadence(current_cadence)
                        convert_cadences = rsParams.cfg['ConvertToHybridCadences'][current_cadence].split()
                        hybrid_cadences = []
                        if(fieldid == 128):
                            print(field_cadences)
                        for option_cadence in field_cadences:
                            if(option_cadence in convert_cadences):
                                prefix, n, m = parse_cadence(option_cadence)
                                if(n == 'n'):
                                    ns = range(2, 50)
                                else:
                                    ns = [n]
                                for n in ns:
                                    ndone = len(current_epochs_done)
                                    nnotdone = n - ndone
                                    if(nnotdone > 0):
                                        hybrid_cadence = '{prefix}_{d}x{mc}+{nd}x{m}'.format(prefix=prefix,
                                                                                             d=ndone,
                                                                                             mc=m_c,
                                                                                             nd=nnotdone,
                                                                                             m=m)
                                        if(hybrid_cadence in cadencelist.cadences):
                                            print("Adding hybrid cadence: {h}".format(h=hybrid_cadence))
                                            hybrid_cadences.append(hybrid_cadence)
                                        else:
                                            print("Not adding hybrid cadence (not available): fieldid={fid} with cadence={c} and hybrid={h}".format(fid=fieldid, c=current_cadence, h=hybrid_cadence))

                        field_cadences = field_cadences + hybrid_cadences
                        if(len(hybrid_cadences) == 0):
                            print("Not converting to hybrid cadence (no option found): fieldid={fid} with cadence={c}".format(fid=fieldid, c=current_cadence))
                            print(field_cadences)
                    else:
                        print("Not converting to hybrid cadence (not in cfg): fieldid={fid} with cadence={c}".format(fid=fieldid, c=current_cadence))

        all_field_cadences.append(np.array(field_cadences))
            

    all_field_cadences_1d = []
    for field_cadences in all_field_cadences:
        for field_cadence in field_cadences:
            all_field_cadences_1d.append(field_cadence)
    unique_cadences = np.unique(all_field_cadences_1d)

    cadence_mask = np.zeros((len(fields_array), len(unique_cadences)),
                            dtype=np.int32)

    for indx in np.arange(len(fields_array)):
        for field_cadence in all_field_cadences[indx]:
            icad = np.where(unique_cadences == field_cadence)[0]
            cadence_mask[indx, icad] = 1

    hdr = robostrategy.header.rsheader()
    hdr.append({'name':'NCAD',
                'value':len(unique_cadences),
                'comment':'number of unique cadences'})
    for indx, cad in zip(np.arange(len(unique_cadences)), unique_cadences):
        hdr.append({'name':'CAD{indx}'.format(indx=indx),
                    'value':cad,
                    'comment':'cadence name'})

    field_cadence_file = sdss_path.full('rsFieldCadences',
                                        plan=plan, observatory=observatory)
    fitsio.write(field_cadence_file, cadence_mask, header=hdr, clobber=True)
