#!/usr/bin/env python
# encoding: utf-8
#
# @Author: Michael R. Blanton
# @Date: Aug 3, 2018
# @Filename: rs_field_cadences_straw
# @License: BSD 3-Clause
# @Copyright: Michael R. Blanton


from __future__ import division
from __future__ import print_function
from __future__ import absolute_import
from __future__ import unicode_literals

import configparser
import argparse
import os
import sys
import numpy as np
import astropy.coordinates as coords
import astropy.units as u
import fitsio
import sdss_access.path
import roboscheduler
import robostrategy
import robostrategy.header
import robostrategy.field as field
import robostrategy.params as params

sdss_path = sdss_access.path.Path(release='sdss5', preserve_envvars=True)


def cadences_from_targets(cfg=None, target_cadences=None):
    field_cadences = []

    for target_cadence in cfg['CadencesFromTargets']:
        if(target_cadence in target_cadences):
            if(cfg['CadencesFromTargets'][target_cadence] is not None):
                curr_cadences = cfg['CadencesFromTargets'][target_cadence].split()
                for curr_cadence in curr_cadences:
                    field_cadences.append(curr_cadence)
            else:
                field_cadences.append(target_cadence)

    field_cadences = np.array(field_cadences)
    field_cadences = np.unique(field_cadences)

    return(field_cadences)


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Field assignment test for Galactic Genesis')

    parser.add_argument('-n', '--ncadence', dest='ncadence',
                        type=np.int32, help='max number of cadences',
                        default=100)
    parser.add_argument('-p', '--plan', dest='plan',
                        type=str, help='name of plan', required=True)
    parser.add_argument('-o', '--observatory', dest='observatory',
                        type=str, help='apo or lco',
                        choices=['apo', 'lco'], required=True)

    args = parser.parse_args()
    plan = args.plan
    observatory = args.observatory

    rsParams = params.RobostrategyParams(plan=plan)

    if('DarkPlane' in rsParams.cfg['Fields']):
        pars = np.array(rsParams.cfg['Fields']['DarkPlane'].split())
        darkPlaneObs = pars[2:]
        if(observatory in darkPlaneObs):
            darkPlane = True
            darkPlaneNum = np.int32(pars[0])
            darkPlaneLat = np.float64(pars[1])
        else:
            darkPlane = False
            darkPlaneLat = 0
    else:
        darkPlane = False
        darkPlaneLat = 0

    if('forceTessOB' in rsParams.cfg['Fields']):
        print("Forcing TESS OB fields")
        forceTessOB = True
    else:
        print("Not forcing TESS OB fields")
        forceTessOB = False

    if('Rotate' in rsParams.cfg['Fields']):
        rotate = True
        paname = rsParams.cfg['Fields']['Rotate']
    else:
        rotate = False
        paname = ''

    fields_file = sdss_path.full('rsFields', plan=plan,
                                 observatory=observatory)
    if(rotate):
        fields_file = fields_file.replace('rsFields', 'rsFieldsRotated')
    fields_array = fitsio.read(fields_file)

    fields_coords = coords.SkyCoord(ra=fields_array['racen'] * u.degree,
                                    dec=fields_array['deccen'] * u.degree,
                                    frame='fk5')
    fields_coords_gal = fields_coords.transform_to('galactic')
    fields_l = fields_coords_gal.l.value
    fields_b = fields_coords_gal.b.value

    all_field_cadences = []
    for ifield, fields_entry in enumerate(fields_array):
        fieldid = fields_entry['fieldid']
        fieldtype = fields_entry['type'].strip()

        print(fieldid, flush=True)

        field_target_file = sdss_path.full('rsFieldTargets', plan=plan,
                                           observatory=observatory,
                                           fieldid=fieldid)
        f = fitsio.read(field_target_file)

        target_cadences = np.unique(f['cadence'])

        cadences = np.array(rsParams.cfg['Fields'][fieldtype].split())
        if('FromTargets' in cadences):
            field_cadences = cadences_from_targets(cfg=rsParams.cfg,
                                                   target_cadences=target_cadences)
            field_cadences = list(field_cadences)
        else:
            field_cadences = []
        for cadence in cadences[cadences != 'FromTargets']:
            field_cadences.append(cadence)
            if('bhm_aqmes_medium' in cadence):
                print(fieldtype)
                print(cadence)
                print(target_cadences)
                print(field_cadences)

        if(darkPlane & (np.abs(fields_b[ifield]) < darkPlaneLat)):
            field_cadences = ['mixed2_single_n2x1']

        if(forceTessOB):
            if('mwm_tess_ob' in f['carton']):
                if('bright_8x4' in field_cadences):
                    field_cadences = ['bright_8x4']
                if('bright_8x2' in field_cadences):
                    field_cadences = ['bright_8x2']
                if('bright_8x1' in field_cadences):
                    field_cadences = ['bright_8x1']
                print(field_cadences)

        all_field_cadences.append(np.array(field_cadences))

    all_field_cadences_1d = []
    for field_cadences in all_field_cadences:
        for field_cadence in field_cadences:
            all_field_cadences_1d.append(field_cadence)
    unique_cadences = np.unique(all_field_cadences_1d)

    cadence_mask = np.zeros((len(fields_array), len(unique_cadences)),
                            dtype=np.int32)

    for indx in np.arange(len(fields_array)):
        for field_cadence in all_field_cadences[indx]:
            icad = np.where(unique_cadences == field_cadence)[0]
            cadence_mask[indx, icad] = 1

    hdr = robostrategy.header.rsheader()
    hdr.append({'name':'NCAD',
                'value':len(unique_cadences),
                'comment':'number of unique cadences'})
    for indx, cad in zip(np.arange(len(unique_cadences)), unique_cadences):
        hdr.append({'name':'CAD{indx}'.format(indx=indx),
                    'value':cad,
                    'comment':'cadence name'})

    field_cadence_file = sdss_path.full('rsFieldCadences',
                                        plan=plan, observatory=observatory)
    fitsio.write(field_cadence_file, cadence_mask, header=hdr, clobber=True)
