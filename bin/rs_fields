#!/usr/bin/env python
# encoding: utf-8
#
# @Author: Michael R. Blanton
# @Date: Aug 3, 2018
# @Filename: rs_fields
# @License: BSD 3-Clause
# @Copyright: Michael R. Blanton


from __future__ import division
from __future__ import print_function
from __future__ import absolute_import
from __future__ import unicode_literals

import argparse
import os
import sys
import numpy as np
import matplotlib
import matplotlib.pyplot as plt
import fitsio
import robostrategy
import robostrategy.sloane as sloane
import robostrategy.params as params
import sdss_access.path

sdss_path = sdss_access.path.Path(release='sdss5', preserve_envvars=True)


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Field list creation for SDSS-V')

    parser.add_argument('-p', '--plan', dest='plan',
                        type=str, help='name of plan')

    args = parser.parse_args()
    plan = args.plan

    rsParams = params.RobostrategyParams(plan=plan)

    schedule = rsParams.cfg['Allocation']['Schedule']
    schedule_prefix = schedule.split('_')[0]
    if(schedule_prefix == 'minimal'):
        np.random.seed(100)

    fields_dtype = [('fieldid', np.int32),
                    ('racen', np.float64),
                    ('deccen', np.float64),
                    ('radius', np.float32),
                    ('type', np.dtype('a30'))]
    fields_north_array = np.zeros(0, dtype=fields_dtype)
    fields_south_array = np.zeros(0, dtype=fields_dtype)

    if('AllSkySloane' in rsParams.cfg.options('Fields')):
        nsdiv = np.float32(rsParams.cfg.get('Fields', 'NSDiv'))
        if('lcoextend_gp' in rsParams.cfg['Fields']):
            lcoextend_gp = True
            lcoextend = rsParams.cfg.get('Fields', 'lcoextend_gp')
            lcoextend_words = lcoextend.split()
            lcoextend_nsdiv = np.float32(lcoextend_words[0])
            lcoextend_bmax = np.float32(lcoextend_words[1])
        else:
            lcoextend_gp = False
        if('lcoextend_ngc' in rsParams.cfg['Fields']):
            lcoextend_ngc = True
            lcoextend = rsParams.cfg.get('Fields', 'lcoextend_ngc')
            lcoextend_words = lcoextend.split()
            lcoextend_nsdiv = np.float32(lcoextend_words[0])
        else:
            lcoextend_ngc = False

        if('APOSloaneNumber' in rsParams.cfg['Fields']):
            nsloane_apo = int(rsParams.cfg['Fields']['APOSloaneNumber'])
        else:
            nsloane_apo = 7682
        fields_north = sloane.Sloane(n=nsloane_apo, radius=1.49)
        if('LCOSloaneNumber' in rsParams.cfg['Fields']):
            nsloane_lco = int(rsParams.cfg['Fields']['LCOSloaneNumber'])
        else:
            nsloane_lco = 18752
        fields_south = sloane.Sloane(n=nsloane_lco, radius=0.95)

        if(lcoextend_gp):
            fields_north.deccut_lcoextend(nsdiv, lcoextend_nsdiv,
                                          lcoextend_bmax, above=True)
            fields_south.deccut_lcoextend(nsdiv, lcoextend_nsdiv,
                                          lcoextend_bmax, above=False)
        elif(lcoextend_ngc):
            ikeep = np.where((fields_south.dec < nsdiv) |
                             (((fields_south.l % 360) > 180.) &
                              (fields_south.dec < lcoextend_nsdiv) &
                              (fields_south.b > 10.)))[0]
            fields_south.trim(indx=ikeep)
            ikeep = np.where((fields_north.dec > nsdiv) &
                             (((fields_north.l % 360) < 180.) |
                              (fields_north.dec > lcoextend_nsdiv) |
                              (fields_north.b < 10)))[0]
            fields_north.trim(indx=ikeep)
        else:
            fields_north.deccut(nsdiv)
            fields_south.deccut(nsdiv, above=False)

        tmp_fields_north_array = np.zeros(len(fields_north.ra),
                                          dtype=fields_dtype)
        tmp_fields_north_array['racen'] = fields_north.ra
        tmp_fields_north_array['deccen'] = fields_north.dec
        tmp_fields_north_array['radius'] = fields_north.radius
        tmp_fields_north_array['type'] = 'AllSkySloane'
        fields_north_array = np.append(fields_north_array,
                                       tmp_fields_north_array)

        tmp_fields_south_array = np.zeros(len(fields_south.ra),
                                          dtype=fields_dtype)
        tmp_fields_south_array['racen'] = fields_south.ra
        tmp_fields_south_array['deccen'] = fields_south.dec
        tmp_fields_south_array['radius'] = fields_south.radius
        tmp_fields_south_array['type'] = 'AllSkySloane'
        fields_south_array = np.append(fields_south_array,
                                       tmp_fields_south_array)

    if('BHMAqmesWide2' in rsParams.cfg['Fields']):
        in_file = os.path.join(os.getenv('ROBOSTRATEGY_DIR'),
                               'data',
                               'candidate_target_fields_bhm_aqmes_wide_{v}.fits')
        in_file = in_file.format(v=rsParams.cfg['Fields']['BHM'])
        wide = fitsio.read(in_file)
        if(schedule_prefix == 'minimal'):
            print("Tossing some AQMES wide fields for minimal schedule")
            keep = np.zeros(len(wide), dtype=bool)
            nkeep = (4 * len(wide)) // 5
            keep[0:nkeep] = 1
            np.random.shuffle(keep)
            wide = wide[keep]
        inew = np.where((wide['type'] == 'hpx') &
                        (wide['CADENCE'] == 'bhm_aqmes_wide_2x4'))[0]
        tmp_fields = np.zeros(len(inew), dtype=fields_dtype)
        tmp_fields['racen'] = wide['RACEN'][inew]
        tmp_fields['deccen'] = wide['DECCEN'][inew]
        tmp_fields['radius'] = 1.49
        tmp_fields['type'] = 'BHMAqmesWide2'
        fields_north_array = np.append(fields_north_array,
                                       tmp_fields)
        iold = np.where((wide['type'] == 'AllSkySloan') &
                        (wide['CADENCE'] == 'bhm_aqmes_wide_2x4'))[0]
        for i in iold:
            d2 = ((fields_north_array['racen'] - wide['RACEN'][i])**2 *
                  np.cos(wide['DECCEN'][i] * np.pi / 180.)**2 +
                  (fields_north_array['deccen'] - wide['DECCEN'][i])**2)
            imatch = d2.argmin()
            fields_north_array['type'][imatch] = 'BHMAqmesWide2'
        inew = np.where((wide['type'] == 'hpx') &
                        (wide['CADENCE'] == 'bhm_aqmes_wide_3x4'))[0]
        tmp_fields = np.zeros(len(inew), dtype=fields_dtype)
        tmp_fields['racen'] = wide['RACEN'][inew]
        tmp_fields['deccen'] = wide['DECCEN'][inew]
        tmp_fields['radius'] = 1.49
        tmp_fields['type'] = 'BHMAqmesWide3'
        fields_north_array = np.append(fields_north_array,
                                       tmp_fields)
        iold = np.where((wide['type'] == 'AllSkySloan') &
                        (wide['CADENCE'] == 'bhm_aqmes_wide_3x4'))[0]
        for i in iold:
            d2 = ((fields_north_array['racen'] - wide['RACEN'][i])**2 *
                  np.cos(wide['DECCEN'][i] * np.pi / 180.)**2 +
                  (fields_north_array['deccen'] - wide['DECCEN'][i])**2)
            imatch = d2.argmin()
            fields_north_array['type'][imatch] = 'BHMAqmesWide3'

    if('BHMAqmesMedium' in rsParams.cfg['Fields']):
        in_file = os.path.join(os.getenv('ROBOSTRATEGY_DIR'),
                               'data',
                               'candidate_target_fields_bhm_aqmes_med_{v}.fits')
        in_file = in_file.format(v=rsParams.cfg['Fields']['BHM'])
        med = fitsio.read(in_file)
        if(schedule_prefix == 'minimal'):
            print("Tossing some AQMES medium fields for minimal schedule")
            keep = np.zeros(len(med), dtype=bool)
            nkeep = (4 * len(med)) // 5
            keep[0:nkeep] = 1
            np.random.shuffle(keep)
            med = med[keep]
        inew = np.where(med['type'] == 'hpx')[0]
        tmp_fields = np.zeros(len(inew), dtype=fields_dtype)
        tmp_fields['racen'] = med['RACEN'][inew]
        tmp_fields['deccen'] = med['DECCEN'][inew]
        tmp_fields['radius'] = 1.49
        tmp_fields['type'] = 'BHMAqmesMedium'
        fields_north_array = np.append(fields_north_array,
                                       tmp_fields)
        iold = np.where(med['type'] == 'AllSkySloan')[0]
        for i in iold:
            d2 = ((fields_north_array['racen'] - med['RACEN'][i])**2 *
                  np.cos(med['DECCEN'][i] * np.pi / 180.)**2 +
                  (fields_north_array['deccen'] - med['DECCEN'][i])**2)
            imatch = d2.argmin()
            fields_north_array['type'][imatch] = 'BHMAqmesMedium'
        
    if('RM' in rsParams.cfg['Fields']):
        in_file = os.path.join(os.getenv('ROBOSTRATEGY_DIR'),
                               'data',
                               'candidate_target_fields_bhm_rm_{v}.fits')
        in_file = in_file.format(v=rsParams.cfg['Fields']['BHM'])
        in_rm = fitsio.read(in_file)
        tmp_fields_rm = np.zeros(len(in_rm), dtype=fields_dtype)
        tmp_fields_rm['racen'] = in_rm['RACEN']
        tmp_fields_rm['deccen'] = in_rm['DECCEN']
        tmp_fields_rm['radius'] = in_rm['RADIUS']
        tmp_fields_rm['type'] = 'RM'
        ilite = np.where(in_rm['CADENCE'] == 'bhm_rm_lite5_100x8')[0]
        tmp_fields_rm['type'][ilite] = 'RMlite'
        print(in_rm['OBSERVATORY'])
        obs = np.array([o.strip() for o in in_rm['OBSERVATORY']])
        iso = np.where(obs == 'lco')[0]
        tmp_fields_rm['radius'][iso] = 0.95
        fields_south_array = np.append(fields_south_array,
                                       tmp_fields_rm[iso])
        ino = np.where(obs == 'apo')[0]
        fields_north_array = np.append(fields_north_array,
                                       tmp_fields_rm[ino])

    fields_north_array['fieldid'] = np.arange(len(fields_north_array),
                                              dtype=np.int32) + 1
    fields_south_array['fieldid'] = (np.arange(len(fields_south_array),
                                               dtype=np.int32) +
                                     1 + fields_north_array['fieldid'].max())

    fields_north_file = sdss_path.full('rsFields', plan=plan,
                                       observatory='apo')
    fields_south_file = sdss_path.full('rsFields', plan=plan,
                                       observatory='lco')

    hd = dict()
    hd['STRATVER'] = robostrategy.__version__
    fitsio.write(fields_north_file, fields_north_array,
                 header=hd, clobber=True)
    fitsio.write(fields_south_file, fields_south_array,
                 header=hd, clobber=True)

    matplotlib.rcParams['figure.figsize'] = (16.0, 8.0)
    fields_north.plot()
    fields_north_png = sdss_path.full('rsFieldsPng', plan=plan,
                                      observatory='apo')
    plt.savefig(fields_north_png, dpi=150)
    plt.clf()

    matplotlib.rcParams['figure.figsize'] = (16.0, 8.0)
    fields_south.plot()
    fields_south_png = sdss_path.full('rsFieldsPng', plan=plan,
                                      observatory='lco')
    plt.savefig(fields_south_png, dpi=150)
    plt.clf()
