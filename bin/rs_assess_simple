#!/usr/bin/env python
# encoding: utf-8
#
# @Author: Michael R. Blanton
# @Filename: rs_assess_simple
# @License: BSD 3-Clause
# @Copyright: Michael R. Blanton


import argparse
import os
import sys
import numpy as np
import jinja2
import robostrategy.qa


tstr = """
Field cadence: {{field_cadence}}

{% for c in calibration_order %} {{c}}:{% for cn in calibrations[c] %} {{cn}}/{{required_calibrations[c][loop.index0]}}{% endfor %}
{% endfor %}
Science targets:
 BOSS targets assigned: {{nboss_science}}
 APOGEE targets assigned: {{napogee_science}}
 Per exposure:{% for n in nperexposure_science %} {{n}}{% endfor %}

Robots used per exposure:
 BOSS-only:{% for n in nperexposure_noapogee %} {{n}}{% endfor %}
 APOGEE-BOSS:{% for n in nperexposure_hasapogee %} {{n}}{% endfor %}
 APOGEE-BOSS-for-APOGEE:{% for n in nperexposure_hasapogee_isapogee %} {{n}}{% endfor %}

Carton completion:
{% for c in cartons %} {{c}}: {{cartons[c].nsatisfied}} / {{cartons[c].nwithin}} ({{cartons[c].nexposures}} exp) {% if cartons[c].per_exposure %}
   {% for p in cartons[c].n_per_exposure %}{{p}} {% endfor %} {% endif %}
{% endfor %}
"""


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Final assignment based on allocation')

    parser.add_argument('-p', '--plan', dest='plan',
                        type=str, help='name of plan', required=True)
    parser.add_argument('-o', '--observatory', dest='observatory',
                        type=str, help='apo or lco',
                        choices=['apo', 'lco'], required=True)
    parser.add_argument('-f', '--fieldid', dest='fieldid',
                        type=int, help='fieldid number',
                        required=True)
    parser.add_argument('-e', '--per-exposure', dest='per_exposure',
                        help='show per-carton, per-exposure numbers',
                        type=str, default=None, required=False)

    args = parser.parse_args()
    plan = args.plan
    observatory = args.observatory
    fieldid = args.fieldid
    per_exposure = args.per_exposure

    per_exposure_cartons = []
    if(per_exposure is not None):
        if(per_exposure != 'all'):
            per_exposure_cartons = per_exposure.split(',')
        else:
            per_exposure_cartons = 'all'

    tdict = robostrategy.qa.field_assignments_dict(plan=plan, observatory=observatory,
                                                   fieldid=fieldid,
                                                   per_exposure_cartons=per_exposure_cartons)

    env = jinja2.Environment()
    template = env.from_string(tstr)
    out = template.render(tdict)
    print(out)
