#!/usr/bin/env python
# encoding: utf-8
#
# @Author: Michael R. Blanton
# @Date: Aug 3, 2018
# @Filename: field_assign_gg
# @License: BSD 3-Clause
# @Copyright: Michael R. Blanton


from __future__ import division
from __future__ import print_function
from __future__ import absolute_import
from __future__ import unicode_literals

import argparse
import os
import sys
import matplotlib.pyplot as plt
import fitsio
import robostrategy.allocate
import robostrategy.slots


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Field assignment test for Galactic Genesis')

    parser.add_argument('-p', '--plan', dest='plan',
                        type=str, help='name of plan', required=True)
    parser.add_argument("-t", "--telescope", dest="telescope", type=str,
                        required=False, help="telescope ('apo' or 'lco')",
                        default='apo')

    args = parser.parse_args()
    plan = args.plan
    observatory = args.telescope

    options_base = '{plan}-options-{observatory}.fits'
    options_base = options_base.format(plan=args.plan, observatory=observatory)
    options_file = os.path.join(os.getenv('ROBOSTRATEGY_DATA'),
                                'allocations', plan, options_base)
    field_options = fitsio.read(options_file)
    nfields = len(field_options)

    slots_base = '{plan}-field-slots-{observatory}.fits'
    slots_base = slots_base.format(plan=args.plan, observatory=observatory)
    slots_file = os.path.join(os.getenv('ROBOSTRATEGY_DATA'),
                              'allocations', plan, slots_base)
    field_slots = fitsio.read(slots_file)

    slots_base = '{plan}-slots-{obs}.fits'.format(plan=plan, obs=observatory)
    slots_file = os.path.join(os.getenv('ROBOSTRATEGY_DATA'),
                              'allocations', args.plan, slots_base)
    slots = robostrategy.slots.Slots(observatory=observatory)
    slots.fromfits(filename=slots_file)

    allocate = robostrategy.allocate.AllocateLST(slots=slots,
                                                 field_options=field_options,
                                                 field_slots=field_slots)
    allocate.construct()
    allocate.solve()

    allocate_base = '{plan}-allocate-{observatory}.fits'
    allocate_base = allocate_base.format(plan=args.plan,
                                         observatory=observatory)
    allocate_file = os.path.join(os.getenv('ROBOSTRATEGY_DATA'),
                                 'allocations', plan, allocate_base)
    allocate.tofits(allocate_file)

    png_base = '{plan}-allocate-{observatory}.png'
    png_base = png_base.format(plan=args.plan, observatory=observatory)
    png_file = os.path.join(os.getenv('ROBOSTRATEGY_DATA'),
                            'allocations', plan, png_base)
    allocate.plot_full()
    plt.savefig(png_file, dpi=150)
    plt.clf()

    png_base = '{plan}-allocate-{observatory}-radec.png'
    png_base = png_base.format(plan=args.plan, observatory=observatory)
    png_file = os.path.join(os.getenv('ROBOSTRATEGY_DATA'),
                            'allocations', plan, png_base)
    allocate.plot_fields()
    plt.savefig(png_file, dpi=150)
    plt.clf()
