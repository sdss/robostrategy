#!/usr/bin/env python
# encoding: utf-8
#
# @Author: Michael R. Blanton
# @Date: Sept 26, 2018
# @Filename: rs_final_fieldsummary
# @License: BSD 3-Clause
# @Copyright: Michael R. Blanton


from __future__ import division
from __future__ import print_function
from __future__ import absolute_import
from __future__ import unicode_literals

import os
os.environ['OPENBLAS_NUM_THREADS'] = '1'

import argparse
import sys
import datetime
import numpy as np
import fitsio
import roboscheduler.cadence as cadence
import robostrategy.field as field
import robostrategy.allocate
import sdss_access.path

sdss_path = sdss_access.path.Path(release='sdss5', preserve_envvars=True)

cadencelist = cadence.CadenceList(skybrightness_only=True)

clobber = False


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Final assignment based on allocation')

    parser.add_argument('-p', '--plan', dest='plan',
                        type=str, help='name of plan', required=True)
    parser.add_argument('-o', '--observatory', dest='observatory',
                        type=str, help='apo or lco',
                        choices=['apo', 'lco'], required=True)

    args = parser.parse_args()
    plan = args.plan
    observatory = args.observatory

    allocate_file = sdss_path.full('rsAllocation', plan=plan,
                                   observatory=observatory)
    allocate_file = allocate_file.replace('rsAllocation',
                                          'final/rsAllocationFinal')
    allocate = robostrategy.allocate.AllocateLST(filename=allocate_file,
                                                 observatory=observatory)

    fieldids = np.unique(allocate.field_array['fieldid'])

    target_file = sdss_path.full('rsTargets', plan=plan,
                                 observatory=observatory)
    target_file = target_file.replace('rsTargets', 'final/rsTargetsFinal')
    targets = fitsio.read(target_file)

    summary_dtype = [('fieldid', np.int32),
                     ('racen', np.float64),
                     ('deccen', np.float64),
                     ('cadence', np.unicode_, 30)]

    cartons = np.unique(targets['carton'])
    for carton in cartons:
        summary_dtype.append((carton + '_nwithin', np.int32))
        summary_dtype.append((carton + '_ngot', np.int32))
        summary_dtype.append((carton + '_fgot', np.float32))

    summary_dtype = np.dtype(summary_dtype)

    summary = np.zeros(len(fieldids), dtype=summary_dtype)

    for i, fieldid in enumerate(fieldids):
        print("fieldid {fid}: Reading file".format(fid=fieldid), flush=True)

        field_target_file = sdss_path.full('rsFieldTargets',
                                           plan=plan, observatory=observatory,
                                           fieldid=fieldid)
        field_target_file = field_target_file.replace('targets/rsFieldTargets',
                                                      'final/rsFieldAssignmentsFinal')

        hdr = fitsio.read_header(field_target_file, ext=0)
        targets = fitsio.read(field_target_file, ext='TARGET')
        assignments = fitsio.read(field_target_file, ext='ASSIGN')

        summary['fieldid'][i] = fieldid
        summary['racen'][i] = np.float64(hdr['RACEN'])
        summary['deccen'][i] = np.float64(hdr['DECCEN'])
        summary['cadence'][i] = hdr['FCADENCE']

        for carton in cartons:
            iwithin = np.where((targets['carton'] == carton) &
                               (targets['within'] > 0))[0]
            igot = np.where((targets['carton'] == carton) &
                            (assignments['satisfied'] > 0))[0]
            if(len(iwithin) > 0):
                fgot = np.float32(len(igot)) / np.float32(len(iwithin))
            else:
                fgot = - 1.0
        
            summary[carton + '_nwithin'][i] = len(iwithin)
            summary[carton + '_ngot'][i] = len(igot)
            summary[carton + '_fgot'][i] = fgot

    fieldsummary_file = target_file.replace('final/rsTargetsFinal',
                                            'final/rsFieldSummaryFinal')
    fitsio.write(fieldsummary_file, summary, clobber=True)
