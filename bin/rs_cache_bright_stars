#!/usr/bin/env python
# encoding: utf-8
#
# @Author: Michael R. Blanton
# @Date: Sept 26, 2018
# @Filename: rs_assign_prep
# @License: BSD 3-Clause
# @Copyright: Michael R. Blanton


from __future__ import division
from __future__ import print_function
from __future__ import absolute_import
from __future__ import unicode_literals

import os
os.environ['OPENBLAS_NUM_THREADS'] = '1'

import argparse
import sys
import multiprocessing
import numpy as np
import robostrategy.field
import sdss_access.path
import fitsio

sdss_path = sdss_access.path.Path(release='sdss5', preserve_envvars=True)


plan = None
cachename = None
noclobber = False

def cache_stars(indx):
    fieldid = allocate['fieldid'][indx]
    print("fieldid {f}: Prepping field".format(f=fieldid), flush=True)

    print("fieldid {f}: Reading bright stars".format(f=fieldid), flush=True)
    field_target_file = sdss_path.full('rsFieldTargets',
                                       plan=plan, observatory=observatory,
                                       fieldid=fieldid)
    field_prep_file = field_target_file.replace('rsFieldTargets',
                                                'rsFieldPrep')

    f = fitsio.FITS(field_prep_file)
    hdr = f[0].read_header()
    bsDict = robostrategy.field.read_bright_stars(fits=f)
    f.close()

    print("fieldid {f}: Writing bright stars".format(f=fieldid), flush=True)
    field_target_file = sdss_path.full('rsFieldTargets',
                                       plan=cachename, observatory=observatory,
                                       fieldid=fieldid)
    cache_file = field_target_file.replace('rsFieldTargets',
                                           'rsBrightStars')
    cache_file = field_target_file.replace('allocations',
                                           'bs-cache')

    robostrategy.field.write_bright_stars(filename=cache_file, bright_stars=bsDict,
                                          clobber=(noclobber == False))

    print("fieldid {f}: Done".format(f=fieldid), flush=True)
    return


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Prep file cadences based on allocation')

    parser.add_argument('-p', '--plan', dest='plan',
                        type=str, help='name of plan', required=True)
    parser.add_argument('-t', '--to-cache', dest='cachename',
                        type=str, help='name of cache directory', required=True)
    parser.add_argument('-o', '--observatory', dest='observatory',
                        type=str, help='apo or lco',
                        choices=['apo', 'lco'], required=True)
    parser.add_argument('-s', '--start', dest='start',
                        type=np.int32, help='field to start', required=False,
                        default=0)
    parser.add_argument('-e', '--end', dest='end',
                        type=np.int32, help='field to end', required=False,
                        default=-1)
    parser.add_argument('-C', '--no-clobber', dest='noclobber',
                        help='do not clobber', required=False,
                        default=False, action='store_true')
    parser.add_argument('-M', '--no-multiprocess', dest='nomultiprocess',
                        help='do not use multiprocess', required=False,
                        default=False, action='store_true')

    args = parser.parse_args()
    plan = args.plan
    cachename = args.cachename
    observatory = args.observatory
    start = args.start
    end = args.end
    noclobber = args.noclobber
    nomultiprocess = args.nomultiprocess

    allocate_file = sdss_path.full('rsAllocation', plan=plan,
                                   observatory=observatory)
    allocate = fitsio.read(allocate_file, ext='ALLOCATE')

    if(end < 0):
        end = allocate['fieldid'].max()
    ikeep = np.where((allocate['fieldid'] >= start) &
                     (allocate['fieldid'] <= end))[0]

    np.random.shuffle(ikeep)
    if(nomultiprocess):
        for i in ikeep:
            cache_stars(i)
    else:
        with multiprocessing.Pool() as pool:
            pool.map(cache_stars, ikeep)
