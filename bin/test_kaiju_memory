#!/usr/bin/env python
# encoding: utf-8
#
# @Author: Michael R. Blanton
# @Date: Aug 3, 2018
# @Filename: test_kaiju_memory
# @License: BSD 3-Clause
# @Copyright: Michael R. Blanton


from __future__ import division
from __future__ import print_function
from __future__ import absolute_import
from __future__ import unicode_literals

import os
import kaiju
import kaiju.utils
import numpy as np

_proc_status = '/proc/%d/status' % os.getpid()

_scale = {'kB': 1024.0, 'mB': 1024.0 * 1024.0,
          'KB': 1024.0, 'MB': 1024.0 * 1024.0}


def _VmB(VmKey):
    '''Private.
    '''
    global _proc_status, _scale
    # get pseudo file  /proc/<pid>/status
    try:
        t = open(_proc_status)
        v = t.read()
        t.close()
    except:
        return 0.0  # non-Linux?
    # get VmKey line e.g. 'VmRSS:  9999  kB\n ...'
    i = v.index(VmKey)
    v = v[i:].split(None, 3)  # whitespace
    if len(v) < 3:
        return 0.0  # invalid format?
    # convert Vm value to bytes
    return float(v[1]) * _scale[v[2]]


def memory(since=0.0):
    '''Return memory usage in bytes.
    '''
    return _VmB('VmSize:') - since


def resident(since=0.0):
    '''Return resident memory usage in bytes.
    '''
    return _VmB('VmRSS:') - since


def stacksize(since=0.0):
    '''Return stack size in bytes.
    '''
    return _VmB('VmStk:') - since


if __name__ == '__main__':

    smem = memory()
    np.random.seed(seed=5)
    for i in range(100):
        rg = kaiju.utils.robotGridFromFilledHex(1, 0.1)
        nobj = 5000

        tid = np.arange(nobj) + 1
        x = -350. + 700. * np.random.random(size=nobj)
        y = -350. + 700. * np.random.random(size=nobj)
        fiberID = 1 + np.int32(np.random.random(size=nobj) > 0.5)
        tlist = []
        for i in np.arange(nobj):
            tlist.append([tid[i], x[i], y[i], 1, fiberID[i]])
        rg.setTargetList(tlist)

        for k, r in enumerate(rg.allRobots):
            if(k == 4):
                hb = r.hasBoss
                ha = r.hasApogee
            r.setAlphaBeta(0., 180.)
        for k, t in enumerate(rg.targetList):
            if(k == 4):
                try:
                    tvr = t.validRobots
                except AttributeError:
                    tvr = t.robotInds
                    print("validRobots does not exist")
        n = rg.nRobots
        rtid = rg.getRobot(20).id
        r = rg.allRobots[10]
        try:
            tid = r.targetList[3].id
        except AttributeError:
            print("memFix uses indices not pointers")
            tid = r.targetList[3]
        rg.assignRobot2Target(10, tid)
        try:
            at = rg.allRobots[10].assignedTarget.id
        except AttributeError:
            print("memFix uses indices not pointers")
            at = rg.allRobots[10].assignedTarget
        try:
            ica = r.isCollidedWithAssigned()
        except AttributeError:
            print("memfix uses isCollidedWithAssignedInd()")
            ica = rg.isCollidedWithAssignedInd(10)
        try:
            r.unassign()
        except AttributeError:
            print("memfix uses rg.unassignRobot()")
            rg.unassignRobot(10)
        xr, yr = rg.allRobots[11].randomXYUniform()
        xx = rg.allRobots[11].xPos
        yy = rg.allRobots[11].yPos

        nextra = 20
        tid = np.arange(nextra) + 1 + nobj
        x = -350. + 700. * np.random.random(size=nextra)
        y = -350. + 700. * np.random.random(size=nextra)
        fiberID = 1 + np.int32(np.random.random(size=nextra) > 0.5)
        tlist = []
        for i in np.arange(nextra):
            tlist.append([tid[i], x[i], y[i], 1, fiberID[i]])
        rg.addTargetList(tlist)

        irobot = 150
        r = rg.allRobots[irobot]
        try:
            tid = r.targetList[3].id
        except AttributeError:
            print("memFix uses indices not pointers")
            tid = r.targetList[3]
        try:
            rg.assignRobot2Target(irobot, tid)
        except RuntimeError:
            print("assignRobot2Target() fails after addTargetList()")

        print("mem= {m:0.4f}".format(m=(memory() - smem) * 1.e-9))
