#!/usr/bin/env python
# encoding: utf-8
#
# @Author: Michael R. Blanton
# @Date: Aug 3, 2018
# @Filename: rs_allocate_plot
# @License: BSD 3-Clause
# @Copyright: Michael R. Blanton


import argparse
import os
import sys
import subprocess
import numpy as np
import matplotlib
import matplotlib.pyplot as plt
import fitsio
import robostrategy.allocate
import roboscheduler.cadence
import sdss_access.path

sdss_path = sdss_access.path.Path(release='sdss5', preserve_envvars=True)


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Plot field allocation results')

    parser.add_argument('-p', '--plan', dest='plan',
                        type=str, help='name of plan', required=True)
    parser.add_argument("-o", "--observatory", dest="observatory", type=str,
                        required=False, help="observatory ('apo' or 'lco')",
                        default='apo')
    parser.add_argument('-t', '--test', dest='test',
                        help='test', required=False,
                        default=False, action='store_true')

    args = parser.parse_args()
    plan = args.plan
    observatory = args.observatory
    test = args.test

    cadencelist = roboscheduler.cadence.CadenceList(skybrightness_only=True)
    cadences_file = sdss_path.full('rsCadences', plan=plan,
                                   observatory=observatory)
    cadencelist.fromfits(filename=cadences_file)

    allocate_file = sdss_path.full('rsAllocation', plan=plan,
                                   observatory=observatory)
    if(test):
        allocate_file = allocate_file.replace('rsAllocation', 'rsAllocationTest')
    allocate = robostrategy.allocate.AllocateLST(filename=allocate_file,
                                                 observatory=observatory)

    field_cadence_file = sdss_path.full('rsFieldCadences',
                                        plan=plan, observatory=observatory)
    cadence_mask, hdr = fitsio.read(field_cadence_file, header=True)

    cadences = [c.strip() for c in allocate.field_array['cadence']]
    base_cadences = []
    for c in cadences:
        if(c != 'none'):
            last = c.split('_')[-2]
            if(last == 'single'):
                base_cadence = "_".join(c.split('_')[0:-1])
            else:
                base_cadence = c
            base_cadences.append(base_cadence)
    base_cadences = np.array(base_cadences)
    print(np.unique(base_cadences))

    png_file = sdss_path.full('rsAllocationPng', plan=plan,
                              observatory=observatory, name='lst-all')
    if(test):
        png_file = png_file.replace('rsAllocation', 'rsAllocationTest')
    matplotlib.rcParams['figure.figsize'] = (8.0, 4.0)
    matplotlib.rcParams['font.size'] = 14
    allocate.plot_lst(title='Total time at {o}'.format(o=observatory.upper()))
    plt.tight_layout()
    plt.savefig(png_file)
    plt.clf()
    subprocess.run(['convert', png_file, '-trim', png_file])

    png_file = sdss_path.full('rsAllocationPng', plan=plan,
                              observatory=observatory, name='lst-dark')
    if(test):
        png_file = png_file.replace('rsAllocation', 'rsAllocationTest')
    matplotlib.rcParams['figure.figsize'] = (8.0, 4.0)
    if(observatory == 'apo'):
        loc=1
    else:
        loc=2
    allocate.plot_lst(iskybrightness=0, title='Dark time at {o}'.format(o=observatory.upper()), loc=loc)
    plt.tight_layout()
    plt.savefig(png_file)
    plt.clf()
    subprocess.run(['convert', png_file, '-trim', png_file])

    png_file = sdss_path.full('rsAllocationPng', plan=plan,
                              observatory=observatory, name='lst-bright')
    if(test):
        png_file = png_file.replace('rsAllocation', 'rsAllocationTest')
    matplotlib.rcParams['figure.figsize'] = (8.0, 4.0)
    allocate.plot_lst(iskybrightness=1, title='Bright time at {o}'.format(o=observatory.upper()))
    plt.tight_layout()
    plt.savefig(png_file)
    plt.clf()
    subprocess.run(['convert', png_file, '-trim', png_file])

    ncad = np.int32(hdr['NCAD'])
    vmax = None
    vmin = None
    cvmax = [None] * ncad
    cvmin = [None] * ncad

    for full in [True, False]:
        if(full):
            full_str = '-full'
        else:
            full_str = ''
        png_file = sdss_path.full('rsAllocationPng', plan=plan,
                                  observatory=observatory, name='radec' + full_str)
        if(test):
            png_file = png_file.replace('rsAllocation', 'rsAllocationTest')
        matplotlib.rcParams['figure.figsize'] = (8.0, 4.0)
        vmin, vmax = allocate.plot_fields(full=full, vmin=vmin, vmax=vmax)
        plt.title("All cadences")
        plt.savefig(png_file)
        plt.clf()
        subprocess.run(['convert', png_file, '-trim', png_file])
        
        png_file = sdss_path.full('rsAllocationPng', plan=plan,
                                  observatory=observatory, name='radec-dark' + full_str)
        if(test):
            png_file = png_file.replace('rsAllocation', 'rsAllocationTest')
        matplotlib.rcParams['figure.figsize'] = (8.0, 4.0)
        allocate.plot_fields(darkorbright='dark', full=full, vmin=vmin, vmax=vmax)
        plt.title("Dark cadences")
        plt.savefig(png_file)
        plt.clf()
        subprocess.run(['convert', png_file, '-trim', png_file])
        
        png_file = sdss_path.full('rsAllocationPng', plan=plan,
                                  observatory=observatory, name='radec-bright' + full_str)
        if(test):
            png_file = png_file.replace('rsAllocation', 'rsAllocationTest')
        matplotlib.rcParams['figure.figsize'] = (8.0, 4.0)
        allocate.plot_fields(darkorbright='bright', full=full, vmin=vmin, vmax=vmax)
        plt.title("Bright cadences")
        plt.savefig(png_file)
        plt.clf()
        subprocess.run(['convert', png_file, '-trim', png_file])
        
        png_file = sdss_path.full('rsAllocationPng', plan=plan,
                                  observatory=observatory, name='radec-labeled' + full_str)
        if(test):
            png_file = png_file.replace('rsAllocation', 'rsAllocationTest')
        matplotlib.rcParams['figure.figsize'] = (8.0, 4.0)
        allocate.plot_fields(label=True, full=full, vmin=vmin, vmax=vmax)
        plt.title("All cadences")
        plt.savefig(png_file)
        plt.clf()
        subprocess.run(['convert', png_file, '-trim', png_file])

        for icad in np.arange(ncad):
            field_cadence = hdr['CAD{icad}'.format(icad=icad)]
            last = field_cadence.split('_')[-1]
            if(last[0] == 'n'):
                field_cadence_base = "_".join(field_cadence.split('_')[0:-1])
            else:
                field_cadence_base = field_cadence
            print(field_cadence_base)
            name = 'radec-{field_cadence_base}'.format(
                field_cadence_base=field_cadence_base) + full_str
            png_file = sdss_path.full('rsAllocationPng', plan=plan,
                                      observatory=observatory, name=name)
            if(test):
                png_file = png_file.replace('rsAllocation', 'rsAllocationTest')
            indx = np.where(base_cadences == field_cadence_base)[0]
            print(len(indx))
            matplotlib.rcParams['figure.figsize'] = (8.0, 4.0)
            cvmin[icad], cvmax[icad] = allocate.plot_fields(indx=indx, full=full,
                                                            vmin=cvmin[icad],
                                                            vmax=cvmax[icad])
            plt.title(field_cadence_base)
            plt.savefig(png_file)
            plt.clf()
            subprocess.run(['convert', png_file, '-trim', png_file])

            name = 'radec-tried-{field_cadence_base}'.format(
                field_cadence_base=field_cadence_base) + full_str
            png_file = sdss_path.full('rsAllocationPng', plan=plan,
                                      observatory=observatory, name=name)
            if(test):
                png_file = png_file.replace('rsAllocation', 'rsAllocationTest')
            indx = np.where(cadence_mask[:, icad] > 0)[0]
            print(len(indx))
            matplotlib.rcParams['figure.figsize'] = (8.0, 4.0)
            allocate.plot_fields(indx=indx, full=full, vmin=cvmin[icad], vmax=cvmax[icad])
            plt.title(field_cadence_base)
            plt.savefig(png_file)
            plt.clf()
            subprocess.run(['convert', png_file, '-trim', png_file])
