#!/usr/bin/env python
# encoding: utf-8
#
# @Author: Michael R. Blanton
# @Date: Aug 3, 2018
# @Filename: rs_allocate_plot
# @License: BSD 3-Clause
# @Copyright: Michael R. Blanton


from __future__ import division
from __future__ import print_function
from __future__ import absolute_import
from __future__ import unicode_literals

import argparse
import os
import sys
import numpy as np
import matplotlib
import matplotlib.pyplot as plt
import fitsio
import robostrategy.allocate
import sdss_access.path

sdss_path = sdss_access.path.Path()


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Plot field allocation results')

    parser.add_argument('-p', '--plan', dest='plan',
                        type=str, help='name of plan', required=True)
    parser.add_argument("-o", "--observatory", dest="observatory", type=str,
                        required=False, help="observatory ('apo' or 'lco')",
                        default='apo')

    args = parser.parse_args()
    plan = args.plan
    observatory = args.observatory

    allocate_file = sdss_path.full('rsAllocation', plan=plan,
                                   observatory=observatory)
    allocate = robostrategy.allocate.AllocateLST(filename=allocate_file,
                                                 observatory=observatory)

    field_cadence_file = sdss_path.full('rsFieldCadences',
                                        plan=plan, observatory=observatory)
    cadence_mask, hdr = fitsio.read(field_cadence_file, header=True)

    cadences = [c.decode().strip() for c in allocate.field_array['cadence']]
    base_cadences = np.array([c.split('-')[0] for c in cadences])

    png_file = sdss_path.full('rsAllocationPng', plan=plan,
                              observatory=observatory, name='lst-all')
    matplotlib.rcParams['figure.figsize'] = (8.0, 4.0)
    allocate.plot_full(title='Total time')
    plt.savefig(png_file)
    plt.clf()

    png_file = sdss_path.full('rsAllocationPng', plan=plan,
                              observatory=observatory, name='lst-dark')
    matplotlib.rcParams['figure.figsize'] = (8.0, 4.0)
    allocate.plot_full(ilunation=0, title='Dark time')
    plt.savefig(png_file)
    plt.clf()

    png_file = sdss_path.full('rsAllocationPng', plan=plan,
                              observatory=observatory, name='lst-bright')
    matplotlib.rcParams['figure.figsize'] = (8.0, 4.0)
    allocate.plot_full(ilunation=1, title='Bright time')
    plt.savefig(png_file)
    plt.clf()

    png_file = sdss_path.full('rsAllocationPng', plan=plan,
                              observatory=observatory, name='radec')
    matplotlib.rcParams['figure.figsize'] = (8.0, 4.0)
    allocate.plot_fields()
    plt.title("All cadences")
    plt.savefig(png_file)
    plt.clf()

    ncad = np.int32(hdr['NCAD'])
    for icad in np.arange(ncad):
        field_cadence = hdr['CAD{icad}'.format(icad=icad)]
        base_field_cadence = field_cadence.split('-')[0]
        print(field_cadence)
        name = 'radec-{base_field_cadence}'.format(
            base_field_cadence=base_field_cadence)
        png_file = sdss_path.full('rsAllocationPng', plan=plan,
                                  observatory=observatory, name=name)
        indx = np.where(base_cadences == base_field_cadence)[0]
        matplotlib.rcParams['figure.figsize'] = (8.0, 4.0)
        allocate.plot_fields(indx=indx)
        plt.title(base_field_cadence)
        plt.savefig(png_file)
        plt.clf()
