#!/usr/bin/env python
# encoding: utf-8
#
# @Author: Michael R. Blanton
# @Date: Aug 3, 2018
# @Filename: rs_allocate_plot
# @License: BSD 3-Clause
# @Copyright: Michael R. Blanton


from __future__ import division
from __future__ import print_function
from __future__ import absolute_import
from __future__ import unicode_literals

import argparse
import os
import sys
import subprocess
import numpy as np
import matplotlib
import matplotlib.pyplot as plt
import fitsio
import robostrategy.allocate
import roboscheduler.cadence
import sdss_access.path

sdss_path = sdss_access.path.Path(release='sdss5', preserve_envvars=True)


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Plot field allocation results')

    parser.add_argument('-p', '--plan', dest='plan',
                        type=str, help='name of plan', required=True)
    parser.add_argument("-o", "--observatory", dest="observatory", type=str,
                        required=False, help="observatory ('apo' or 'lco')",
                        default='apo')

    args = parser.parse_args()
    plan = args.plan
    observatory = args.observatory

    cadencelist = roboscheduler.cadence.CadenceList(skybrightness_only=True)
    cadences_file = sdss_path.full('rsCadences', plan=plan,
                                   observatory=observatory)
    cadencelist.fromfits(filename=cadences_file)

    allocate_file = sdss_path.full('rsAllocation', plan=plan,
                                   observatory=observatory)
    allocate = robostrategy.allocate.AllocateLST(filename=allocate_file,
                                                 observatory=observatory)

    field_cadence_file = sdss_path.full('rsFieldCadences',
                                        plan=plan, observatory=observatory)
    cadence_mask, hdr = fitsio.read(field_cadence_file, header=True)

    cadences = [c.strip() for c in allocate.field_array['cadence']]
    base_cadences = []
    for c in cadences:
        last = c.split('_')[-2]
        if(last == 'single'):
            base_cadence = "_".join(c.split('_')[0:-1])
        else:
            base_cadence = c
        base_cadences.append(base_cadence)
    base_cadences = np.array(base_cadences)
    print(np.unique(base_cadences))

    png_file = sdss_path.full('rsAllocationPng', plan=plan,
                              observatory=observatory, name='lst-all')
    matplotlib.rcParams['figure.figsize'] = (8.0, 4.0)
    matplotlib.rcParams['font.size'] = 14
    allocate.plot_full(title='Total time at {o}'.format(o=observatory.upper()))
    plt.tight_layout()
    plt.savefig(png_file)
    plt.clf()
    subprocess.run(['convert', png_file, '-trim', png_file])

    png_file = sdss_path.full('rsAllocationPng', plan=plan,
                              observatory=observatory, name='lst-dark')
    matplotlib.rcParams['figure.figsize'] = (8.0, 4.0)
    if(observatory == 'apo'):
        loc=1
    else:
        loc=2
    allocate.plot_full(iskybrightness=0, title='Dark time at {o}'.format(o=observatory.upper()), loc=loc)
    plt.tight_layout()
    plt.savefig(png_file)
    plt.clf()
    subprocess.run(['convert', png_file, '-trim', png_file])

    png_file = sdss_path.full('rsAllocationPng', plan=plan,
                              observatory=observatory, name='lst-bright')
    matplotlib.rcParams['figure.figsize'] = (8.0, 4.0)
    allocate.plot_full(iskybrightness=1, title='Bright time at {o}'.format(o=observatory.upper()))
    plt.tight_layout()
    plt.savefig(png_file)
    plt.clf()
    subprocess.run(['convert', png_file, '-trim', png_file])

    png_file = sdss_path.full('rsAllocationPng', plan=plan,
                              observatory=observatory, name='radec')
    matplotlib.rcParams['figure.figsize'] = (8.0, 4.0)
    allocate.plot_fields()
    plt.title("All cadences")
    plt.savefig(png_file)
    plt.clf()
    subprocess.run(['convert', png_file, '-trim', png_file])

    png_file = sdss_path.full('rsAllocationPng', plan=plan,
                              observatory=observatory, name='radec-dark')
    matplotlib.rcParams['figure.figsize'] = (8.0, 4.0)
    allocate.plot_fields(darkorbright='dark')
    plt.title("Dark cadences")
    plt.savefig(png_file)
    plt.clf()
    subprocess.run(['convert', png_file, '-trim', png_file])

    png_file = sdss_path.full('rsAllocationPng', plan=plan,
                              observatory=observatory, name='radec-bright')
    matplotlib.rcParams['figure.figsize'] = (8.0, 4.0)
    allocate.plot_fields(darkorbright='bright')
    plt.title("Bright cadences")
    plt.savefig(png_file)
    plt.clf()
    subprocess.run(['convert', png_file, '-trim', png_file])

    png_file = sdss_path.full('rsAllocationPng', plan=plan,
                              observatory=observatory, name='radec-labeled')
    matplotlib.rcParams['figure.figsize'] = (8.0, 4.0)
    allocate.plot_fields(label=True)
    plt.title("All cadences")
    plt.savefig(png_file)
    plt.clf()
    subprocess.run(['convert', png_file, '-trim', png_file])

    ncad = np.int32(hdr['NCAD'])
    for icad in np.arange(ncad):
        field_cadence = hdr['CAD{icad}'.format(icad=icad)]
        last = field_cadence.split('_')[-1]
        if(last[0] == 'n'):
            field_cadence_base = "_".join(field_cadence.split('_')[0:-1])
        else:
            field_cadence_base = field_cadence
        print(field_cadence_base)
        name = 'radec-{field_cadence_base}'.format(
            field_cadence_base=field_cadence_base)
        png_file = sdss_path.full('rsAllocationPng', plan=plan,
                                  observatory=observatory, name=name)
        indx = np.where(base_cadences == field_cadence_base)[0]
        print(len(indx))
        matplotlib.rcParams['figure.figsize'] = (8.0, 4.0)
        allocate.plot_fields(indx=indx)
        plt.title(field_cadence_base)
        plt.savefig(png_file)
        plt.clf()
        subprocess.run(['convert', png_file, '-trim', png_file])

        name = 'radec-tried-{field_cadence_base}'.format(
            field_cadence_base=field_cadence_base)
        png_file = sdss_path.full('rsAllocationPng', plan=plan,
                                  observatory=observatory, name=name)
        indx = np.where(cadence_mask[:, icad] > 0)[0]
        print(len(indx))
        matplotlib.rcParams['figure.figsize'] = (8.0, 4.0)
        allocate.plot_fields(indx=indx)
        plt.title(field_cadence_base)
        plt.savefig(png_file)
        plt.clf()
        subprocess.run(['convert', png_file, '-trim', png_file])
