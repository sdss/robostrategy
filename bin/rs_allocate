#!/usr/bin/env python
# encoding: utf-8
#
# @Author: Michael R. Blanton
# @Date: Aug 3, 2018
# @Filename: rs_allocate
# @License: BSD 3-Clause
# @Copyright: Michael R. Blanton


from __future__ import division
from __future__ import print_function
from __future__ import absolute_import
from __future__ import unicode_literals

import argparse
import os
import sys
import numpy as np
import fitsio
import robostrategy.allocate
import robostrategy.slots
import robostrategy.params as params
import roboscheduler.cadence as cadence
import sdss_access.path

sdss_path = sdss_access.path.Path()


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Field assignment test for Galactic Genesis')

    parser.add_argument('-p', '--plan', dest='plan',
                        type=str, help='name of plan', required=True)
    parser.add_argument("-o", "--observatory", dest="observatory", type=str,
                        required=False, help="observatory ('apo' or 'lco')",
                        default='apo')

    args = parser.parse_args()
    plan = args.plan
    observatory = args.observatory

    rsParams = params.RobostrategyParams(plan=plan)

    cadencelist = cadence.CadenceList()
    cadences_file = sdss_path.full('rsCadences', plan=plan,
                                   observatory=observatory)
    cadencelist.fromfits(filename=cadences_file, unpickle=True)

    all_fields = rsParams.cfg.get('Allocation', 'AllFields').split()
    if('DarkPrefer' in rsParams.cfg['Allocation']):
        dark_prefer = np.float32(rsParams.cfg.get('Allocation', 'DarkPrefer'))
    else:
        dark_prefer = 1.

    fields_file = sdss_path.full('rsFields', plan=plan,
                                 observatory=observatory)
    fields_array = fitsio.read(fields_file)

    options_file = sdss_path.full('rsOptions', plan=plan,
                                  observatory=observatory)
    field_options = fitsio.read(options_file)
    nfields = len(field_options)

    field_slots_file = sdss_path.full('rsFieldSlots', plan=plan,
                                      observatory=observatory)
    field_slots = fitsio.read(field_slots_file)

    slots_file = sdss_path.full('rsSlots', plan=plan,
                                observatory=observatory)
    slots = robostrategy.slots.Slots(observatory=observatory)
    slots.fromfits(filename=slots_file)

    if('Cost' in rsParams.cfg['Allocation']):
        if(rsParams.cfg.get('Allocation', 'Cost') == 'A'):
            print("Use cost model A")
            allocate_class = robostrategy.allocate.AllocateLSTCostA
    else:
        print("Use default cost model")
        allocate_class = robostrategy.allocate.AllocateLST
    allocate = allocate_class(slots=slots,
                              field_options=field_options,
                              field_slots=field_slots,
                              fields=fields_array,
                              observatory=observatory,
                              observe_all_fields=all_fields,
                              dark_prefer=dark_prefer)
    allocate.construct()
    allocate.solve()

    allocate.construct(fix_cadence=True)
    allocate.solve(minimize_time=True)

    allocate_file = sdss_path.full('rsAllocation', plan=plan,
                                   observatory=observatory)
    allocate.tofits(allocate_file)
