#!/usr/bin/env python
# encoding: utf-8
#
# @Author: Michael R. Blanton
# @Date: Aug 3, 2018
# @Filename: rs_allocate
# @License: BSD 3-Clause
# @Copyright: Michael R. Blanton


from __future__ import division
from __future__ import print_function
from __future__ import absolute_import
from __future__ import unicode_literals

import argparse
import os
import sys
import numpy as np
import fitsio
import robostrategy
import robostrategy.allocate
import robostrategy.slots
import robostrategy.params as params
import roboscheduler.cadence as cadence
import sdss_access.path

sdss_path = sdss_access.path.Path(release='sdss5', preserve_envvars=True)


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Field assignment test for Galactic Genesis')

    parser.add_argument('-p', '--plan', dest='plan',
                        type=str, help='name of plan', required=True)
    parser.add_argument("-o", "--observatory", dest="observatory", type=str,
                        required=False, help="observatory ('apo' or 'lco')",
                        default='apo')

    args = parser.parse_args()
    plan = args.plan
    observatory = args.observatory

    rsParams = params.RobostrategyParams(plan=plan)

    if('Rotate' in rsParams.cfg['Fields']):
        rotate = True
        paname = rsParams.cfg['Fields']['Rotate']
    else:
        rotate = False
        paname = ''

    cadencelist = cadence.CadenceList()
    cadences_file = sdss_path.full('rsCadences', plan=plan,
                                   observatory=observatory)
    cadencelist.fromfits(filename=cadences_file, unpickle=True)

    all_fields = rsParams.cfg.get('Allocation', 'AllFields').split()
    if('AllCadences' in rsParams.cfg['Allocation']):
        all_cadences = rsParams.cfg.get('Allocation', 'AllCadences').split()
    else:
        all_cadences = []
    if('DarkPrefer' in rsParams.cfg['Allocation']):
        dark_prefer = np.float32(rsParams.cfg.get('Allocation', 'DarkPrefer'))
    else:
        dark_prefer = 1.

    fields_file = sdss_path.full('rsFields', plan=plan,
                                 observatory=observatory)
    if(rotate):
        fields_file = fields_file.replace('rsFields', 'rsFieldsRotated')
    fields_array = fitsio.read(fields_file)

    options_file = sdss_path.full('rsOptions', plan=plan,
                                  observatory=observatory)
    field_options = fitsio.read(options_file)
    foarr = fitsio.read(options_file, ext=3)
    focartons = np.array([x.strip() for x in foarr['carton']])
    foarr = fitsio.read(options_file, ext=2)
    focadences = np.array([x.strip() for x in foarr['cadence']])
    nfields = len(field_options)

    # Alterations to values in field options here
    try:
        rescale = 'percadence'
        if('PerCarton' in rsParams.cfg['ValueRescale']):
            rescale = 'percarton'
        if(rescale == 'percadence'):
            scales_pcd = np.ones(len(focadences))
            if('default' in rsParams.cfg['ValueRescale']):
                scales_pcd = (np.zeros(len(focadences)) +
                              np.float32(rsParams.cfg.get('ValueRescale',
                                                          'default')))
            for c in rsParams.cfg['ValueRescale']:
                indx = np.where(c == focadences)[0]
                if(len(indx) > 0):
                    scale = np.float32(rsParams.cfg.get('ValueRescale',
                                                        c))
                    scales_pcd[indx] = scale
            for indx in np.arange(len(field_options)):
                field_options['valuegot'][indx] = (
                    field_options['valuegot_pcd'][indx, :] *
                    scales_pcd).sum()
        if(rescale == 'percarton'):
            scales_pct = np.ones(len(focartons))
            if('default' in rsParams.cfg['ValueRescale']):
                scales_pct = (np.zeros(len(focartons)) +
                              np.float32(rsParams.cfg.get('ValueRescale',
                                                          'default')))
            for c in rsParams.cfg['ValueRescale']:
                if(c == 'default'):
                    scales_default = np.float32(rsParams.cfg.get('ValueRescale',
                                                                 c))
                indx = np.where(c == focartons)[0]
                if(len(indx) > 0):
                    scale = np.float32(rsParams.cfg.get('ValueRescale',
                                                        c))
                    scales_pct[indx] = scale
            for indx in np.arange(len(field_options)):
                field_options['valuegot'][indx] = (
                    field_options['valuegot_pct'][indx, :] *
                    scales_pct).sum()
            # for f in field_options:
             #    print("{c} : {v}",format(c=field_options['cadence'],
             #                             v=field_options['valuegot']),
             #          flush=True)
    except KeyError:
        print("No ValueRescale")

    minimum_ntargets = dict()
    amtstr = 'AllocationMinimumTargetsAt{obs}'.format(obs=observatory.upper())
    if(amtstr in rsParams.cfg):
        for carton in rsParams.cfg['Cartons']:
            if(carton in rsParams.cfg[amtstr]):
                minnum = rsParams.cfg.get(amtstr, carton)
                minimum_ntargets[carton] = minnum
    print(minimum_ntargets)

    field_slots_file = sdss_path.full('rsFieldSlots', plan=plan,
                                      observatory=observatory)
    field_slots = fitsio.read(field_slots_file)

    slots_file = sdss_path.full('rsSlots', plan=plan,
                                observatory=observatory)
    slots = robostrategy.slots.Slots(observatory=observatory)
    slots.fromfits(filename=slots_file)
    extra = rsParams.cfg.get('Allocation', 'ExtraTimeFactor')
    slots.slots = slots.slots * np.float32(extra)

    if('Cost' in rsParams.cfg['Allocation']):
        if(rsParams.cfg.get('Allocation', 'Cost') == 'A'):
            print("Use cost model A")
            allocate_class = robostrategy.allocate.AllocateLSTCostA
        if(rsParams.cfg.get('Allocation', 'Cost') == 'B'):
            print("Use cost model B")
            allocate_class = robostrategy.allocate.AllocateLSTCostB
        if(rsParams.cfg.get('Allocation', 'Cost') == 'C'):
            print("Use cost model C")
            allocate_class = robostrategy.allocate.AllocateLSTCostC
        if(rsParams.cfg.get('Allocation', 'Cost') == 'D'):
            print("Use cost model D")
            allocate_class = robostrategy.allocate.AllocateLSTCostD
        if(rsParams.cfg.get('Allocation', 'Cost') == 'E'):
            print("Use cost model E")
            allocate_class = robostrategy.allocate.AllocateLSTCostE
    else:
        print("Use default cost model")
        allocate_class = robostrategy.allocate.AllocateLST
    allocate = allocate_class(slots=slots,
                              field_options=field_options,
                              field_slots=field_slots,
                              fields=fields_array,
                              observatory=observatory,
                              observe_all_fields=all_fields,
                              observe_all_cadences=all_cadences,
                              dark_prefer=dark_prefer,
                              cartons=focartons,
                              minimum_ntargets=minimum_ntargets)
    allocate.construct()
    status = allocate.solve()

    if(status != 0):
        print("Allocation failed.")
        sys.exit(1)

    allocate.construct(fix_cadence=True)
    allocate.solve(minimize_time=True)

    allocate_file = sdss_path.full('rsAllocation', plan=plan,
                                   observatory=observatory)
    allocate.tofits(allocate_file)
