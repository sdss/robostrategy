#!/usr/bin/env python
# encoding: utf-8
#
# @Author: Michael R. Blanton
# @Date: Aug 3, 2018
# @Filename: rs_allocate
# @License: BSD 3-Clause
# @Copyright: Michael R. Blanton


from __future__ import division
from __future__ import print_function
from __future__ import absolute_import
from __future__ import unicode_literals

import argparse
import os
import sys
import fitsio
import robostrategy.allocate
import robostrategy.slots
import sdss_access.path

sdss_path = sdss_access.path.Path()


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Field assignment test for Galactic Genesis')

    parser.add_argument('-p', '--plan', dest='plan',
                        type=str, help='name of plan', required=True)
    parser.add_argument("-o", "--observatory", dest="observatory", type=str,
                        required=False, help="observatory ('apo' or 'lco')",
                        default='apo')

    args = parser.parse_args()
    plan = args.plan
    observatory = args.observatory

    fields_file = sdss_path.full('rsFields', plan=plan,
                                 observatory=observatory)
    fields_array = fitsio.read(fields_file)

    options_file = sdss_path.full('rsOptions', plan=plan,
                                  observatory=observatory)
    field_options = fitsio.read(options_file)
    nfields = len(field_options)

    field_slots_file = sdss_path.full('rsFieldSlots', plan=plan,
                                      observatory=observatory)
    field_slots = fitsio.read(field_slots_file)

    slots_file = sdss_path.full('rsSlots', plan=plan,
                                observatory=observatory)
    slots = robostrategy.slots.Slots(observatory=observatory)
    slots.fromfits(filename=slots_file)

    allocate = robostrategy.allocate.AllocateLST(slots=slots,
                                                 field_options=field_options,
                                                 field_slots=field_slots,
                                                 fields=fields_array)
    allocate.construct()
    allocate.solve()

    allocate_file = sdss_path.full('rsAllocation', plan=plan,
                                   observatory=observatory)
    allocate.tofits(allocate_file)
