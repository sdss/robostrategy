#!/usr/bin/env python
# encoding: utf-8
#
# @Author: Michael R. Blanton
# @Date: Aug 3, 2018
# @Filename: rs_cadences_extract
# @License: BSD 3-Clause
# @Copyright: Michael R. Blanton


from __future__ import division
from __future__ import print_function
from __future__ import absolute_import
from __future__ import unicode_literals

import argparse
import configparser
import os
import sys
import numpy as np
import fitsio
import roboscheduler.cadence as cadence
import sdss_access.path
import pickle

from sdssdb.peewee.sdss5db import database
database.set_profile('operations')

sdss_path = sdss_access.path.Path(release='sdss5')


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Retrieve cadences from targetdb')

    parser.add_argument('-n', '--ncadence', dest='ncadence',
                        type=np.int32, help='max number of cadences',
                        default=100)
    parser.add_argument('-p', '--plan', dest='plan',
                        type=str, help='name of plan', required=True)
    parser.add_argument('-o', '--observatory', dest='observatory',
                        type=str, help='apo or lco',
                        choices=['apo', 'lco'], required=True)

    args = parser.parse_args()
    plan = args.plan
    observatory = args.observatory

    cfgfile = os.path.join(os.getenv('ROBOSTRATEGY_DIR'), 'etc',
                           'robostrategy-{plan}.cfg'.format(plan=plan))
    cfg = configparser.ConfigParser(allow_no_value=True)
    cfg.optionxform = str
    cfg.read(cfgfile)

    cadencelist = cadence.CadenceList()
    cadencelist.reset()
    cadencelist.fromdb()

    cadence_change = dict()
    for c in cfg['Cadences']:
        adjustment = cfg.get('Cadences', c)
        if(adjustment == 'NoDelta'):
            for i in cadencelist.cadences[c].epoch_indx[:-1]:
                cadencelist.cadences[c].delta[i] = -1.
                cadencelist.cadences[c].delta_min[i] = -1.
                cadencelist.cadences[c].delta_max[i] = -1.
        else:
            tmpc = cadencelist.cadences[adjustment]
            cadencelist.add_cadence(name=c,
                                    nexposures=tmpc.nexposures,
                                    skybrightness=tmpc.skybrightness,
                                    delta=tmpc.delta,
                                    delta_min=tmpc.delta_min,
                                    delta_max=tmpc.delta_max,
                                    instrument=tmpc.instrument,
                                    version=tmpc.version)

    cadences_file = sdss_path.full('rsCadences', plan=plan,
                                   observatory=observatory)
    cadences_array = cadencelist.toarray()
    fitsio.write(cadences_file, cadences_array, clobber=True)

    # fix RV craziness
    for cn in cadencelist.cadences:
        if(('mwm_rv' in cn)):
            ii = np.where(cadencelist.cadences[cn].delta > 0.)[0]
            cadencelist.cadences[cn].delta_max[ii] = cadencelist.cadences[cn].delta[ii] + 1.

    # precompile RV consistency because it is expensive
    for cn in cadencelist.cadences:
        if(('mwm_rv' in cn) & ('_v' not in cn)):
            print(cn)
            c = cadencelist.cadence_consistency(cn, 'bhm_rm_174x8')
            c = cadencelist.cadence_consistency(cn, 'bhm_rm_lite4_100x8')
            c = cadencelist.cadence_consistency(cn, 'bhm_rm_lite5_100x8')

    pkl_file = cadences_file + ".pkl"
    fp = open(pkl_file, 'wb')
    pickle.dump(cadencelist._cadence_consistency, fp)
    fp.close()
