#!/usr/bin/env python
# encoding: utf-8
#
# @Author: Michael R. Blanton
# @Date: Sept 26, 2018
# @Filename: rs_assignments
# @License: BSD 3-Clause
# @Copyright: Michael R. Blanton


from __future__ import division
from __future__ import print_function
from __future__ import absolute_import
from __future__ import unicode_literals

import argparse
import os
import sys
import numpy as np
import fitsio
import roboscheduler.cadence as cadence
import robostrategy.field as field
import robostrategy.allocate
import robostrategy.params as params
import sdss_access.path

user_robo_data_dir = os.getenv('ROBOSTRATEGY_DATA')
sdss_path = sdss_access.path.Path(release='sdss5')
os.environ['ROBOSTRATEGY_DATA'] = user_robo_data_dir # Above call overwrites user specified directory


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Put assignment results for each target into a file')

    parser.add_argument('-p', '--plan', dest='plan',
                        type=str, help='name of plan', required=True)
    parser.add_argument('-o', '--observatory', dest='observatory',
                        type=str, help='apo or lco',
                        choices=['apo', 'lco'], required=True)

    args = parser.parse_args()
    plan = args.plan
    observatory = args.observatory

    rsParams = params.RobostrategyParams(plan=plan)
    if('Rotate' in rsParams.cfg['Fields']):
        rotate = True
        paname = rsParams.cfg['Fields']['Rotate']
    else:
        rotate = False
        paname = ''

    cadencelist = cadence.CadenceList()
    cadences_file = sdss_path.full('rsCadences', plan=plan,
                                   observatory=observatory)
    cadencelist.fromfits(filename=cadences_file, unpickle=True)

    allocate_file = sdss_path.full('rsAllocation', plan=plan,
                                   observatory=observatory)
    allocate = robostrategy.allocate.AllocateLST(filename=allocate_file,
                                                 observatory=observatory)

    assignment_dtype = np.dtype([('carton_to_target_pk', np.int64),
                                 ('rsid', np.int64),
                                 ('catalogid', np.int64),
                                 ('ra', np.float64),
                                 ('dec', np.float64),
                                 ('cadence', np.unicode_, 30),
                                 ('fieldid', np.int32),
                                 ('exposure', np.int32),
                                 ('robotID', np.int32),
                                 ('field_cadence', np.unicode_, 30)])

    nassignment = 1000000
    assignment = np.zeros(nassignment, dtype=assignment_dtype)

    count = 0
    for indx in np.arange(len(allocate.field_array)):
        fieldid = allocate.field_array['fieldid'][indx]
        if((fieldid % 10) == 0):
            print(fieldid)

        field_assigned_file = sdss_path.full('rsFieldAssignments',
                                             plan=plan,
                                             observatory=observatory,
                                             fieldid=fieldid)
        try:
            header = fitsio.read_header(field_assigned_file, ext=0)
            targets = fitsio.read(field_assigned_file, ext=1)
            assignments = fitsio.read(field_assigned_file, ext=2)
        except:
            header = None
            targets = None
            assignments = None

        if(assignments is not None):
            field_cadence = header['FCADENCE']
            nexposures = cadencelist.cadences[field_cadence].nexp_total
            for iexp in np.arange(nexposures):
                if(nexposures == 1):
                    robotIDs = assignments['robotID'][:]
                else:
                    robotIDs = assignments['robotID'][:, iexp]
                iassigned = np.where(robotIDs >= 0)[0]
                if(len(iassigned) > 0):
                    tmp_assignment = np.zeros(len(iassigned),
                                              dtype=assignment_dtype)
                    tmp_assignment['carton_to_target_pk'] = targets['carton_to_target_pk'][iassigned]
                    tmp_assignment['rsid'] = targets['rsid'][iassigned]
                    tmp_assignment['catalogid'] = targets['catalogid'][iassigned]
                    tmp_assignment['ra'] = targets['ra'][iassigned]
                    tmp_assignment['dec'] = targets['dec'][iassigned]
                    tmp_assignment['cadence'] = targets['cadence'][iassigned]
                    tmp_assignment['fieldid'] = fieldid
                    tmp_assignment['exposure'] = iexp
                    tmp_assignment['robotID'] = robotIDs[iassigned]
                    tmp_assignment['field_cadence'] = field_cadence
                    if(count + len(tmp_assignment) > nassignment):
                        assignment = np.append(assignment,
                                               np.zeros(nassignment,
                                                        dtype=assignment_dtype))
                        nassignment = nassignment * 2
                    assignment[count:
                               count + len(tmp_assignment)] = tmp_assignment
                    count = count + len(tmp_assignment)

    assignment = assignment[0:count]
    print(count)
    assigned_file = sdss_path.full('rsAssignments', plan=plan,
                                   observatory=observatory)
    fitsio.write(assigned_file, assignment, clobber=True)
