#!/usr/bin/env python
# encoding: utf-8
#
# @Author: Michael R. Blanton
# @Date: Sept 26, 2018
# @Filename: rs_assignments
# @License: BSD 3-Clause
# @Copyright: Michael R. Blanton


from __future__ import division
from __future__ import print_function
from __future__ import absolute_import
from __future__ import unicode_literals

import argparse
import os
import sys
import numpy as np
import fitsio
import roboscheduler.cadence as cadence
import robostrategy.field as field
import robostrategy.allocate
import robostrategy.params as params
import sdss_access.path

sdss_path = sdss_access.path.Path(release='sdss5')


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Put assignment results for each target into a file')

    parser.add_argument('-p', '--plan', dest='plan',
                        type=str, help='name of plan', required=True)
    parser.add_argument('-o', '--observatory', dest='observatory',
                        type=str, help='apo or lco',
                        choices=['apo', 'lco'], required=True)

    args = parser.parse_args()
    plan = args.plan
    observatory = args.observatory

    rsParams = params.RobostrategyParams(plan=plan)
    if('Rotate' in rsParams.cfg['Fields']):
        rotate = True
        paname = rsParams.cfg['Fields']['Rotate']
    else:
        rotate = False
        paname = ''

    cadencelist = cadence.CadenceList()
    cadences_file = sdss_path.full('rsCadences', plan=plan,
                                   observatory=observatory)
    cadencelist.fromfits(filename=cadences_file, unpickle=True)

    allocate_file = sdss_path.full('rsAllocation', plan=plan,
                                   observatory=observatory)
    allocate = robostrategy.allocate.AllocateLST(filename=allocate_file,
                                                 observatory=observatory)

    assignment_dtype = np.dtype([('pk', np.int64),
                                 ('ra', np.float64),
                                 ('dec', np.float64),
                                 ('cadence', cadence.fits_type),
                                 ('fieldid', np.int32),
                                 ('exposure', np.int32),
                                 ('field_cadence', cadence.fits_type)])

    nassignment = 1000000
    assignment = np.zeros(nassignment, dtype=assignment_dtype)

    count = 0
    for indx in np.arange(len(allocate.field_array)):
        fieldid = allocate.field_array['fieldid'][indx]
        if((fieldid % 10) == 0):
            print(fieldid)

        f = field.Field(racen=allocate.fields['racen'][indx],
                        deccen=allocate.fields['deccen'][indx],
                        observatory=observatory)
        if(rotate):
            f.pa = np.float32(allocate.fields[paname][indx])

        field_assigned_file = sdss_path.full('rsFieldAssignments',
                                             plan=plan,
                                             observatory=observatory,
                                             fieldid=fieldid)
        f.fromfits(field_assigned_file, make_grids=False)

        f.set_field_cadence(allocate.field_array['cadence'][indx].strip())

        if(f.assignments is not None):
            assignments = f.assignments
            nexposures = assignments.shape[1]
            for iexp in np.arange(nexposures):
                iassigned = np.where(assignments[:, iexp] >= 0)[0]
                if(len(iassigned) > 0):
                    tassigned = [f.targetID2indx[x]
                                 for x in assignments[iassigned, iexp]]
                    tmp_assignment = np.zeros(len(tassigned),
                                              dtype=assignment_dtype)
                    tmp_assignment['pk'] = f.target_pk[tassigned]
                    tmp_assignment['ra'] = f.target_ra[tassigned]
                    tmp_assignment['dec'] = f.target_dec[tassigned]
                    tmp_assignment['cadence'] = f.target_cadence[tassigned]
                    tmp_assignment['fieldid'] = fieldid
                    tmp_assignment['exposure'] = iexp
                    tmp_assignment['field_cadence'] = f.field_cadence
                    if(count + len(tmp_assignment) > nassignment):
                        assignment = np.append(assignment,
                                               np.zeros(nassignment,
                                                        dtype=assignment_dtype))
                        nassignment = nassignment * 2
                    assignment[count:
                               count + len(tmp_assignment)] = tmp_assignment
                    count = count + len(tmp_assignment)

    assignment = assignment[0:count]
    print(count)
    assigned_file = sdss_path.full('rsAssignments', plan=plan,
                                   observatory=observatory)
    fitsio.write(assigned_file, assignment, clobber=True)
