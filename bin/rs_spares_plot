#!/usr/bin/env python
# encoding: utf-8
#
# @Author: Michael R. Blanton
# @Date: Sept 26, 2018
# @Filename: rs_spares
# @License: BSD 3-Clause
# @Copyright: Michael R. Blanton


from __future__ import division
from __future__ import print_function
from __future__ import absolute_import
from __future__ import unicode_literals

import argparse
import os
import sys
import subprocess
import numpy as np
import sdss_access.path
import fitsio
import matplotlib.pyplot as plt
import matplotlib
import mpl_toolkits.basemap as basemap

matplotlib.rcParams['figure.figsize'] = (8.0, 4.0)

sdss_path = sdss_access.path.Path(release='sdss5', preserve_envvars=True)

def convert_radec(m, ra, dec):
    return m(((360. - ra) + 180.) % 360., dec, inverse=False)


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Final assignment based on allocation')

    parser.add_argument('-p', '--plan', dest='plan',
                        type=str, help='name of plan', required=True)
    parser.add_argument('-o', '--observatory', dest='observatory',
                        type=str, help='apo or lco or both',
                        choices=['apo', 'lco', 'both'], required=True)
    parser.add_argument('-O', '--open', dest='opentargets',
                        help='set to read open target results',
                        default=False, required=False,
                        action='store_true')
    parser.add_argument('-F', '--filler', dest='filler',
                        help='set to read filler target results',
                        default=False, required=False,
                        action='store_true')
    parser.add_argument('-K', '--complete', dest='complete',
                        help='set to read complete target results',
                        default=False, required=False,
                        action='store_true')
    parser.add_argument('-R', '--reassign', dest='reassign',
                        help='set to read reassign results',
                        default=False, required=False,
                        action='store_true')
    parser.add_argument('-X', '--final', dest='final',
                        help='set to read final results',
                        default=False, required=False,
                        action='store_true')

    args = parser.parse_args()
    plan = args.plan
    observatory = args.observatory
    opentargets = args.opentargets
    filler = args.filler
    complete = args.complete
    reassign = args.reassign
    final = args.final

    if(observatory == 'both'):
        observatories = ['apo', 'lco']
    else:
        observatories = [observatory]

    if(int(opentargets) + int(filler) + int(complete) + int(reassign) > 1):
        print("Only one of -O, -R, -F, -K can be set!")
        sys.exit()

    base = 'rsSpares'
    if(opentargets):
        base = 'rsSparesOpen'
    if(filler):
        base = 'rsSparesFiller'
    if(complete):
        base = 'rsSparesComplete'
    if(reassign):
        base = 'rsSparesReassign'
    if(final):
        base = 'final/rsSparesFinal'


    spares = None
    fields = None
    for obs in observatories:
        infile = '{base}-{p}-{o}.fits'.format(o=obs, p=plan, base=base)
        tmp_spares = fitsio.read(infile)
        fields_file = os.path.join(os.getenv('ROBOSTRATEGY_DATA'),
                                   'allocations', plan,
                                   'rsFieldsRotated-{p}-{o}.fits'.format(o=obs, p=plan))
        tmp_fields = fitsio.read(fields_file)
        if(spares is None):
            spares = tmp_spares
            fields = tmp_fields
        else:
            spares = np.append(spares, tmp_spares)
            fields = np.append(fields, tmp_fields)

    types = np.array([t[0:2] for t in fields['type']])
    ikeep = np.where(types != 'RM')[0]
    spares = spares[ikeep]

    for fiberType in ['boss', 'apogee']:

        lon_0 = 270.
    
        m = basemap.Basemap(projection='moll', lon_0=lon_0, resolution='c',
                            celestial=True)
        xx, yy = convert_radec(m, spares['racen'], spares['deccen'])
        
        png_file = '{base}-{p}-{o}-{fiberType}.png'.format(o=observatory,
                                                           p=plan,
                                                           base=base,
                                                           fiberType=fiberType)

        # draw parallels and meridians.
        m.drawparallels(np.arange(-90., 120., 30.),
                        linewidth=0.5,
                        labels=[0, 0, 0, 0],
                        labelstyle='+/-')
        m.drawmeridians(np.arange(0., 420., 60.), linewidth=0.5)
        m.drawmapboundary(fill_color='#d0d0d0')

        name = 'n{ft}_spare'.format(ft=fiberType)
        spval = np.float32(spares[name])
        iz = np.where(spval == 0)[0]
        spval[iz] = 0.1
        spval = np.log10(spval)
        plt.scatter(xx, yy, s=3, c=spval, vmin=-1.,
                    vmax=3.99, cmap='Blues')
        title = 'Spare {ft} (after science allocation)'
        if(opentargets):
            title = 'Spare {ft} (after open fiber allocation)'
        if(filler):
            title = 'Spare {ft} (after filler fiber allocation)'
        if(complete):
            title = 'Spare {ft} (after complete fiber allocation)'
        if(reassign):
            title = 'Spare {ft} (after reassignment)'
        if(final):
            title = 'Spare {ft} (total of {t:,d})'
        title = title.format(ft=fiberType.upper(),
                             t=np.int32(spares[name].sum()))
        plt.title(title)

        colorbar_label = '$log_{10} N$'
        cb = plt.colorbar()
        cb.set_label(colorbar_label)
    
        plt.savefig(png_file)
        subprocess.run(['convert', png_file, '-trim', png_file])
        plt.clf()
        
        png_file = png_file.replace('rsSpares', 'rsUnused')

        # draw parallels and meridians.
        m.drawparallels(np.arange(-90., 120., 30.),
                        linewidth=0.5,
                        labels=[0, 0, 0, 0],
                        labelstyle='+/-')
        m.drawmeridians(np.arange(0., 420., 60.), linewidth=0.5)
        m.drawmapboundary(fill_color='#d0d0d0')

        name = 'n{ft}_unused'.format(ft=fiberType)
        spval = np.float32(spares[name])
        iz = np.where(spval == 0)[0]
        spval[iz] = 0.1
        spval = np.log10(spval)
        plt.scatter(xx, yy, s=3, c=spval, vmin=-1., vmax=3.99, cmap='Blues')
        title = 'Unused {ft} (after science allocation)'
        if(opentargets):
            title = 'Unused {ft} (after open fiber allocation)'
        if(filler):
            title = 'Unused {ft} (after filler fiber allocation)'
        if(complete):
            title = 'Unused {ft} (after complete fiber allocation)'
        if(reassign):
            title = 'Unused {ft} (after reassignment)'
        if(final):
            title = 'Unused {ft} (total of {t:,d})'
        title = title.format(ft=fiberType.upper(),
                             t=np.int32(spares[name].sum()))
        plt.title(title)

        colorbar_label = '$log_{10} N$'
        cb = plt.colorbar()
        cb.set_label(colorbar_label)
    
        plt.savefig(png_file)
        subprocess.run(['convert', png_file, '-trim', png_file])
        plt.clf()
