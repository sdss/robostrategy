#!/usr/bin/env python
# encoding: utf-8
#
# @Author: Michael R. Blanton
# @Date: Aug 7, 2018
# @Filename: rs_slots
# @License: BSD 3-Clause
# @Copyright: Michael R. Blanton


from __future__ import division
from __future__ import print_function
from __future__ import absolute_import
from __future__ import unicode_literals

import os
import sys
import argparse
import numpy as np
import robostrategy.slots
import robostrategy.params as params
import sdss_access.path

sdss_path = sdss_access.path.Path(release='sdss5', preserve_envvars=True)


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='create rsSlots file')

    parser.add_argument('-p', '--plan', dest='plan',
                        type=str, help='name of plan', required=True)
    parser.add_argument("-o", "--observatory", dest="observatory", type=str,
                        required=False, help="observatory ('apo' or 'lco')",
                        default='apo')

    args = parser.parse_args()
    plan = args.plan
    observatory = args.observatory

    rsParams = params.RobostrategyParams(plan=plan)
    schedule = rsParams.cfg.get('Allocation', 'Schedule')
    if(observatory == 'apo'):
        fclear = rsParams.cfg.get('Allocation', 'fClearAPO')
    else:
        fclear = rsParams.cfg.get('Allocation', 'fClearLCO')

    if('ExposureTime' in rsParams.cfg['Allocation']):
        exptime = np.float32(rsParams.cfg.get('Allocation', 'ExposureTime'))
    else:
        exptime = 15.

    if('ExposureOverhead' in rsParams.cfg['Allocation']):
        exposure_overhead = np.float32(rsParams.cfg.get('Allocation',
                                                        'ExposureOverhead'))
    else:
        exposure_overhead = 3.

    slots = robostrategy.slots.Slots(observatory=observatory,
                                     schedule=schedule, fclear=fclear,
                                     exptime=exptime / 60.,
                                     exposure_overhead=exposure_overhead / 60.)
    slots.fill()
    slots_file = sdss_path.full('rsSlots', plan=plan, observatory=observatory)
    slots.tofits(filename=slots_file)
