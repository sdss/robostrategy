#!/usr/bin/env python
# encoding: utf-8
#
# @Author: Michael R. Blanton
# @Date: Sept 26, 2018
# @Filename: rs_spares
# @License: BSD 3-Clause
# @Copyright: Michael R. Blanton


from __future__ import division
from __future__ import print_function
from __future__ import absolute_import
from __future__ import unicode_literals

import argparse
import os
import sys
import multiprocessing
import numpy as np
import roboscheduler.cadence as cadence
import robostrategy.field as field
import robostrategy.allocate
import robostrategy.header
import sdss_access.path
import fitsio

sdss_path = sdss_access.path.Path(release='sdss5', preserve_envvars=True)

noclobber = False


def spares_file_name(fieldid=None):
    base = 'rsFieldSpares'
    tdir = 'targets'
    if(opentargets):
        base = 'rsFieldSparesOpen'
    if(filler):
        base = 'rsFieldSparesFiller'
    if(complete):
        base = 'rsFieldSparesComplete'
    if(final):
        tdir = 'final'
        base = 'rsFieldSparesFinal'
    if(reassign):
        base = 'rsFieldSparesReassign'
    spares_file = '{tdir}/{base}-{plan}-{obs}-{fieldid}.fits'.format(plan=plan, obs=observatory, fieldid=fieldid, base=base, tdir=tdir)
    return(spares_file)


def count_spares(indx):
    """Count spares for a field

    Parameters:
    ----------

    indx : int
        index into allocate.field_array

    Notes:
    -----

    Writes rsFieldSpares file

"""
    fieldid = fieldids[indx]
    if((fieldid % 1) == 0):
        print(fieldid, flush=True)

    spares_file = spares_file_name(fieldid=fieldid)

    if((noclobber is True) & os.path.isfile(spares_file)):
        print("Fieldid {f} exists already".format(f=fieldid))
        return

    field_target_file = sdss_path.full('rsFieldAssignments',
                                       plan=plan, observatory=observatory,
                                       fieldid=fieldid)
    if(final):
        field_target_file = field_target_file.replace('targets/rsFieldAssignments',
                                                      'final/rsFieldAssignmentsFinal')
    if(opentargets):
        field_target_file = field_target_file.replace('rsFieldAssignments',
                                                      'rsFieldAssignmentsOpen')
    if(filler):
        field_target_file = field_target_file.replace('rsFieldAssignments',
                                                      'rsFieldAssignmentsFiller')
    if(complete):
        field_target_file = field_target_file.replace('rsFieldAssignments',
                                                      'rsFieldAssignmentsComplete')
    if(reassign):
        field_target_file = field_target_file.replace('rsFieldAssignments',
                                                      'rsFieldReassignments')

    f = field.Field(filename=field_target_file, verbose=True, allgrids=False)

    spares_dtype = [('fieldid', np.int32),
                    ('racen', np.float64),
                    ('deccen', np.float64),
                    ('nboss_spare', np.int32, f.field_cadence.nexp_total),
                    ('napogee_spare', np.int32, f.field_cadence.nexp_total),
                    ('nboss_unused', np.int32, f.field_cadence.nexp_total),
                    ('napogee_unused', np.int32, f.field_cadence.nexp_total),
                    ('nboss_science', np.int32, f.field_cadence.nexp_total),
                    ('napogee_science', np.int32, f.field_cadence.nexp_total)]

    spare = np.zeros(1, dtype=spares_dtype)

    spare['fieldid'] = fieldid
    ifield = np.where(allocate.fields['fieldid'] == fieldid)[0][0]
    spare['racen'] = allocate.fields['racen'][ifield]
    spare['deccen'] = allocate.fields['deccen'][ifield]

    nboss_spare, napogee_spare, nboss_unused, napogee_unused = f.count_spares(return_unused=True)
    spare['nboss_spare'] = nboss_spare
    spare['napogee_spare'] = napogee_spare
    spare['nboss_unused'] = nboss_unused
    spare['napogee_unused'] = napogee_unused

    if(f.field_cadence.nexp_total > 1):
        for iexp in np.arange(f.field_cadence.nexp_total):
            iok = np.where(f._robot2indx[:, iexp] >= 0)[0]
            cindx = f._robot2indx[iok, iexp]
            iboss = np.where((f.targets['category'][cindx] == 'science') &
                             (f.targets['fiberType'][cindx] == 'BOSS'))[0]
            spare['nboss_science'][0, iexp] = len(iboss)
            iapogee = np.where((f.targets['category'][cindx] == 'science') &
                               (f.targets['fiberType'][cindx] == 'APOGEE'))[0]
            spare['napogee_science'][0, iexp] = len(iapogee)
    else:
        iok = np.where(f._robot2indx[:] >= 0)[0]
        cindx = f._robot2indx[iok]
        iboss = np.where((f.targets['category'][cindx] == 'science') &
                         (f.targets['fiberType'][cindx] == 'BOSS'))[0]
        spare['nboss_science'][0] = len(iboss)
        iapogee = np.where((f.targets['category'][cindx] == 'science') &
                           (f.targets['fiberType'][cindx] == 'APOGEE'))[0]
        spare['napogee_science'][0] = len(iapogee)
            
    hdr = robostrategy.header.rsheader()
    fitsio.write(spares_file, spare, header=hdr, clobber=True)
    return


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Counts spare fibers in fields')

    parser.add_argument('-p', '--plan', dest='plan',
                        type=str, help='name of plan', required=True)
    parser.add_argument('-o', '--observatory', dest='observatory',
                        type=str, help='apo or lco',
                        choices=['apo', 'lco'], required=True)
    parser.add_argument('-s', '--start', dest='start',
                        type=np.int32, help='field to start', required=False,
                        default=0)
    parser.add_argument('-e', '--end', dest='end',
                        type=np.int32, help='field to end', required=False,
                        default=-1)
    parser.add_argument('-C', '--no-clobber', dest='noclobber',
                        help='do not clobber', required=False,
                        default=False, action='store_true')
    parser.add_argument('-O', '--open', dest='opentargets',
                        help='set to read open target results',
                        default=False, required=False,
                        action='store_true')
    parser.add_argument('-F', '--filler', dest='filler',
                        help='set to read filler target results',
                        default=False, required=False,
                        action='store_true')
    parser.add_argument('-K', '--complete', dest='complete',
                        help='set to read complete target results',
                        default=False, required=False,
                        action='store_true')
    parser.add_argument('-R', '--reassign', dest='reassign',
                        help='set to read reassign results',
                        default=False, required=False,
                        action='store_true')
    parser.add_argument('-X', '--final', dest='final',
                        help='set to read final results',
                        default=False, required=False,
                        action='store_true')

    args = parser.parse_args()
    plan = args.plan
    observatory = args.observatory
    start = args.start
    end = args.end
    opentargets = args.opentargets
    filler = args.filler
    reassign = args.reassign
    complete = args.complete
    final = args.final
    noclobber = args.noclobber

    if(int(opentargets) + int(filler) + int(complete) + int(reassign) + int(final) > 1):
        print("Only one of -O, -R, -F, -K, -X can be set!")
        sys.exit()

    cadencelist = cadence.CadenceList(skybrightness_only=True)
    cadences_file = sdss_path.full('rsCadences', plan=plan,
                                   observatory=observatory)
    if(final):
        cadences_file = cadences_file.replace('rsCadences',
                                              'final/rsCadencesFinal')
    cadencelist.fromfits(filename=cadences_file, unpickle=True)

    allocate_file = sdss_path.full('rsAllocation', plan=plan,
                                   observatory=observatory)
    if(final):
        allocate_file = allocate_file.replace('rsAllocation', 'final/rsAllocationFinal')
    allocate = robostrategy.allocate.AllocateLST(filename=allocate_file,
                                                 observatory=observatory)

    fieldids = np.unique(allocate.field_array['fieldid'])

    if(end < 0):
        end = fieldids.max()
    ikeep = np.where((fieldids >= start) & (fieldids <= end))[0]

    spares_dtype = [('fieldid', np.int32),
                    ('racen', np.float64),
                    ('deccen', np.float64),
                    ('nboss_spare', np.int32),
                    ('napogee_spare', np.int32),
                    ('nboss_unused', np.int32),
                    ('napogee_unused', np.int32),
                    ('nboss_science', np.int32),
                    ('napogee_science', np.int32),
                    ('nboss_total', np.int32),
                    ('napogee_total', np.int32)]

    spares_exp_dtype = [('fieldid', np.int32),
                        ('iexp', np.int32),
                        ('racen', np.float64),
                        ('deccen', np.float64),
                        ('nboss_spare', np.int32),
                        ('napogee_spare', np.int32),
                        ('nboss_unused', np.int32),
                        ('napogee_unused', np.int32),
                        ('nboss_science', np.int32),
                        ('napogee_science', np.int32)]

    with multiprocessing.Pool(32) as pool:
        pool.map(count_spares, ikeep)

    spares = np.zeros(len(ikeep), dtype=spares_dtype)
    spares_exp = np.zeros(allocate.field_array['nfilled'].sum(),
                          dtype=spares_exp_dtype)

    ispares_exp = 0
    for indx in ikeep:
        fieldid = fieldids[indx]
        spares_file = spares_file_name(fieldid=fieldid)
        cspares = fitsio.read(spares_file)

        try:
            nexp = len(cspares['nboss_spare'][0, :])
        except IndexError:
            nexp = 1

        spares_exp['fieldid'][ispares_exp:ispares_exp + nexp] = fieldid
        spares_exp['iexp'][ispares_exp:ispares_exp + nexp] = np.arange(nexp, dtype=np.int32)
        spares_exp['racen'][ispares_exp:ispares_exp + nexp] = cspares['racen'][0]
        spares_exp['deccen'][ispares_exp:ispares_exp + nexp] = cspares['deccen'][0]
        spares_exp['nboss_spare'][ispares_exp:ispares_exp + nexp] = cspares['nboss_spare'][0]
        spares_exp['napogee_spare'][ispares_exp:ispares_exp + nexp] = cspares['napogee_spare'][0]
        spares_exp['nboss_science'][ispares_exp:ispares_exp + nexp] = cspares['nboss_science'][0]
        spares_exp['napogee_science'][ispares_exp:ispares_exp + nexp] = cspares['napogee_science'][0]
        ispares_exp = ispares_exp + nexp

        spares['fieldid'][indx] = fieldid
        spares['racen'][indx] = cspares['racen'][0]
        spares['deccen'][indx] = cspares['deccen'][0]
        spares['nboss_spare'][indx] = cspares['nboss_spare'].sum()
        spares['napogee_spare'][indx] = cspares['napogee_spare'].sum()
        spares['nboss_unused'][indx] = cspares['nboss_unused'].sum()
        spares['napogee_unused'][indx] = cspares['napogee_unused'].sum()
        spares['nboss_science'][indx] = cspares['nboss_science'].sum()
        spares['napogee_science'][indx] = cspares['napogee_science'].sum()
        spares['nboss_total'][indx] = 500 * nexp
        spares['napogee_total'][indx] = 300 * nexp

    base = 'rsSpares'
    if(opentargets):
        base = 'rsSparesOpen'
    if(filler):
        base = 'rsSparesFiller'
    if(complete):
        base = 'rsSparesComplete'
    if(reassign):
        base = 'rsSparesReassign'
    if(final):
        base = 'final/rsSparesFinal'
    outfile = '{base}-{p}-{o}.fits'.format(o=observatory, p=plan, base=base)
    hdr = robostrategy.header.rsheader()
    fitsio.write(outfile, spares, header=hdr, clobber=True)

    base = 'rsSparesExp'
    if(opentargets):
        base = 'rsSparesExpOpen'
    if(filler):
        base = 'rsSparesExpFiller'
    if(complete):
        base = 'rsSparesExpComplete'
    if(reassign):
        base = 'rsSparesExpReassign'
    if(final):
        base = 'final/rsSparesExpFinal'
    outfile = '{base}-{p}-{o}.fits'.format(o=observatory, p=plan, base=base)
    hdr = robostrategy.header.rsheader()
    fitsio.write(outfile, spares_exp, header=hdr, clobber=True)
