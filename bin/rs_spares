#!/usr/bin/env python
# encoding: utf-8
#
# @Author: Michael R. Blanton
# @Date: Sept 26, 2018
# @Filename: rs_spares
# @License: BSD 3-Clause
# @Copyright: Michael R. Blanton


from __future__ import division
from __future__ import print_function
from __future__ import absolute_import
from __future__ import unicode_literals

import argparse
import os
import sys
import numpy as np
import roboscheduler.cadence as cadence
import robostrategy.field as field
import robostrategy.allocate
import sdss_access.path
import fitsio

sdss_path = sdss_access.path.Path(release='sdss5')


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Final assignment based on allocation')

    parser.add_argument('-p', '--plan', dest='plan',
                        type=str, help='name of plan', required=True)
    parser.add_argument('-o', '--observatory', dest='observatory',
                        type=str, help='apo or lco',
                        choices=['apo', 'lco'], required=True)

    args = parser.parse_args()
    plan = args.plan
    observatory = args.observatory

    cadencelist = cadence.CadenceList()
    cadences_file = sdss_path.full('rsCadences', plan=plan,
                                   observatory=observatory)
    cadencelist.fromfits(filename=cadences_file)

    allocate_file = sdss_path.full('rsAllocation', plan=plan,
                                   observatory=observatory)
    allocate = robostrategy.allocate.AllocateLST(filename=allocate_file,
                                                 observatory=observatory)

    spares_dtype = [('fieldid', np.int32),
                    ('racen', np.float64),
                    ('deccen', np.float64),
                    ('nboss_spare', np.int32),
                    ('napogee_spare', np.int32)]
    spares = np.zeros(len(allocate.field_array), dtype=spares_dtype)

    for indx in np.arange(len(allocate.field_array)):
        fieldid = allocate.field_array['fieldid'][indx]
        if((fieldid % 1) == 0):
            print(fieldid)

        f = field.Field(racen=allocate.fields['racen'][indx],
                        deccen=allocate.fields['deccen'][indx],
                        observatory=observatory)

        field_target_file = sdss_path.full('rsFieldAssignments',
                                           plan=plan, observatory=observatory,
                                           fieldid=fieldid)
        f.fromfits(field_target_file)

        spares['fieldid'][indx] = fieldid
        spares['racen'][indx] = allocate.fields['racen'][indx]
        spares['deccen'][indx] = allocate.fields['deccen'][indx]
        if(f.assignments is not None):
            iapogee = np.where(f.robot.apogee)[0]
            iboss = np.where(f.robot.boss)[0]
            ina_apogee = np.where(f.assignments[iapogee, :] == -1)[0]
            ina_boss = np.where(f.assignments[iboss, :] == -1)[0]
            spares['nboss_spare'][indx] = len(ina_boss)
            spares['napogee_spare'][indx] = len(ina_apogee)

    fitsio.write('rsSpares-{o}-{p}.fits'.format(o=observatory,
                                                p=plan), spares)
