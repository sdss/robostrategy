#!/usr/bin/env python
# encoding: utf-8
#
# @Author: Michael R. Blanton
# @Date: Sept 26, 2018
# @Filename: rs_spares
# @License: BSD 3-Clause
# @Copyright: Michael R. Blanton


from __future__ import division
from __future__ import print_function
from __future__ import absolute_import
from __future__ import unicode_literals

import argparse
import os
import sys
import multiprocessing
import numpy as np
import roboscheduler.cadence as cadence
import robostrategy.field as field
import robostrategy.allocate
import sdss_access.path
import fitsio

sdss_path = sdss_access.path.Path(release='sdss5', preserve_envvars=True)


def count_spares(indx):
    fieldid = allocate.field_array['fieldid'][indx]
    if((fieldid % 1) == 0):
        print(fieldid, flush=True)

    field_target_file = sdss_path.full('rsFieldAssignments',
                                       plan=plan, observatory=observatory,
                                       fieldid=fieldid)
    f = field.Field(filename=field_target_file, allgrids=False)

    spares_dtype = [('fieldid', np.int32),
                    ('racen', np.float64),
                    ('deccen', np.float64),
                    ('nboss_spare', np.int32, f.field_cadence.nexp_total),
                    ('napogee_spare', np.int32, f.field_cadence.nexp_total)]
    spare = np.zeros(1, dtype=spares_dtype)

    spare['fieldid'] = fieldid
    spare['racen'] = allocate.fields['racen'][indx]
    spare['deccen'] = allocate.fields['deccen'][indx]
    hasApogee = np.array([f.mastergrid.robotDict[x + 1].hasApogee
                          for x in range(500)])
    iapogee = np.where(hasApogee)[0]
    if(f.assignments is not None):
        nun_apogee = np.zeros(f.field_cadence.nexp_total, dtype=np.int32)
        nun_boss = np.zeros(f.field_cadence.nexp_total, dtype=np.int32)
        for iexp in np.arange(f.field_cadence.nexp_total,
                              dtype=np.int32):
            ina_apogee = np.where(f._robot2indx[iapogee, iexp] < 0)[0]
            ina_boss = np.where(f._robot2indx[:, iexp] < 0)[0]
            nun_apogee[iexp] = len(ina_apogee)
            nun_boss[iexp] = len(ina_boss)
        
        nsp_apogee_standard = (f.calibrations['standard_apogee'] -
                               f.required_calibrations['standard_apogee'])
        iz = np.where(nsp_apogee_standard < 0)[0]
        nsp_apogee_standard[iz] = 0

        nsp_apogee_sky = (f.calibrations['sky_apogee'] -
                          f.required_calibrations['sky_apogee'])
        iz = np.where(nsp_apogee_sky < 0)[0]
        nsp_apogee_sky[iz] = 0

        nsp_boss_standard = (f.calibrations['standard_boss'] -
                             f.required_calibrations['standard_boss'])
        iz = np.where(nsp_boss_standard < 0)[0]
        nsp_boss_standard[iz] = 0
        nsp_boss_standard_wapogee = np.zeros(f.field_cadence.nexp_total,
                                             dtype=np.int32)
        for iexp in np.arange(f.field_cadence.nexp_total,
                              dtype=np.int32):
            ia = np.where((f._robot2indx[:, iexp] >= 0) &
                          hasApogee)[0]
            if(len(ia) > 0):
                ia = f._robot2indx[ia, iexp]
                ic = np.where(f.targets['category'][ia] == 'boss_standard')[0]
                nc = len(ic)
            else:
                nc = 0
            if(nc < nsp_boss_standard[iexp]):
                nsp_boss_standard_wapogee[iexp] = nc
            else:
                nsp_boss_standard_wapogee[iexp] = nsp_boss_standard[iexp]

        nsp_boss_sky = (f.calibrations['sky_boss'] -
                        f.required_calibrations['sky_boss'])
        iz = np.where(nsp_boss_sky < 0)[0]
        nsp_boss_sky[iz] = 0
        nsp_boss_sky_wapogee = np.zeros(f.field_cadence.nexp_total,
                                        dtype=np.int32)
        for iexp in np.arange(f.field_cadence.nexp_total,
                              dtype=np.int32):
            ia = np.where((f._robot2indx[:, iexp] >= 0) &
                          hasApogee)[0]
            if(len(ia) > 0):
                ia = f._robot2indx[ia, iexp]
                ic = np.where(f.targets['category'][ia] == 'boss_sky')[0]
                nc = len(ic)
            else:
                nc = 0
            if(nc < nsp_boss_sky[iexp]):
                nsp_boss_sky_wapogee[iexp] = nc
            else:
                nsp_boss_sky_wapogee[iexp] = nsp_boss_sky[iexp]

        # The below is correct because every APOGEE robot is
        # also potentially a BOSS robot, but not vice-versa.
        spare['nboss_spare'] = (nun_boss +
                                nsp_boss_standard +
                                nsp_boss_sky +
                                nsp_apogee_standard +
                                nsp_apogee_sky)
        spare['napogee_spare'] = (nun_apogee +
                                  nsp_apogee_standard +
                                  nsp_apogee_sky + 
                                  nsp_boss_standard_wapogee +
                                  nsp_boss_sky_wapogee)
        
        fitsio.write('targets/rsFieldSpares-{plan}-{obs}-{fieldid}.fits'.format(plan=plan, obs=observatory, fieldid=fieldid), spare, clobber=True)

if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Final assignment based on allocation')

    parser.add_argument('-p', '--plan', dest='plan',
                        type=str, help='name of plan', required=True)
    parser.add_argument('-o', '--observatory', dest='observatory',
                        type=str, help='apo or lco',
                        choices=['apo', 'lco'], required=True)

    args = parser.parse_args()
    plan = args.plan
    observatory = args.observatory

    cadencelist = cadence.CadenceList()
    cadences_file = sdss_path.full('rsCadences', plan=plan,
                                   observatory=observatory)
    cadencelist.fromfits(filename=cadences_file, unpickle=True)

    allocate_file = sdss_path.full('rsAllocation', plan=plan,
                                   observatory=observatory)
    allocate = robostrategy.allocate.AllocateLST(filename=allocate_file,
                                                 observatory=observatory)

    spares_dtype = [('fieldid', np.int32),
                    ('racen', np.float64),
                    ('deccen', np.float64),
                    ('nboss_spare', np.int32),
                    ('napogee_spare', np.int32)]

    spares_exp_dtype = [('fieldid', np.int32),
                        ('iexp', np.int32),
                        ('racen', np.float64),
                        ('deccen', np.float64),
                        ('nboss_spare', np.int32),
                        ('napogee_spare', np.int32)]

    indxs = np.arange(len(allocate.field_array))
    with multiprocessing.Pool() as pool:
        pool.map(count_spares, indxs)

    spares = np.zeros(len(allocate.field_array), dtype=spares_dtype)
    spares_exp = np.zeros(allocate.field_array['nfilled'].sum(),
                          dtype=spares_exp_dtype)

    ispares_exp = 0
    for indx in indxs:
        fieldid = allocate.field_array['fieldid'][indx]
        cspares = fitsio.read('targets/rsFieldSpares-{plan}-{obs}-{fieldid}.fits'.format(plan=plan, obs=observatory, fieldid=fieldid))

        nexp = len(cspares['nboss_spare'])
        spares_exp['fieldid'][ispares_exp:ispares_exp + nexp] = fieldid
        spares_exp['iexp'][ispares_exp:ispares_exp + nexp] = np.arange(nexp, dtype=np.int32)
        spares_exp['racen'][ispares_exp:ispares_exp + nexp] = cspares['racen'][0]
        spares_exp['deccen'][ispares_exp:ispares_exp + nexp] = cspares['deccen'][0]
        spares_exp['nboss_spare'][ispares_exp:ispares_exp + nexp] = cspares['nboss_spare'][0]
        spares_exp['napogee_spare'][ispares_exp:ispares_exp + nexp] = cspares['napogee_spare'][0]
        ispares_exp = ispares_exp + nexp

        spares['fieldid'][indx] = fieldid
        spares['racen'][indx] = cspares['racen'][0]
        spares['deccen'][indx] = cspares['deccen'][0]
        spares['nboss_spare'][indx] = cspares['nboss_spare'].sum()
        spares['napogee_spare'][indx] = cspares['napogee_spare'].sum()

    fitsio.write('rsSpares-{o}-{p}.fits'.format(o=observatory,
                                                p=plan), spares,
                 clobber=True)

    fitsio.write('rsSparesExp-{o}-{p}.fits'.format(o=observatory,
                                                   p=plan), spares_exp,
                 clobber=True)
