#!/usr/bin/env python
# encoding: utf-8
#
# @Author: Michael R. Blanton
# @Date: Sept 26, 2018
# @Filename: rs_assign_update
# @License: BSD 3-Clause
# @Copyright: Michael R. Blanton


from __future__ import division
from __future__ import print_function
from __future__ import absolute_import
from __future__ import unicode_literals

import os
os.environ['OPENBLAS_NUM_THREADS'] = '1'

import argparse
import sys
import multiprocessing
import datetime
import numpy as np
import roboscheduler.cadence as cadence
import robostrategy.extra_field as extra_field
import robostrategy.allocate
import robostrategy.params as params
import mugatu.designmode
import sdss_access.path
import time

sdss_path = sdss_access.path.Path(release='sdss5', preserve_envvars=True)

cadencelist = cadence.CadenceList(skybrightness_only=True)

clobber = False
special_calibration = []
standard_apogee_nperzone_min = -1
mags_allowed_brighttime = []
mags_allowed_darktime = []
dmodes = None
offset_min_skybrightness = None

def assign_update(indx):
    fieldid = allocate.field_array['fieldid'][indx]
    rs_fieldid = allocate.field_array['rs_fieldid'][indx]
    
    print("fieldid {fid}: Update assignment".format(fid=fieldid), flush=True)

    if(fromplan != plan):
        field_target_file = sdss_path.full('rsFieldTargets',
                                           plan=fromplan, observatory=observatory,
                                           fieldid=fieldid)
        field_target_file = field_target_file.replace('targets/rsFieldTargets',
                                                      'final/rsFieldAssignmentsFinal')
    else:
        field_target_file = sdss_path.full('rsFieldTargets',
                                           plan=fromplan, observatory=observatory,
                                           fieldid=rs_fieldid)
        field_target_file = field_target_file.replace('targets/rsFieldTargets',
                                                      'targets/rsFieldPrep')

    field_assignments_file = sdss_path.full('rsFieldTargets',
                                            plan=plan, observatory=observatory,
                                            fieldid=fieldid)
    field_assignments_file = field_assignments_file.replace('targets/rsFieldTargets',
                                                            'final/rsFieldAssignmentsFinal')

    if((clobber is False) & os.path.isfile(field_assignments_file)):
        print("fieldid {f}: Exists already in {file}".format(f=fieldid, file=field_assignments_file), flush=True)
        return

    print("fieldid {f}: Reading target file".format(f=fieldid), flush=True)

    print("fieldid {fid}: ".format(fid=fieldid) + str(datetime.datetime.now()), flush=True)

    f = extra_field.extra_Field(filename=field_target_file, verbose=True,
                                fieldid=fieldid, bright_neighbors=True,
                                untrim_cadence_version=cadence_version,
                                noassign=True, input_design_mode=dmodes,
                                reset_bright=reset_bright,
                                offset_min_skybrightness=offset_min_skybrightness)
    f.fieldid = fieldid

    icsa = list(f.calibration_order).index('standard_apogee')
    f.required_calibrations_per_zone[icsa + 1] = standard_apogee_nperzone_min

    if(f.field_cadence is None):
        print("fieldid {fid}: no field cadence to assign! Skipping".format(fid=fieldid), flush=True)
        return

    rmcadences = ['dark_174x8_v1', 'dark_100x8_v1']
    field_cadence_name = f.field_cadence.name
    if(field_cadence_name in rmcadences):
        print("fieldid {fid}: Not reassigning RM field, just copying".format(fid=fieldid), flush=True)
    else:
        print("fieldid {fid}: Clear old assignments".format(fid=fieldid), flush=True)
        f.clear_assignments()

        # For some cartons, allow them even if mags are not allowed
        for carton in mags_allowed_brighttime:
            ic = np.where((f.targets['carton'] == carton) &
                          (f.targets['fiberType'] == 'BOSS'))[0]
            for epoch in np.arange(f.field_cadence.nepochs, dtype=int):
                if(f.field_cadence.skybrightness[epoch] > 0.5):
                    f.assignments['mags_allowed'][ic, epoch] = True
                    f.assignments['bright_allowed'][ic, epoch] = True
                    f.assignments['allowed'][ic, epoch] = True

        # For some cartons, allow them even if mags are not allowed
        for carton in mags_allowed_darktime:
            ic = np.where((f.targets['carton'] == carton) &
                          (f.targets['fiberType'] == 'BOSS'))[0]
            for epoch in np.arange(f.field_cadence.nepochs, dtype=int):
                if(f.field_cadence.skybrightness[epoch] < 0.5):
                    f.assignments['mags_allowed'][ic, epoch] = True
                    f.assignments['bright_allowed'][ic, epoch] = True
                    f.assignments['allowed'][ic, epoch] = True

        # For special calibration methods running at beginning
        for sc in special_calibration:
            if(hasattr(f, sc)):
                print("fieldid {fid}: Running {sc}".format(fid=fieldid, sc=sc), flush=True)
                scfunc = getattr(f, sc)
                scfunc(stage='srd')

        print("fieldid {fid}: Assign science and calib".format(fid=fieldid), flush=True)
        f.assign_science_and_calibs(stage='srd')

        print("fieldid {fid}: Reassignments".format(fid=fieldid), flush=True)
        f.assign_spares(stage='reassign')

        print("fieldid {fid}: Assign open targets".format(fid=fieldid), flush=True)
        f.assign_science(stage='open')

        print("fieldid {fid}: Assign filler targets".format(fid=fieldid), flush=True)
        f.assign_science(stage='filler')

        print("fieldid {f}: Running completion".format(f=fieldid), flush=True)
        f.complete()

    print("fieldid {fid}: ".format(fid=fieldid) + str(datetime.datetime.now()), flush=True)

    print("Write assignments", flush=True)
    f.tofits(field_assignments_file)

    print("fieldid {f}: Done".format(f=fieldid), flush=True)
    return


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Final assignment based on allocation')

    parser.add_argument('-p', '--plan', dest='plan',
                        type=str, help='name of plan', required=True)
    parser.add_argument('-f', '--from-plan', dest='fromplan',
                        type=str, help='name of plan to start from', required=True)
    parser.add_argument('-o', '--observatory', dest='observatory',
                        type=str, help='apo or lco',
                        choices=['apo', 'lco'], required=True)
    parser.add_argument('-s', '--start', dest='start',
                        type=np.int32, help='field to start', required=False,
                        default=0)
    parser.add_argument('-e', '--end', dest='end',
                        type=np.int32, help='field to end', required=False,
                        default=-1)
    parser.add_argument('-c', '--clobber', dest='clobber',
                        help='clobber', required=False,
                        default=False, action='store_true')
    parser.add_argument('-b', '--bright-reset', dest='reset_bright',
                        help='Reset bright stars', required=False,
                        default=False, action='store_true')
    parser.add_argument('-M', '--no-multiprocess', dest='nomultiprocess',
                        help='do not use multiprocess', required=False,
                        default=False, action='store_true')

    args = parser.parse_args()
    plan = args.plan
    fromplan = args.fromplan
    observatory = args.observatory
    start = args.start
    end = args.end
    clobber = args.clobber
    nomultiprocess = args.nomultiprocess
    reset_bright = args.reset_bright

    rsParams = params.RobostrategyParams(plan=plan)

    if('Assignment' in rsParams.cfg):
        if('special_calibration' in rsParams.cfg['Assignment']):
            special_calibration = rsParams.cfg['Assignment']['special_calibration'].split()
        if('mags_allowed_brighttime' in rsParams.cfg['Assignment']):
            mags_allowed_brighttime = rsParams.cfg['Assignment']['mags_allowed_brighttime'].split()
        if('mags_allowed_darktime' in rsParams.cfg['Assignment']):
            mags_allowed_darktime = rsParams.cfg['Assignment']['mags_allowed_darktime'].split()
        if('offset_min_skybrightness' in rsParams.cfg['Assignment']):
            offset_min_skybrightness = np.float32(rsParams.cfg['Assignment']['offset_min_skybrightness'])

    cadence_version = None
    if('CadenceVersions' in rsParams.cfg):
        if('version' in rsParams.cfg['CadenceVersions']):
            cadence_version = rsParams.cfg.get('CadenceVersions', 'version')

    if('Assignment' in rsParams.cfg):
        if('standard_apogee_nperzone_min' in rsParams.cfg['Assignment']):
            standard_apogee_nperzone_min = np.int32(rsParams.cfg.get('Assignment',
                                                                     'standard_apogee_nperzone_min'))
            print("APOGEE standards set to {n} per zone minimum".format(n=standard_apogee_nperzone_min), flush=True)
        else:
            print("No zone requirements for APOGEE standards", flush=True)
            standard_apogee_nperzone_min = -1

    cadencelist = cadence.CadenceList(skybrightness_only=True)
    cadences_file = sdss_path.full('rsCadences', plan=plan,
                                   observatory=observatory)
    cadences_file = cadences_file.replace('rsCadences',
                                          'final/rsCadencesFinal')
    cadencelist.fromfits(filename=cadences_file, unpickle=True)

    allocate_file = sdss_path.full('rsAllocation', plan=plan,
                                   observatory=observatory)
    allocate_file = allocate_file.replace('rsAllocation',
                                          'final/rsAllocationFinal')
    allocate = robostrategy.allocate.AllocateLST(filename=allocate_file,
                                                 observatory=observatory)

    dmodes = mugatu.designmode.allDesignModes() 

    fieldids, indx = np.unique(allocate.field_array['fieldid'],
                               return_index=True)
    neededs = np.zeros(len(fieldids), dtype=int)
    for i, fieldid in enumerate(fieldids):
        ifieldid = np.where(allocate.field_array['fieldid'] == fieldid)[0]
        neededs[i] = allocate.field_array['needed'][ifieldid].sum() 

    if(end < 0):
        end = fieldids.max()
    ikeep = np.where((fieldids >= start) & (fieldids <= end))[0]

    isort = np.flip(np.argsort(neededs[ikeep]))
    ikeep = indx[ikeep[isort]]

    print(ikeep)

    if(nomultiprocess):
        for i in ikeep:
            assign_update(i)
    else:
        with multiprocessing.Pool() as pool:
            ikeep = list(ikeep)
            ikeep_distributed = []
            icurr = 0
            while(len(ikeep) > 0):
                ikeep_distributed.append(ikeep[icurr])
                ikeep.remove(ikeep[icurr])
                if(len(ikeep) > 0):
                    icurr = (icurr + int(pool._processes)) % len(ikeep)
            pool.map(assign_update, ikeep_distributed)

    print('DONE: rs_assign_update')
    print(time.ctime(time.time()))
