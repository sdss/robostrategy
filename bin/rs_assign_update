#!/usr/bin/env python
# encoding: utf-8
#
# @Author: Michael R. Blanton
# @Date: Sept 26, 2018
# @Filename: rs_assign_update
# @License: BSD 3-Clause
# @Copyright: Michael R. Blanton


from __future__ import division
from __future__ import print_function
from __future__ import absolute_import
from __future__ import unicode_literals

import os
os.environ['OPENBLAS_NUM_THREADS'] = '1'

import argparse
import sys
import multiprocessing
import datetime
import numpy as np
import fitsio
import roboscheduler.cadence as cadence
import robostrategy.extra_field as extra_field
import robostrategy.allocate
import robostrategy.params as params
import mugatu.designmode
import sdss_access.path
import time

sdss_path = sdss_access.path.Path(release='sdss5', preserve_envvars=True)

cadencelist = cadence.CadenceList(skybrightness_only=True)

clobber = False
veryverbose = False
special_calibration = []
standard_apogee_nperzone_min = -1
mags_allowed_brighttime = []
mags_allowed_darktime = []
dmodes = None
test = False
catchup = False
catchup_version = None
offset_min_skybrightness = None
noassignmentstatus = False
nooffset = False


def assign_update_wrap(indx):
    try:
        assign_update(indx)
    except Exception as err:
        fid = fieldids[indx]
        print(f"fieldid {fid=}: Unexpected {err=}, {type(err)=}")
        raise
    return


def assign_update(indx):
    fieldid = fieldids[indx]
    rs_fieldid = rs_fieldids[fieldid]
    original_cadence = original_cadences[fieldid]

    iallocate = np.where(allocate_field_array['fieldid'] == rs_fieldid)[0][0]
    
    print("fieldid {fid}: Update assignment".format(fid=fieldid), flush=True)

    if(fromplan != plan):
        field_target_file = sdss_path.full('rsFieldTargets',
                                           plan=fromplan, observatory=observatory,
                                           fieldid=fieldid)
        field_target_file = field_target_file.replace('targets/rsFieldTargets',
                                                      'final/rsFieldAssignmentsFinal')
    else:
        field_target_file = sdss_path.full('rsFieldTargets',
                                           plan=fromplan, observatory=observatory,
                                           fieldid=rs_fieldid)
        field_target_file = field_target_file.replace('targets/rsFieldTargets',
                                                      'targets/rsFieldPrep')

    field_assignments_file = sdss_path.full('rsFieldTargets',
                                            plan=plan, observatory=observatory,
                                            fieldid=fieldid)
    field_assignments_file = field_assignments_file.replace('targets/rsFieldTargets',
                                                            'final/rsFieldAssignmentsFinal')

    field_status_file = sdss_path.full('rsFieldTargets',
                                       plan=plan, observatory=observatory,
                                       fieldid=fieldid)
    field_status_file = field_status_file.replace('targets/rsFieldTargets',
                                                  'final/rsFieldStatusMatch')

    if(catchup):
        field_assignments_file = field_assignments_file.replace('final', 'catchup')
        field_assignments_file = field_assignments_file.replace('Final',
                                                                'Catchup{v}'.format(v=catchup_version.upper()))
        field_status_file = field_status_file.replace('final', 'catchup')
        field_status_file = field_status_file.replace('Match',
                                                      'MatchCatchup{v}'.format(v=catchup_version.upper()))

    if(test):
        field_assignments_file = field_assignments_file.replace('Final', 'Test')
        field_assignments_file = field_assignments_file.replace('Catchup', 'Test')

    if((clobber is False) & os.path.isfile(field_assignments_file)):
        print("fieldid {f}: Exists already in {file}".format(f=fieldid, file=field_assignments_file), flush=True)
        return

    if(noassignmentstatus is False):
        if(os.path.exists(field_status_file)):
            print("fieldid {f}: Reading assignment status file".format(f=fieldid), flush=True)
            print(field_status_file)
            status = fitsio.read(field_status_file, ext='TARGET')
            status_field = fitsio.read(field_status_file, ext='FIELD')
            #iobs = np.where(status['mjd'] > 0)[0]
            iobs = np.where(status['status'] > 0)[0]
            if(len(iobs) > 0):
                print("fieldid {f}:   status found in {e}".format(f=fieldid,
                                                                  e=np.unique(status['field_exposure'][iobs])),
                      flush=True)
            iobs = np.where(status_field['status'] == 'done')[0]
            if(len(iobs) > 0):
                print("fieldid {f}:   designs marked done are {e}".format(f=fieldid,
                                                                          e=iobs),
                      flush=True)
        else:
            print("fieldid {f}: No assignment status file exists ".format(f=fieldid), flush=True)
            status = None
            status_field = None
    else:
        print("fieldid {f}: Not accounting for assignment status".format(f=fieldid), flush=True)
        status = None
        status_field = None

    print("fieldid {f}: Reading target file".format(f=fieldid), flush=True)
    print("fieldid {f}:  ... {f}".format(f=field_target_file), flush=True)

    print("fieldid {fid}: ".format(fid=fieldid) + str(datetime.datetime.now()), flush=True)

    rmcadences = ['dark_174x8', 'dark_100x8',
                  'dark_174x8_v1', 'dark_100x8_v1',
                  'dark_174x8_v2', 'dark_100x8_v2']

    if(allocate_field_array['cadence'][iallocate] in rmcadences):
        print("fieldid {fid}: Not reassigning RM field, do not make grids".format(fid=fieldid), flush=True)
        allgrids = False
        noincadence = True
    else:
        allgrids = True
        noincadence = True

    f = extra_field.extra_Field(filename=field_target_file, verbose=True,
                                veryverbose=veryverbose,
                                fieldid=fieldid, bright_neighbors=True,
                                untrim_cadence_version=cadence_version,
                                noassign=True, input_design_mode=dmodes,
                                reset_bright=reset_bright,
                                offset_min_skybrightness=offset_min_skybrightness,
                                nooffset=nooffset, allgrids=allgrids,
                                noincadence=noincadence)
    f.fieldid = fieldid

    if(f.field_cadence is None):
        print("fieldid {fid}: no field cadence to assign! Skipping".format(fid=fieldid), flush=True)
        return

    print("fieldid {fid}: Assigning field cadence {c}".format(fid=fieldid,
                                                              c=f.field_cadence.name), flush=True)

    field_cadence_name = f.field_cadence.name
    if(field_cadence_name in rmcadences):
        print("fieldid {fid}: Not reassigning RM field, just copying".format(fid=fieldid), flush=True)
    else:

        if(status_field is None):
            allocated_exposures_done = None
            original_exposures_done = None
        else:
            print("fieldid {fid}: Reassign original to allocated exposures".format(fid=fieldid),
                  flush=True)
            (allowed, filled_sb,
             original_exposures_done,
             allocated_exposures_done) = robostrategy.allocate.calculate_filled(fieldid=fieldid,
                                                                                field_status=status_field,
                                                                                option_cadence=field_cadence_name,
                                                                                current_cadence=original_cadence,
                                                                                slots=slots,
                                                                                use_rs_fieldid=False)

            if(allowed is False):
                if(forcepast):
                    print("fieldid {fid}: WARNING: current observations now do not fit into cadence; just assigning to first few".format(fid=fieldid), flush=True)
                    idone = np.where((status_field['fieldid'] == fieldid) &
                                     (status_field['status'] == 'done'))[0]
                    original_exposures_done = status_field['field_exposure'][idone]
                    original_exposures_done = np.sort(original_exposures_done)
                    allocated_exposures_done = np.arange(len(original_exposures_done),
                                                         dtype=np.int32)
                    print("fieldid {fid}: WARNING: {o}".format(fid=fieldid, o=original_exposures_done), flush=True)
                    print("fieldid {fid}: WARNING: {o}".format(fid=fieldid, o=allocated_exposures_done), flush=True)
                else:
                    print("fieldid {fid}: ERROR: current observations now do not fit into cadence; ignoring old observations".format(fid=fieldid))
                    status_field['status'] = 'not started'
                    status['status'] = 0
        
            they_differ = False
            for iexp, original_exposure_done in enumerate(original_exposures_done):
                if(original_exposure_done != allocate_field_array['original_exposures_done'][iallocate][iexp]):
                    they_differ = True
                    break
            for iexp, allocated_exposure_done in enumerate(allocated_exposures_done):
                if(allocated_exposure_done != allocate_field_array['allocated_exposures_done'][iallocate][iexp]):
                    they_differ = True
                    break

            if(they_differ):
                print("fieldid {fid}: Reassignment disagrees with allocation step's assignment of exposures (using the former)".format(fid=fieldid), flush=True)
                print("fieldid {fid}:   allocated_exposures_done (allocation): {a}".format(fid=fieldid, a=allocate_field_array['allocated_exposures_done'][iallocate]))
                print("fieldid {fid}:   original_exposures_done (allocation): {a}".format(fid=fieldid, a=allocate_field_array['original_exposures_done'][iallocate]))
                print("fieldid {fid}:   allocated_exposures_done (reassignment): {a}".format(fid=fieldid, a=allocated_exposures_done))
                print("fieldid {fid}:   original_exposures_done (reassignment): {a}".format(fid=fieldid, a=original_exposures_done))
                
        print("fieldid {fid}: Set design status".format(fid=fieldid), flush=True)
        f.set_design_status_from_status_field(status_field=status_field,
                                              allocated_exposures_done=allocated_exposures_done,
                                              original_exposures_done=original_exposures_done)

        icsa = list(f.calibration_order).index('standard_apogee')
        f.required_calibrations_per_zone[icsa + 1] = standard_apogee_nperzone_min

        print("fieldid {fid}: Clear old assignments".format(fid=fieldid), flush=True)
        f.clear_assignments()

        # Account for observed exposures
        if((noassignmentstatus is False) & (status is not None)):
            print("fieldid {fid}: Apply observed exposures".format(fid=fieldid), flush=True)
            f.apply_observed_status(observed_status=status,
                                    allocated_exposures_done=allocated_exposures_done,
                                    original_exposures_done=original_exposures_done)

        # For some cartons, allow them even if mags are not allowed
        for carton in mags_allowed_brighttime:
            ic = np.where((f.targets['carton'] == carton) &
                          (f.targets['fiberType'] == 'BOSS'))[0]
            for epoch in np.arange(f.field_cadence.nepochs, dtype=int):
                if(f.field_cadence.skybrightness[epoch] > 0.5):
                    f.assignments['mags_allowed'][ic, epoch] = True
                    f.assignments['bright_allowed'][ic, epoch] = True
                    f.assignments['allowed'][ic, epoch] = True

        # For some cartons, allow them even if mags are not allowed
        for carton in mags_allowed_darktime:
            ic = np.where((f.targets['carton'] == carton) &
                          (f.targets['fiberType'] == 'BOSS'))[0]
            for epoch in np.arange(f.field_cadence.nepochs, dtype=int):
                if(f.field_cadence.skybrightness[epoch] < 0.5):
                    f.assignments['mags_allowed'][ic, epoch] = True
                    f.assignments['bright_allowed'][ic, epoch] = True
                    f.assignments['allowed'][ic, epoch] = True
 
        # Escape if all exposures are locked
        iunlocked = np.where(f.exposure_locked == False)[0]
        if(len(iunlocked) == 0):
            print("fieldid {fid}: All exposures locked".format(fid=fieldid), flush=True)
            print("Write assignments", flush=True)
            f.tofits(field_assignments_file)
            print("fieldid {f}: Done".format(f=fieldid), flush=True)
            return

        # For special calibration methods running at beginning
        for sc in special_calibration:
            if(hasattr(f, sc)):
                print("fieldid {fid}: Running {sc}".format(fid=fieldid, sc=sc), flush=True)
                scfunc = getattr(f, sc)
                scfunc(stage='srd')

        print("fieldid {fid}: Assign science and calib".format(fid=fieldid), flush=True)
        try:
            f.assign_science_and_calibs(stage='srd')
        except:
            print("fieldid {fid}: Error in assign_science_and_calibs()".format(fid=fieldid))
            raise

        print("fieldid {fid}: Reassignments".format(fid=fieldid), flush=True)
        try:
            f.assign_spares(stage='reassign')
        except:
            print("fieldid {fid}: Error in assign_spares()".format(fid=fieldid))
            raise

        print("fieldid {fid}: Assign open targets".format(fid=fieldid), flush=True)
        try:
            f.assign_science(stage='open')
        except:
            print("fieldid {fid}: Error in assign_science(stage='open')".format(fid=fieldid))
            raise

        print("fieldid {fid}: Assign filler targets".format(fid=fieldid), flush=True)
        try:
            f.assign_science(stage='filler')
        except:
            print("fieldid {fid}: Error in assign_science(stage='filler')".format(fid=fieldid))
            raise

        print("fieldid {f}: Running completion".format(f=fieldid), flush=True)
        try:
            f.complete()
        except:
            print("fieldid {fid}: Error in complete()".format(fid=fieldid))
            raise

    print("fieldid {fid}: ".format(fid=fieldid) + str(datetime.datetime.now()), flush=True)

    print("Write assignments", flush=True)
    f.tofits(field_assignments_file)

    print("fieldid {f}: Done".format(f=fieldid), flush=True)
    return


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Final assignment based on allocation')

    parser.add_argument('-p', '--plan', dest='plan',
                        type=str, help='name of plan', required=True)
    parser.add_argument('-f', '--from-plan', dest='fromplan',
                        type=str, help='name of plan to start from', required=True)
    parser.add_argument('-o', '--observatory', dest='observatory',
                        type=str, help='apo or lco',
                        choices=['apo', 'lco'], required=True)
    parser.add_argument('-z', '--veryverbose', dest='veryverbose',
                        help='very verbose', required=False,
                        default=False, action='store_true')
    parser.add_argument('-A', '--no-assignment-status', dest='noassignmentstatus',
                        help='do not use assignment status', required=False,
                        default=False, action='store_true')
    parser.add_argument('-O', '--no-offset-status', dest='nooffset',
                        help='do not allow offsets', required=False,
                        default=False, action='store_true')
    parser.add_argument('-s', '--start', dest='start',
                        type=np.int32, help='field to start', required=False,
                        default=0)
    parser.add_argument('-e', '--end', dest='end',
                        type=np.int32, help='field to end', required=False,
                        default=-1)
    parser.add_argument('-c', '--clobber', dest='clobber',
                        help='clobber', required=False,
                        default=False, action='store_true')
    parser.add_argument('-b', '--bright-reset', dest='reset_bright',
                        help='Reset bright stars', required=False,
                        default=False, action='store_true')
    parser.add_argument('-t', '--test', dest='test',
                        help='test, so write to test file', required=False,
                        default=False, action='store_true')
    parser.add_argument('-u', '--force-past', dest='forcepast',
                        help='if previous observations do not fit in new cadence, use them anyway', required=False,
                        default=False, action='store_true')
    parser.add_argument('-M', '--no-multiprocess', dest='nomultiprocess',
                        help='do not use multiprocess', required=False,
                        default=False, action='store_true')
    parser.add_argument('-l', '--limit-pool', dest='limit_pool',
                        help='upper limit on thread pool size', required=False,
                        default=None, type=np.int32)
    parser.add_argument('-v', '--catchup-version', dest='catchup_version',
                        help='catchup version', required=False,
                        default=None, type=str)
    parser.add_argument('-r', '--reset-calibration', dest='resetcalibration',
                        type=str, help='list of calibration requirements', required=False,
                        default=None)

    args = parser.parse_args()
    plan = args.plan
    fromplan = args.fromplan
    observatory = args.observatory
    start = args.start
    end = args.end
    test = args.test
    clobber = args.clobber
    forcepast = args.forcepast
    nomultiprocess = args.nomultiprocess
    noassignmentstatus = args.noassignmentstatus
    nooffset = args.nooffset
    reset_bright = args.reset_bright
    limit_pool = args.limit_pool
    catchup_version = args.catchup_version
    veryverbose = args.veryverbose
    resetcalibration = args.resetcalibration

    if(catchup_version is not None):
        catchup = True

    dmodes = mugatu.designmode.allDesignModes()
    if(resetcalibration is not None):
        for resetstr in resetcalibration.split(','):
            modecalib, value = resetstr.split('=')
            mode, typename, instrname = modecalib.split('_')
            calibname = typename + "_" + instrname
            if(typename == 'sky'):
                nm = 'skies'
            elif(typename == 'standard'):
                nm = 'stds'
            else:
                raise ValueError("No type {t}".format(t=typename))
            for d in dmodes: 
                if(mode in d):
                    print("Resetting calibration requirement {c} to {v} for {d}".format(c=calibname, v=value, d=d),
                          flush=True)
                    dmodes[d].__getattribute__('n_{nm}_min'.format(nm=nm))[instrname.upper()] = np.int32(value)

    rsParams = params.RobostrategyParams(plan=plan)

    if('Assignment' in rsParams.cfg):
        if('special_calibration' in rsParams.cfg['Assignment']):
            special_calibration = rsParams.cfg['Assignment']['special_calibration'].split()
        if('mags_allowed_brighttime' in rsParams.cfg['Assignment']):
            mags_allowed_brighttime = rsParams.cfg['Assignment']['mags_allowed_brighttime'].split()
        if('mags_allowed_darktime' in rsParams.cfg['Assignment']):
            mags_allowed_darktime = rsParams.cfg['Assignment']['mags_allowed_darktime'].split()
        if('offset_min_skybrightness' in rsParams.cfg['Assignment']):
            offset_min_skybrightness = np.float32(rsParams.cfg['Assignment']['offset_min_skybrightness'])

    cadence_version = None
    if('CadenceVersions' in rsParams.cfg):
        if('version' in rsParams.cfg['CadenceVersions']):
            cadence_version = rsParams.cfg.get('CadenceVersions', 'version')

    if('Assignment' in rsParams.cfg):
        if('standard_apogee_nperzone_min' in rsParams.cfg['Assignment']):
            standard_apogee_nperzone_min = np.int32(rsParams.cfg.get('Assignment',
                                                                     'standard_apogee_nperzone_min'))
            print("APOGEE standards set to {n} per zone minimum".format(n=standard_apogee_nperzone_min), flush=True)
        else:
            print("No zone requirements for APOGEE standards", flush=True)
            standard_apogee_nperzone_min = -1

    cadencelist = cadence.CadenceList(skybrightness_only=True)
    cadences_file = sdss_path.full('rsCadences', plan=plan,
                                   observatory=observatory)
    cadences_file = cadences_file.replace('rsCadences',
                                          'final/rsCadencesFinal')
    cadencelist.fromfits(filename=cadences_file, unpickle=True)

    slots_file = sdss_path.full('rsSlots', plan=plan,
                                observatory=observatory)
    slots = robostrategy.slots.Slots(observatory=observatory)
    slots.fromfits(filename=slots_file)
    extra = rsParams.cfg.get('Allocation', 'ExtraTimeFactor')
    slots.slots = slots.slots * np.float32(extra)

    allocate_file = sdss_path.full('rsAllocation', plan=plan,
                                   observatory=observatory)
    allocate_final_file = allocate_file.replace('rsAllocation',
                                                'final/rsAllocationFinal')
    if(catchup):
        allocate_final_file = allocate_file.replace('final', 'catchup')
        allocate_final_file = allocate_file.replace('Final', 'Catchup{v}'.format(v=catchup_version.upper()))

    # Rely on this for field information
    allocate_field_array  = fitsio.read(allocate_file, ext='ALLOCATE')

    # Rely on this for list of fields
    allocate_final = fitsio.read(allocate_final_file)
    fieldids, indx = np.unique(allocate_final['fieldid'], return_index=True)
    rs_fieldids = dict()
    original_cadences = dict()
    for i, fieldid in enumerate(fieldids):
        ifieldid = np.where(allocate_final['fieldid'] == fieldid)[0][0]
        rs_fieldids[fieldid] = allocate_final['rs_fieldid'][ifieldid]
        original_cadences[fieldid] = allocate_final['original_cadence'][ifieldid]
    
    neededs = np.zeros(len(fieldids), dtype=int)
    for i, fieldid in enumerate(fieldids):
        rs_fieldid = rs_fieldids[fieldid]
        ifieldid = np.where(allocate_field_array['fieldid'] == rs_fieldid)[0]
        neededs[i] = allocate_field_array['needed'][ifieldid].sum() 

    if(end < 0):
        end = fieldids.max()
    ikeep = np.where((fieldids >= start) & (fieldids <= end))[0]

    if(clobber is False):
        not_done = np.ones(len(ikeep), dtype=bool)
        for i, fieldid in enumerate(fieldids[ikeep]):
            field_assignments_file = sdss_path.full('rsFieldTargets',
                                                    plan=plan, observatory=observatory,
                                                    fieldid=fieldid)
            field_assignments_file = field_assignments_file.replace('targets/rsFieldTargets',
                                                                    'final/rsFieldAssignmentsFinal')

            if(catchup):
                field_assignments_file = field_assignments_file.replace('final', 'catchup')
                field_assignments_file = field_assignments_file.replace('Final',
                                                                        'Catchup{v}'.format(v=catchup_version.upper()))

            if(os.path.isfile(field_assignments_file)):
                print("fieldid {f}: Exists already in {file}, going to skip".format(f=fieldid, file=field_assignments_file), flush=True)
                not_done[i] = False
        ikeep = ikeep[not_done]

    isort = np.flip(np.argsort(neededs[ikeep]))
    ikeep = ikeep[isort]

    if(nomultiprocess):
        for i in ikeep:
            assign_update_wrap(i)
    else:
        with multiprocessing.Pool(limit_pool) as pool:
            ikeep = list(ikeep)
            pool.map(assign_update_wrap, ikeep, 1)

    print('DONE: rs_assign_update')
    print(time.ctime(time.time()))
