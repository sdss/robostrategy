#!/usr/bin/env python
# encoding: utf-8
#
# @Author: Michael R. Blanton
# @Date: Aug 3, 2018
# @Filename: rs_completeness_plot
# @License: BSD 3-Clause
# @Copyright: Michael R. Blanton


from __future__ import division
from __future__ import print_function
from __future__ import absolute_import
from __future__ import unicode_literals

import argparse
import os
import sys
import numpy as np
import matplotlib.pyplot as plt
import healpy
import fitsio
import sdss_access.path

sdss_path = sdss_access.path.Path(release='sdss5', preserve_envvars=True)


def clean_minmax(n):
    vmin = np.floor(10. * n.min()) / 10.
    vmax = np.ceil(10. * n.max()) / 10.
    return(vmin, vmax)


def make_map(hdr, tmap, perarea=True, log=True):
    if('NSIDE' in hdr):
        nside = np.int32(hdr['NSIDE'])
    else:
        nside = 32
    area = healpy.pixelfunc.nside2pixarea(nside, degrees=True)

    if(perarea):
        tmap = tmap / area
    if(log):
        nzero = tmap > 0
        zero = tmap <= 0
        tmap[nzero] = np.log10(tmap[nzero])
        tmap[zero] = np.log10(0.1)

    return(tmap)


def plot_map(hdr, tmap, name=None, title=None, vmin=None, vmax=None,
             perarea=True, log=True):

    tmap = make_map(hdr, tmap, perarea=perarea, log=log)

    healpy.mollview(
        tmap,
        title=title,
        cmap='Greys',
        rot=(270., 0., 0.),
        max=vmax, min=vmin)

    healpy.visufunc.graticule()

    outfile = sdss_path.full(
        'rsAssignmentsPng', name=name,
        plan=plan, observatory=observatory)
    outfile = outfile.replace('rsAssignments', 'final/rsCompleteness')

    plt.savefig(outfile)
    plt.clf()

    return


def make_maps(completeness_file, ttype, ttype_pretty):
    ntargets, hdr = fitsio.read(completeness_file, header=True,
                                ext='{tt}_T'.format(tt=ttype.upper()))
    ngot, hdr = fitsio.read(completeness_file, header=True,
                                ext='{tt}_G'.format(tt=ttype.upper()))
    fgot, hdr = fitsio.read(completeness_file, header=True,
                            ext='{tt}_F'.format(tt=ttype.upper()))

    nmap = make_map(hdr, ntargets)
    tmp_vmin, vmax = clean_minmax(nmap)

    nmap = make_map(hdr, ngot)
    vmin, tmp_vmax = clean_minmax(nmap)

    print("Targets")
    plot_map(hdr, ntargets, name='{tt}-ntargets'.format(tt=ttype.lower()),
             title='$\log_{10}$ Target Density (deg$^{-2}$) ' + '('
             + ttype_pretty + ')',
             vmin=vmin, vmax=vmax)

    print("Gotten")
    plot_map(hdr, ngot, name='{tt}-ngot'.format(tt=ttype.lower()),
             title='$\log_{10}$ Assigned Target Density (deg$^{-2}$) ' +
             '(' + ttype_pretty + ')',
             vmin=vmin, vmax=vmax)

    print("Fraction")
    plot_map(hdr, fgot, name='{tt}-fgot'.format(tt=ttype.lower()),
             title='Assigned Target Fraction ({tt})'.format(tt=ttype_pretty),
             vmin=0., vmax=1., log=False, perarea=False)

    return

if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Evaluate completeness of target assignments')

    parser.add_argument('-p', '--plan', dest='plan',
                        type=str, help='name of plan', required=True)
    parser.add_argument('-o', '--observatory', dest='observatory',
                        type=str, help='apo or lco or both',
                        choices=['apo', 'lco', 'both'], required=True)

    args = parser.parse_args()
    plan = args.plan
    observatory = args.observatory

    cfile = sdss_path.full('rsTargetCadences', plan=plan,
                           observatory='apo')

    cartons = fitsio.read(cfile, ext='CARTONS')

    completeness_file = sdss_path.full('rsCompleteness', plan=plan,
                                       observatory=observatory)
    completeness_file = completeness_file.replace('rsCompleteness',
                                                  'final/rsCompletenessFinal')

    make_maps(completeness_file, 'All', 'All')
    make_maps(completeness_file, 'SCI', 'Science')
    make_maps(completeness_file, 'BRIGHT', 'Bright')
    make_maps(completeness_file, 'DARK', 'Dark')
    
    c = 'manual_mwm_halo_distant_kgiant_dark'
    make_maps(completeness_file, c, c)
    for carton in cartons:
        print(carton[0])
        try:
            make_maps(completeness_file, carton[0], carton[0])
        except:
            print(" -- Failed on carton: {carton}".format(carton=carton[0]))
            if(carton[0] == 'bhm_spiders_agn_efeds_straggle'):
                c = 'bhm_spiders_agn_efeds_stragglers'
                make_maps(completeness_file, c, c)
            if(carton[0] == 'bhm_spiders_clusters_efeds_str'):
                c = 'bhm_spiders_clusters_efeds_stragglers'
                make_maps(completeness_file, c, c)
            if(carton[0] == 'manual_mwm_crosscalib_yso_apog'):
                c = 'manual_mwm_crosscalib_yso_apogee'
                make_maps(completeness_file, c, c)
            if(carton[0] == 'manual_mwm_halo_distant_kgiant'):
                c = 'manual_mwm_halo_distant_kgiant_dark'
                make_maps(completeness_file, c, c)
            if(carton[0] == 'manual_mwm_magcloud_massive_ap'):
                c = 'manual_mwm_magcloud_massive_apogee'
                make_maps(completeness_file, c, c)
            if(carton[0] == 'manual_mwm_magcloud_massive_bo'):
                c = 'manual_mwm_magcloud_massive_boss'
                make_maps(completeness_file, c, c)
            if(carton[0] == 'manual_mwm_planet_gaia_astrome'):
                c = 'manual_mwm_planet_gaia_astrometry_v1'
                make_maps(completeness_file, c, c)
            if(carton[0] == 'manual_mwm_validation_cool_apo'):
                c = 'manual_mwm_validation_cool_apogee'
                make_maps(completeness_file, c, c)
            if(carton[0] == 'manual_mwm_validation_cool_bos'):
                c = 'manual_mwm_validation_cool_boss'
                make_maps(completeness_file, c, c)
            if(carton[0] == 'manual_mwm_validation_hot_apog'):
                c = 'manual_mwm_validation_hot_apogee'
                make_maps(completeness_file, c, c)
            if(carton[0] == 'mwm_yso_pms_apogee_sagitta_edr'):
                c = 'mwm_yso_pms_apogee_sagitta_edr3'
                make_maps(completeness_file, c, c)
            if(carton[0] == 'manual_mwm_planet_transiting_b'):
                c = 'manual_mwm_planet_transiting_bd_v1'
                make_maps(completeness_file, c, c)
            if(carton[0] == 'manual_mwm_magcloud_symbiotic_'):
                c = 'manual_mwm_magcloud_symbiotic_apogee'
                make_maps(completeness_file, c, c)
