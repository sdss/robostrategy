#!/usr/bin/env python
# encoding: utf-8
#
# @Author: Michael R. Blanton
# @Filename: rs_get_status
# @License: BSD 3-Clause
# @Copyright: Michael R. Blanton


import os
os.environ['OPENBLAS_NUM_THREADS'] = '1'

import argparse
import sys
import multiprocessing
import numpy as np
import fitsio
import roboscheduler.cadence as cadence
import robostrategy.allocate
import robostrategy.header
import sdss_access.path
import time

sdss_path = sdss_access.path.Path(release='sdss5', preserve_envvars=True)

cadencelist = cadence.CadenceList(skybrightness_only=True)

clobber = False
offset_min_skybrightness = None
plan = None
fromplan = None
fieldid_shift = 0
catchup = False
catchup_version = None


def get_status(indx):
    import robostrategy.status

    fieldid = allocate.field_array['fieldid'][indx]

    original_fieldid = allocate.field_array['rs_fieldid'][indx]
    ioriginal = np.where(original_allocate.field_array['fieldid'] == original_fieldid)[0]
    full_cadence = original_allocate.field_array['cadence'][ioriginal]
    
    print("fieldid {fid}: Get status".format(fid=fieldid), flush=True)

    field_status_file = sdss_path.full('rsFieldTargets',
                                       plan=plan, observatory=observatory,
                                       fieldid=fieldid)
    field_status_file = field_status_file.replace('targets/rsFieldTargets',
                                                  'final/rsFieldStatus')

    if(catchup):
        field_status_file = field_status_file.replace('final', 'catchup')
        field_status_file = field_status_file.replace('Status',
                                                      'StatusCatchup{v}'.format(v=catchup_version.upper()))

    if((clobber is False) & os.path.isfile(field_status_file)):
        print("fieldid {f}: Exists already in {file}".format(f=fieldid, file=field_status_file), flush=True)
        return

    status, tmp_status_field = robostrategy.status.get_status_by_fieldid(plan=fromplan,
                                                                         fieldid=fieldid - fieldid_shift)

    if(status is not None):

        status_field_dtype = np.dtype(tmp_status_field.dtype.descr +
                                      [('full_cadence', str, 50)])
        status_field = np.zeros(len(tmp_status_field), dtype=status_field_dtype)
        for n in tmp_status_field.dtype.names:
            status_field[n] = tmp_status_field[n]
        status_field['full_cadence'] = full_cadence

        print("Checking for incomplete epochs", flush=True)
        c = cadencelist.cadences[status_field['full_cadence'][0]]
        for iepoch in np.arange(c.nepochs, dtype=np.int32):
            isort = np.argsort(status_field['field_exposure'])
            cst = status_field[isort]
            ust = np.unique(cst['status'][c.epoch_indx[iepoch]:c.epoch_indx[iepoch + 1]])
            if(len(ust) > 1):
                print("WARNING: fieldid {fid} epoch {iepoch} is incomplete, treating all as not done".format(fid=fieldid, iepoch=iepoch))
                field_exposures = cst['field_exposure'][c.epoch_indx[iepoch]:c.epoch_indx[iepoch + 1]]
                for field_exposure in field_exposures:
                    ifexp = np.where(status_field['field_exposure'] == field_exposure)[0]
                    status_field['status'][ifexp] = 'not_started'
                    ifexp = np.where(status['field_exposure'] == field_exposure)[0]
                    status['status'][ifexp] = 0
                    status['mjd'][ifexp] = 0
                    status['assignment_status_pk'][ifexp] = 0

        print("Verifying consistency of status and status_field", flush=True)
        idone = np.where(status['status'] > 0)[0]
        field_exposures = np.unique(status['field_exposure'][idone])
        for field_exposure in field_exposures:
            istatus_field = np.where(status_field['field_exposure'] == field_exposure)[0]
            if(len(istatus_field) == 0):
                raise ValueError("field_exposure appears not at all in status_field")
            if(len(istatus_field) > 1):
                raise ValueError("field_exposure appears more than once in status_field")
            istatus_field = istatus_field[0] 
            if(status_field['status'][istatus_field] != 'done'):
                raise ValueError("assignments are marked done in a non-done exposure")
        
        print("Write status information", flush=True)
        hdr = robostrategy.header.rsheader()
        hdr.append({'name':'FROMPLAN',
                    'value':fromplan,
                    'comment':'plan this status is based on'})
        fitsio.write(field_status_file, status, header=hdr, extname='TARGET', clobber=True)
        fitsio.write(field_status_file, status_field, extname='FIELD', clobber=False)

    print("fieldid {f}: Done".format(f=fieldid), flush=True)
    return


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Extract current status information')

    parser.add_argument('-p', '--plan', dest='plan',
                        type=str, help='name of plan', required=True)
    parser.add_argument('-f', '--from-plan', dest='fromplan',
                        type=str, help='name of plan to start from', required=True)
    parser.add_argument('-n', '--new-allocation', dest='new_allocation',
                        help='treat as a new allocation run, so fieldids are from old plan',
                        required=False, default=False, action='store_true')
    parser.add_argument('-o', '--observatory', dest='observatory',
                        type=str, help='apo or lco',
                        choices=['apo', 'lco'], required=True)
    parser.add_argument('-s', '--start', dest='start',
                        type=np.int32, help='field to start', required=False,
                        default=0)
    parser.add_argument('-e', '--end', dest='end',
                        type=np.int32, help='field to end', required=False,
                        default=-1)
    parser.add_argument('-c', '--clobber', dest='clobber',
                        help='clobber', required=False,
                        default=False, action='store_true')
    parser.add_argument('-l', '--field-list', dest='fieldlist',
                        type=str, help='field list', required=False,
                        default=None)
    parser.add_argument('-d', '--fieldid-shift', dest='fieldid_shift',
                        help='shift in field id to apply', required=False,
                        type=np.int32, default=0)
    parser.add_argument('-M', '--no-multiprocess', dest='nomultiprocess',
                        help='do not use multiprocess', required=False,
                        default=False, action='store_true')
    parser.add_argument('-v', '--catchup-version', dest='catchup_version',
                        help='catchup version', required=False,
                        default=None, type=str)

    args = parser.parse_args()
    plan = args.plan
    fromplan = args.fromplan
    observatory = args.observatory
    start = args.start
    end = args.end
    clobber = args.clobber
    nomultiprocess = args.nomultiprocess
    fieldid_shift = args.fieldid_shift
    catchup_version = args.catchup_version
    new_allocation = args.new_allocation
    fieldlist_str = args.fieldlist

    fieldlist = None
    if(fieldlist_str is not None):
        fieldlist = np.array([np.int32(x) for x in fieldlist_str.split(',')],
                             dtype=np.int32)

    if(catchup_version is not None):
        catchup = True

    if(new_allocation):
        aplan = fromplan
    else:
        aplan = plan

    cadences_file = sdss_path.full('rsCadences', plan=plan,
                                   observatory=observatory)
    cadencelist.fromfits(filename=cadences_file, unpickle=False)

    original_allocate_file = sdss_path.full('rsAllocation', plan=aplan,
                                            observatory=observatory)
    allocate_file = original_allocate_file.replace('rsAllocation',
                                                   'final/rsAllocationFinal')

    if(catchup):
        allocate_file = allocate_file.replace('final', 'catchup')
        allocate_file = allocate_file.replace('Final', 'Catchup{v}'.format(v=catchup_version.upper()))

    original_allocate = robostrategy.allocate.AllocateLST(filename=original_allocate_file,
                                                          observatory=observatory)

    allocate = robostrategy.allocate.AllocateLST(filename=allocate_file,
                                                 observatory=observatory)

    fieldids, indx = np.unique(allocate.field_array['fieldid'],
                               return_index=True)

    if(end < 0):
        end = fieldids.max()
    rkeep = ((fieldids >= start) & (fieldids <= end))

    if(fieldlist is not None):
        fkeep = np.zeros(len(fieldids), dtype=bool)
        for fid in fieldlist:
            ifid = np.where(fieldids == fid)[0]
            fkeep[ifid] = True
    else:
        fkeep = np.ones(len(fieldids), dtype=bool)
        
    keep = fkeep & rkeep
    
    ikeep = np.where(keep)[0]
    ikeep = indx[ikeep]

    if(nomultiprocess):
        for i in ikeep:
            get_status(i)
    else:
        with multiprocessing.Pool(8) as pool:
            pool.map(get_status, ikeep, 1)

    print('DONE: rs_get_status', flush=True)
    print(time.ctime(time.time()), flush=True)
