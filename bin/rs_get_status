#!/usr/bin/env python
# encoding: utf-8
#
# @Author: Michael R. Blanton
# @Filename: rs_get_status
# @License: BSD 3-Clause
# @Copyright: Michael R. Blanton


import os
os.environ['OPENBLAS_NUM_THREADS'] = '1'

import argparse
import sys
import multiprocessing
import collections
import numpy as np
import fitsio
import robostrategy.params as params
import roboscheduler.cadence as cadence
import robostrategy.allocate
import robostrategy.header
import sdss_access.path
import time

sdss_path = sdss_access.path.Path(release='sdss5', preserve_envvars=True)

cadencelist = cadence.CadenceList(skybrightness_only=True)

observatory = None
verbose = False
clobber = False
offset_min_skybrightness = None
plan = None
fromplans = None
fieldid_shift = 0
catchup = False
catchup_version = None
debug = False
earliest_mjd = {'bright': 0., 'dark': 0.}


def raise_or_report(fieldid, msg, warning=False):
    if(debug | warning):
        if(warning):
            warning_or_error = 'WARNING'
        else:
            warning_or_error = 'ERROR'
        print("fieldid {fid}: {woe}: {msg}".format(woe=warning_or_error, fid=fieldid, msg=msg), flush=True)
    else:
        raise ValueError("fieldid {fid}: {msg}".format(fid=fieldid, msg=msg))
    return


def validate_consistency(fieldid=None, status=None, status_field=None, warning=False):
    print("fieldid {fid}: Verifying consistency of status and status_field".format(fid=fieldid), flush=True)
    idone = np.where(status['status'] > 0)[0]
    field_exposures = np.unique(status['field_exposure'][idone])
    for field_exposure in field_exposures:
        istatus_field = np.where(status_field['field_exposure'] == field_exposure)[0]
        if(len(istatus_field) == 0):
            raise_or_report(fieldid, "field_exposure appears not at all in status_field")
        if(len(istatus_field) > 1):
            raise_or_report(fieldid, "field_exposure appears more than once in status_field")
        istatus_field = istatus_field[0] 
        if(status_field['status'][istatus_field] != 'done'):
            raise_or_report(fieldid, "assignments are marked done in a non-done exposure")
    return

def get_and_write_status(indx):
    fieldid = allocate.field_array['fieldid'][indx]
    original_fieldid = allocate.field_array['rs_fieldid'][indx]
    ioriginal = np.where(original_allocate.field_array['fieldid'] == original_fieldid)[0]
    full_cadence = original_allocate.field_array['cadence'][ioriginal]
    
    print("fieldid {fid}: Get status".format(fid=fieldid), flush=True)

    field_status_file = sdss_path.full('rsFieldTargets',
                                       plan=plan, observatory=observatory,
                                       fieldid=fieldid)
    field_status_file = field_status_file.replace('targets/rsFieldTargets',
                                                  'final/rsFieldStatus')

    if(catchup):
        field_status_file = field_status_file.replace('final', 'catchup')
        field_status_file = field_status_file.replace('Status',
                                                      'StatusCatchup{v}'.format(v=catchup_version.upper()))

    if((clobber is False) & os.path.isfile(field_status_file)):
        print("fieldid {f}: Exists already in {file}".format(f=fieldid, file=field_status_file), flush=True)
        return

    status_dict = collections.OrderedDict()
    status_field_dict = collections.OrderedDict()
    for fromplan in fromplans:
        tmp_status, tmp_status_field = get_status(indx, fromplan=fromplan)
        status_dict[fromplan] = tmp_status
        status_field_dict[fromplan] = tmp_status_field

    status, status_field = merge_status(fieldid, status_dict, status_field_dict)

    validate_consistency(fieldid=fieldid, status=status, status_field=status_field,
                         warning=False)

    for sf in status_field:
        d2s, mjd = robostrategy.dbutils.design_status(design_id=sf['design_id'])
        if(sf['status'] != d2s):
            raise_or_report(fieldid, "design_to_status says {d2s}, assignment_status says {sf}".format(d2s=d2s, sf=sf['status']))
    
    if(status_field is not None):
        print("fieldid {fid}: Write status information".format(fid=fieldid), flush=True)
        hdr = robostrategy.header.rsheader()
        fitsio.write(field_status_file, status, header=hdr, extname='TARGET', clobber=True)
        fitsio.write(field_status_file, status_field, extname='FIELD', clobber=False)
    else:
        print("fieldid {fid}: No status informationn to write".format(fid=fieldid), flush=True)

    print("fieldid {f}: Done".format(f=fieldid), flush=True)
    return


def merge_status(fieldid, status_dict, status_field_dict):
    status = None
    status_field = None
    for fromplan in status_dict:
        if(status_dict[fromplan] is None):
            continue
        if(status is None):
            status = status_dict[fromplan].copy()
            status_field = status_field_dict[fromplan].copy()
        else:
            for i, cs in enumerate(status_field_dict[fromplan]):
                if(cs['status'] == 'done'):
                    ifull = np.where(status_field['field_exposure'] == cs['field_exposure'])[0]
                    if(len(ifull) == 0):
                        # Merge this new field exposure in
                        if(verbose):
                            print("Merging new field exposure {fe}".format(fe=cs['field_exposure']))
                        status_field = np.append(status_field, cs)
                        ife = np.where(status_dict[fromplan]['field_exposure'] == cs['field_exposure'])[0]
                        status = np.append(status, status_dict[fromplan][ife])
                    elif(len(ifull) > 1):
                        # Some error has occurred
                        raise_or_report(fieldid, "Multiple field exposures in status")
                    else:
                        if(status_field['design_id'][ifull[0]] != cs['design_id']):
                            # If this is actually a different designid
                            if(status_field['status'][ifull[0]] != 'done'):
                                if(verbose):
                                    print("Replacing not-done field exposure {fe} with done version from {fp}".format(fe=cs['field_exposure'], fp=fromplan))
                                # Replace the field_exposure if it isn't done
                                status_field[ifull[0]] = cs
                                not_this_exposure = (status['field_exposure'] != cs['field_exposure'])
                                status = status[not_this_exposure]
                                ife = np.where(status_dict[fromplan]['field_exposure'] == cs['field_exposure'])[0]
                                status = np.append(status, status_dict[fromplan][ife])
                            else:
                                if(verbose):
                                    print("Keeping done field exposure {fe}".format(fe=cs['field_exposure']))
                                # Keep the original if it is done
                                # (maybe here decide to reassign new one to a different field_exposure)
                                pass
                        else:
                            if(verbose):
                                print("Not touching same designid")
                            # If it the same designid then leave it alone (but double check
                            # that information is the same, because paranoia)
                            if(status_field['status'][ifull[0]] != cs['status']):
                                print(cs['design_id'])
                                print(status_field['design_id'][ifull[0]])
                                raise_or_report(fieldid, "Different status for same designid! {a} vs {b}".format(a=status_field['status'][ifull[0]], b=cs['status']))

    return(status, status_field)

    
def get_status(indx, fromplan=None):
    os.environ['OBSERVATORY'] = observatory.upper()
    
    import robostrategy.status
    import robostrategy.dbutils

    status = None
    status_field = None

    fieldid = allocate.field_array['fieldid'][indx]
    original_fieldid = allocate.field_array['rs_fieldid'][indx]
    ioriginal = np.where(original_allocate.field_array['fieldid'] == original_fieldid)[0]
    full_cadence = original_allocate.field_array['cadence'][ioriginal]

    (d2s_status, d2s_designids, d2s_designids_status,
     d2s_field_exposures) = robostrategy.dbutils.field_status(fieldid=fieldid - fieldid_shift,
                                                              plan=fromplan,
                                                              observatory=observatory)

    status, tmp_status_field = robostrategy.status.get_status_by_fieldid(plan=fromplan,
                                                                         fieldid=fieldid - fieldid_shift)

    print(tmp_status_field)

    if(status is None):
        if(np.any(d2s_designids_status == 'done')):
            print(d2s_status)
            print(d2s_designids)
            print(d2s_designids_status)
            print(d2s_field_exposures)
            raise_or_report(fieldid, "Inconsistency between assignment_status and design_to_status: no status info in former, but designs done in latter", warning=True)

    if(status is not None):
        status_field_dtype = np.dtype(tmp_status_field.dtype.descr +
                                      [('full_cadence', str, 50)])
        status_field = np.zeros(len(tmp_status_field), dtype=status_field_dtype)
        for n in tmp_status_field.dtype.names:
            status_field[n] = tmp_status_field[n]
        status_field['full_cadence'] = full_cadence

        print("fieldid {fid}: Checking for incomplete epochs".format(fid=fieldid), flush=True)
        c = cadencelist.cadences[status_field['full_cadence'][0]]
        for iepoch in np.arange(c.nepochs, dtype=np.int32):
            isort = np.argsort(status_field['field_exposure'])
            cst = status_field[isort]
            ust = np.unique(cst['status'][c.epoch_indx[iepoch]:c.epoch_indx[iepoch + 1]])
            if(len(ust) > 1):
                print("WARNING: fieldid {fid} epoch {iepoch} is incomplete according to assignment_status, treating all as not done".format(fid=fieldid, iepoch=iepoch))
                field_exposures = cst['field_exposure'][c.epoch_indx[iepoch]:c.epoch_indx[iepoch + 1]]
                for field_exposure in field_exposures:
                    ifexp = np.where(status_field['field_exposure'] == field_exposure)[0]
                    status_field['status'][ifexp] = 'not started'
                    status_field['mjd'][ifexp] = 0.
                    ifexp = np.where(status['field_exposure'] == field_exposure)[0]
                    status['status'][ifexp] = 0
                    status['mjd'][ifexp] = 0
                    status['assignment_status_pk'][ifexp] = 0

        print("fieldid {fid}: Checking for early observations".format(fid=fieldid), flush=True)
        c = cadencelist.cadences[status_field['full_cadence'][0]]
        for isf, csf in enumerate(status_field):
            dorb = csf['design_mode'].split('_')[0]
            emjd = earliest_mjd[dorb]
            if((csf['status'] == 'done') & (csf['mjd'] < emjd)):
                print("WARNING: fieldid {fid}: design_id {did} observed too early at MJD={mjd}, removing".format(fid=fieldid, did=csf['design_id'], mjd=csf['mjd']), flush=True)
                status_field['status'][isf] = 'not started'
                status_field['mjd'][isf] = 0.
                istatus = np.where(status['design_id'] == design_id)[0]
                status['status'][istatus] = 0
                status['mjd'][istatus] = 0
                status['assignment_status_pk'][istatus] = 0

        validate_consistency(fieldid=fieldid, status=status, status_field=status_field,
                             warning=True)

        print("fieldid {fid}: Verifying consistency of assignment_status and design_to_status".format(fid=fieldid), flush=True)
        all_field_exposures = np.append(status['field_exposure'], d2s_field_exposures)
        field_exposures = np.unique(all_field_exposures)
        for field_exposure in field_exposures:
            istatus_field = np.where(status_field['field_exposure'] == field_exposure)[0]
            if(len(istatus_field) == 0):
                assignment_status_done = False
            elif(len(istatus_field) > 1):
                raise_or_report(fieldid, "field_exposure appears more than once in status_field")
            else:
                istatus_field = istatus_field[0] 
                assignment_status_done = (status_field['status'][istatus_field] == 'done')
            id2s = np.where(d2s_field_exposures == field_exposure)[0]
            if(len(id2s) == 0):
                d2s_done = False
            elif(len(id2s) > 1):
                raise_or_report(fieldid, "field_exposure appears more than once in design_to_status")
            else:
                d2s_done = (d2s_designids_status[id2s[0]] == 'done')
            # Require that assignment_status and design_to_status agree
            if(d2s_done != assignment_status_done):
                raise_or_report(fieldid, "designid {did}, plan {p}: design_to_status says done is {x} but assignment_status says done is {y}".format(d2sdid=d2s_designids[id2s], did=status_field['design_id'][istatus_field], x=d2s_done, y=assignment_status_done, p=fromplan), warning=True)
        
    return(status, status_field)


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Extract current status information')

    parser.add_argument('-p', '--plan', dest='plan',
                        type=str, help='name of plan', required=True)
    parser.add_argument('-n', '--new-allocation', dest='new_allocation',
                        help='treat as a new allocation run, so fieldids are from old plan',
                        required=False, default=False, action='store_true')
    parser.add_argument('-f', '--from-plans', dest='fromplans',
                        type=str, help='name of plan(s) to start from (put plan to favor first)', required=True)
    parser.add_argument('-o', '--observatory', dest='observatory',
                        type=str, help='apo or lco',
                        choices=['apo', 'lco'], required=True)
    parser.add_argument('-s', '--start', dest='start',
                        type=np.int32, help='field to start', required=False,
                        default=0)
    parser.add_argument('-e', '--end', dest='end',
                        type=np.int32, help='field to end', required=False,
                        default=-1)
    parser.add_argument('-c', '--clobber', dest='clobber',
                        help='clobber', required=False,
                        default=False, action='store_true')
    parser.add_argument('-l', '--field-list', dest='fieldlist',
                        type=str, help='field list', required=False,
                        default=None)
    parser.add_argument('-x', '--verbose', dest='verbose',
                        help='verbose', required=False,
                        default=False, action='store_true')
    parser.add_argument('-d', '--fieldid-shift', dest='fieldid_shift',
                        help='shift in field id to apply (used to account for commissioning run)', required=False,
                        type=np.int32, default=0)
    parser.add_argument('-M', '--no-multiprocess', dest='nomultiprocess',
                        help='do not use multiprocess', required=False,
                        default=False, action='store_true')
    parser.add_argument('-E', '--debug', dest='debug',
                        help='debugging mode, report errors and move on', required=False,
                        default=False, action='store_true')
    parser.add_argument('-v', '--catchup-version', dest='catchup_version',
                        help='catchup version', required=False,
                        default=None, type=str)

    args = parser.parse_args()
    plan = args.plan
    fromplans_str = args.fromplans
    observatory = args.observatory
    start = args.start
    end = args.end
    clobber = args.clobber
    debug = args.debug
    verbose = args.verbose
    nomultiprocess = args.nomultiprocess
    fieldid_shift = args.fieldid_shift
    catchup_version = args.catchup_version
    new_allocation = args.new_allocation
    fieldlist_str = args.fieldlist

    rsParams = params.RobostrategyParams(plan=plan)

    earliest_key = 'EarliestMJD{o}'.format(o=observatory.upper())
    if(earliest_key in rsParams.cfg['Allocation']):
        earliest = rsParams.cfg['Allocation'][earliest_key].split()
        earliest_mjd['dark'] = np.float32(earliest[0])
        earliest_mjd['bright'] = np.float32(earliest[1])

    fieldlist = None
    if(fieldlist_str is not None):
        fieldlist = np.array([np.int32(x) for x in fieldlist_str.split(',')],
                             dtype=np.int32)

    fromplans = fromplans_str.split(',')

    if(catchup_version is not None):
        catchup = True

    if(new_allocation):
        aplan = fromplans[0]
    else:
        aplan = plan

    cadences_file = sdss_path.full('rsCadences', plan=plan,
                                   observatory=observatory)
    cadencelist.fromfits(filename=cadences_file, unpickle=False)

    original_allocate_file = sdss_path.full('rsAllocation', plan=aplan,
                                            observatory=observatory)
    allocate_file = original_allocate_file.replace('rsAllocation',
                                                   'final/rsAllocationFinal')

    if(catchup):
        allocate_file = allocate_file.replace('final', 'catchup')
        allocate_file = allocate_file.replace('Final', 'Catchup{v}'.format(v=catchup_version.upper()))

    original_allocate = robostrategy.allocate.AllocateLST(filename=original_allocate_file,
                                                          observatory=observatory)

    allocate = robostrategy.allocate.AllocateLST(filename=allocate_file,
                                                 observatory=observatory)

    fieldids, indx = np.unique(allocate.field_array['fieldid'],
                               return_index=True)

    if(end < 0):
        end = fieldids.max()
    rkeep = ((fieldids >= start) & (fieldids <= end))

    if(fieldlist is not None):
        fkeep = np.zeros(len(fieldids), dtype=bool)
        for fid in fieldlist:
            ifid = np.where(fieldids == fid)[0]
            fkeep[ifid] = True
    else:
        fkeep = np.ones(len(fieldids), dtype=bool)
        
    keep = fkeep & rkeep
    
    ikeep = np.where(keep)[0]
    ikeep = indx[ikeep]

    if(nomultiprocess):
        for i in ikeep:
            get_and_write_status(i)
    else:
        with multiprocessing.Pool(8) as pool:
            pool.map(get_and_write_status, ikeep, 1)

    print('DONE: rs_get_status', flush=True)
    print(time.ctime(time.time()), flush=True)
