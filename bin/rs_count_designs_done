#!/usr/bin/env python
# encoding: utf-8
#
# @Author: Michael R. Blanton
# @Filename: rs_count_designs_done
# @License: BSD 3-Clause
# @Copyright: Michael R. Blanton


import os
os.environ['OPENBLAS_NUM_THREADS'] = '1'

import argparse
import sys
import numpy as np
import fitsio
import roboscheduler.scheduler
import roboscheduler.cadence
import sdss_access.path

import sdssdb.peewee.sdss5db.targetdb as targetdb
from sdssdb.peewee.sdss5db import database


sdss_path = sdss_access.path.Path(release='sdss5', preserve_envvars=True)

clist = roboscheduler.cadence.CadenceList(skybrightness_only=True)


def designQueryMjd(plan=None):
    import peewee
    import sdssdb.peewee.sdss5db.opsdb as opsdb

    Field = targetdb.Field
    dbVersion = targetdb.Version.get(plan=plan)
    Design = targetdb.Design
    Cadence = targetdb.Cadence
    d2s = opsdb.DesignToStatus
    doneStatus = opsdb.CompletionStatus.get(label="done").pk
    d2f = targetdb.DesignToField
    
    dquery = d2s.select(d2s.mjd, d2s.design_id, Field.field_id,
                        Cadence.label_root.alias('cadence'), d2f.field_exposure)\
                .join(Design)\
                .join(d2f, on=(Design.design_id == d2f.design_id))\
                .join(Field, on=(Field.pk == d2f.field_pk))\
                .join(Cadence)\
                .where(d2s.completion_status_pk == doneStatus,
                       Field.version == dbVersion).tuples()

    field_exposures = np.array([d[4] for d in dquery])
    cadences = np.array([d[3] for d in dquery])
    field_ids = np.array([d[2] for d in dquery])
    design_ids = np.array([d[1] for d in dquery])
    mjds = np.array([d[0] for d in dquery])
    return(mjds, design_ids, field_ids, cadences, field_exposures)


def countExposures(designid=None):
    import peewee
    import sdssdb.peewee.sdss5db.opsdb as opsdb

    Design = targetdb.Design
    Configuration = opsdb.Configuration
    Exposure = opsdb.Exposure
    
    # Count BOSS exposures
    dquery = (Exposure.select(Exposure.exposure_no)
              .join(Configuration, peewee.JOIN.LEFT_OUTER)
              .join(Design)
              .where(Design.design_id == designid,
                     Exposure.exposure_no < 10000000)).dicts()

    return(len(dquery))


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Count designs')

    parser.add_argument('-p', '--plan', dest='plan',
                        type=str, help='name of plan', required=True)
    parser.add_argument('-o', '--observatory', dest='observatory',
                        type=str, help='apo or lco',
                        choices=['apo', 'lco'], required=True)
    parser.add_argument('-s', '--start', dest='start',
                        type=str, help='start date or MJD', required=False,
                        default='0')
    parser.add_argument('-e', '--end', dest='end',
                        type=str, help='end date or MJD', required=False,
                        default='1000000')

    args = parser.parse_args()
    plan = args.plan
    observatory = args.observatory
    start = args.start
    end = args.end
    
    os.environ['OBSERVATORY'] = observatory.upper()

    database.set_profile('operations')

    if('-' in start):
        start = roboscheduler.scheduler.datetime2mjd(start)
    else:
        start = np.int32(start)

    if('-' in end):
        end = roboscheduler.scheduler.datetime2mjd(end)
    else:
        end = np.int32(end)

    clist.fromdb(version='v2')

    original_allocate_file = sdss_path.full('rsAllocation', plan=plan,
                                            observatory=observatory)
    allocate_file = original_allocate_file.replace('rsAllocation',
                                                   'final/rsAllocationFinal')
    original_allocate = fitsio.read(original_allocate_file)
    allocate = fitsio.read(allocate_file)
    
    mjds, design_ids, field_ids, cadences, field_exposures = designQueryMjd(plan=plan)

    ikeep = np.where((mjds >= start) & (mjds <= end))[0]
    mjds = np.int32(np.floor(mjds[ikeep]))
    design_ids = design_ids[ikeep]
    field_ids = field_ids[ikeep]
    cadences = cadences[ikeep]
    field_exposures = field_exposures[ikeep]

    umjds = np.unique(mjds)

    nbright = np.zeros(len(umjds), dtype=np.int32)
    ndark = np.zeros(len(umjds), dtype=np.int32)

    nexpbright = np.zeros(len(umjds), dtype=np.int32)
    nexpdark = np.zeros(len(umjds), dtype=np.int32)

    for indx, cmjd in enumerate(umjds):
        imjd = np.where(mjds == cmjd)[0]
        ccadences = cadences[imjd]
        cfield_exposures = field_exposures[imjd]
        cfield_ids = field_ids[imjd]
        cdesign_ids = design_ids[imjd]
        for fcadence, field_exposure, field_id, design_id in zip(ccadences, cfield_exposures, cfield_ids, cdesign_ids):
            ialloc = np.where(allocate['fieldid'] == field_id)[0]
            if(len(ialloc) == 0):
                cadence = fcadence
            else:
                iorig = np.where(original_allocate['fieldid'] == allocate['rs_fieldid'][ialloc[0]])[0][0]
                cadence = original_allocate['cadence'][iorig]
                if(cadence not in clist.cadences):
                    cadence = fcadence
            
            epochs = clist.cadences[cadence].epochs
            if(field_exposure >= len(epochs)):
                print("WARNING: field_exposure {f} for cadence {c} in fieldid {fid}, using last".format(f=field_exposure,
                                                                                       c=cadence, fid=field_id))
                epoch = epochs[-1]
            else: 
                epoch = epochs[field_exposure]
            isdark = (clist.cadences[cadence].skybrightness[epoch] < 0.5)
            if(isdark):
                ndark[indx] = ndark[indx] + 1 
            else:
                nbright[indx] = nbright[indx] + 1 

            nexp = countExposures(designid=design_id)
            if(isdark):
                nexpdark[indx] = nexpdark[indx] + nexp 
            else:
                nexpbright[indx] = nexpbright[indx] + nexp 
            
    print(ndark.sum())
    print(nbright.sum())

    done_dtype = np.dtype([('mjd', np.int32),
                           ('nbright', np.int32),
                           ('ndark', np.int32),
                           ('nexpbright', np.int32),
                           ('nexpdark', np.int32)])
    done = np.zeros(len(umjds), dtype=done_dtype)
    done['mjd'] = umjds
    done['nbright'] = nbright
    done['ndark'] = ndark
    done['nexpbright'] = nexpbright
    done['nexpdark'] = nexpdark

    fitsio.write('done-count-{o}.fits'.format(o=observatory), done, clobber=True)
