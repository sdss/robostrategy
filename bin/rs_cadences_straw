#!/usr/bin/env python
# encoding: utf-8
#
# @Author: Michael R. Blanton
# @Date: Aug 3, 2018
# @Filename: rs_cadences_ggsp
# @License: BSD 3-Clause
# @Copyright: Michael R. Blanton


from __future__ import division
from __future__ import print_function
from __future__ import absolute_import
from __future__ import unicode_literals

import argparse
import os
import sys
import numpy as np
import fitsio
import roboscheduler.cadence as cadence
import sdss_access.path

sdss_path = sdss_access.path.Path()


def initialize_cadences(ncadence=None):
    target_cadence_file = os.path.join(os.getenv('ROBOSTRATEGY_DIR'),
                                       'data', 'sdss5-cadences-v0.fits')

    cadencelist = cadence.CadenceList()
    cadencelist.reset()
    cadencelist.fromfits(target_cadence_file)

    cadencelist.cadences['bhm_spiders_1x1'].delta[0] = -1.
    cadencelist.cadences['bhm_spiders_1x1'].delta_min[0] = -1.
    cadencelist.cadences['bhm_spiders_1x1'].delta_max[0] = -1.
    cadencelist.cadences['bhm_spiders_1x2'].delta[0] = -1.
    cadencelist.cadences['bhm_spiders_1x2'].delta_min[0] = -1.
    cadencelist.cadences['bhm_spiders_1x2'].delta_max[0] = -1.
    cadencelist.cadences['bhm_spiders_1x3'].delta[0] = -1.
    cadencelist.cadences['bhm_spiders_1x3'].delta_min[0] = -1.
    cadencelist.cadences['bhm_spiders_1x3'].delta_max[0] = -1.
    cadencelist.cadences['bhm_spiders_1x4'].delta[0] = -1.
    cadencelist.cadences['bhm_spiders_1x4'].delta_min[0] = -1.
    cadencelist.cadences['bhm_spiders_1x4'].delta_max[0] = -1.
    cadencelist.cadences['bhm_spiders_1x8'].delta[0] = -1.
    cadencelist.cadences['bhm_spiders_1x8'].delta_min[0] = -1.
    cadencelist.cadences['bhm_spiders_1x8'].delta_max[0] = -1.

    cadencelist.cadences['mwm_erosita_bright_1x1'].delta[0] = -1.
    cadencelist.cadences['mwm_erosita_bright_1x1'].delta_min[0] = -1.
    cadencelist.cadences['mwm_erosita_bright_1x1'].delta_max[0] = -1.
    cadencelist.cadences['mwm_erosita_medium_1x2'].delta[0] = -1.
    cadencelist.cadences['mwm_erosita_medium_1x2'].delta_min[0] = -1.
    cadencelist.cadences['mwm_erosita_medium_1x2'].delta_max[0] = -1.
    cadencelist.cadences['mwm_erosita_faint_1x3'].delta[0] = -1.
    cadencelist.cadences['mwm_erosita_faint_1x3'].delta_min[0] = -1.
    cadencelist.cadences['mwm_erosita_faint_1x3'].delta_max[0] = -1.

    cadencelist.cadences['mwm_galactic_1x1'].delta[0] = -1.
    cadencelist.cadences['mwm_galactic_1x1'].delta_min[0] = -1.
    cadencelist.cadences['mwm_galactic_1x1'].delta_max[0] = -1.

    cadencelist.cadences['mwm_planet_1x1'].delta[0] = -1.
    cadencelist.cadences['mwm_planet_1x1'].delta_min[0] = -1.
    cadencelist.cadences['mwm_planet_1x1'].delta_max[0] = -1.

    cadencelist.cadences['mwm_100pc_faint_1x1'].delta[0] = -1.
    cadencelist.cadences['mwm_100pc_faint_1x1'].delta_min[0] = -1.
    cadencelist.cadences['mwm_100pc_faint_1x1'].delta_max[0] = -1.

    cadencelist.cadences['mwm_100pc_bright_2x1'].delta[0] = -1.
    cadencelist.cadences['mwm_100pc_bright_2x1'].delta_min[0] = -1.
    cadencelist.cadences['mwm_100pc_bright_2x1'].delta_max[0] = -1.
    cadencelist.cadences['mwm_100pc_bright_2x1'].delta[1] = -1.
    cadencelist.cadences['mwm_100pc_bright_2x1'].delta_min[1] = -1.
    cadencelist.cadences['mwm_100pc_bright_2x1'].delta_max[1] = -1.

#        delta.append(-1.)
#        delta_min.append(-1.)
#        delta_max.append(-1.)
#        lunation.append(1.)
#        instrument.append('apogee')
#        cadencelist.add_cadence(name='bhm_spiders_1x4-{indx}'.format(indx=indx),
#                                nexposures=indx,
#                                delta=delta,
#                                delta_min=delta_min,
#                                delta_max=delta_max, lunation=lunation,
#                                instrument=instrument)
#
#    cadencelist.add_cadence(name='bhm_spiders_1x4-n',
#                            nexposures=ncadence, delta=delta,
#                            delta_min=delta_min,
#                            delta_max=delta_max, lunation=lunation,
#                            instrument=instrument)

    # Field cadences

    ccopy = cadencelist.cadences['mwm_rv_18x4']
    cadencelist.add_cadence(name='mwm_rv_full',
                            nexposures=ccopy.nexposures,
                            delta=ccopy.delta,
                            delta_min=ccopy.delta_min + 30.,
                            delta_max=ccopy.delta_max - 30.,
                            lunation=ccopy.lunation,
                            instrument=ccopy.instrument)

    n = ncadence
    cadencelist.add_cadence(name='bright_single-n', nexposures=n,
                            delta=[-1.] * n,
                            delta_min=[-1.] * n,
                            delta_max=[-1.] * n,
                            lunation=[1.] * n,
                            instrument=['apogee'] * n)

    for indx in np.arange(ncadence) + 1:
        cadencelist.add_cadence(name='bright_single-{indx}'.format(indx=indx),
                                nexposures=indx,
                                delta=[-1.] * indx,
                                delta_min=[-1.] * indx,
                                delta_max=[-1.] * indx,
                                lunation=[1.] * indx,
                                instrument=['apogee'] * indx)

    n = ncadence
    cadencelist.add_cadence(name='dark_single-n', nexposures=n,
                            delta=[-1.] * n,
                            delta_min=[-1.] * n,
                            delta_max=[-1.] * n,
                            lunation=[0.35] * n,
                            instrument=['boss'] * n)

    for indx in np.arange(ncadence) + 1:
        cadencelist.add_cadence(name='dark_single-{indx}'.format(indx=indx),
                                nexposures=indx,
                                delta=[-1.] * indx,
                                delta_min=[-1.] * indx,
                                delta_max=[-1.] * indx,
                                lunation=[0.35] * indx,
                                instrument=['boss'] * indx)

    for c in cadencelist.cadences:
        iz = np.where(cadencelist.cadences[c].delta == 0.)[0]
        cadencelist.cadences[c].delta_min[iz] = 0.
        cadencelist.cadences[c].delta_max[iz] = 0.

    return()


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Cadences for GG plus Spiders test allocation')

    parser.add_argument('-n', '--ncadence', dest='ncadence',
                        type=np.int32, help='max number of cadences',
                        default=100)
    parser.add_argument('-p', '--plan', dest='plan',
                        type=str, help='name of plan', required=True)
    parser.add_argument('-o', '--observatory', dest='observatory',
                        type=str, help='apo or lco',
                        choices=['apo', 'lco'], required=True)

    args = parser.parse_args()
    plan = args.plan
    observatory = args.observatory

    initialize_cadences(ncadence=args.ncadence)

    cadencelist = cadence.CadenceList()
    cadences_file = sdss_path.full('rsCadences', plan=plan,
                                   observatory=observatory)
    cadences_array = cadencelist.toarray()
    fitsio.write(cadences_file, cadences_array, clobber=True)
