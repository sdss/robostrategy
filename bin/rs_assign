#!/usr/bin/env python
# encoding: utf-8
#
# @Author: Michael R. Blanton
# @Date: Aug 3, 2018
# @Filename: rs_assign
# @License: BSD 3-Clause
# @Copyright: Michael R. Blanton


from __future__ import division
from __future__ import print_function
from __future__ import absolute_import
from __future__ import unicode_literals

import argparse
import os
import sys
import numpy as np
import fitsio
import robostrategy
import robostrategy.header
import roboscheduler.cadence as cadence
import robostrategy.field as field
import robostrategy.params as params
import sdss_access.path
import multiprocessing

sdss_path = sdss_access.path.Path(release='sdss5', preserve_envvars=True)

cadencelist = cadence.CadenceList(skybrightness_only=True)

noclobber = False


def make_assign_entry(f, fields_entry, field_cadence, utcadences,
                      utcartons, assign_dtype, nfield=False):
    """Make an entry in the assignment table based on results

    Parameters:
    ----------

    f : Field object
        results for field

    fields_entry : ndarray element
        field information

    field_cadence : str
        cadence name for this entry

    utcadences : ndarray of str
        unique target cadence

    utcartons : ndarray of str
        unique target cartons

    assign_dtype : numpy dtype
        array definition for output

    nfield : bool
        is this an "nx1" field (default False)

    Returns:
    -------

    assign_entry : ndarray element
        assignment information

    Notes:
    -----

    Figures out total value and number of targets satisfied, and those numbers
    when separated by cadence, and when separated by carton.

    For an nx1 field, makes sure it only counts a target as satisfied 
    if there are enough exposures in this specific choice of n for 
    field_cadence.
"""
    assign_entry = np.zeros(1, dtype=assign_dtype)

    assign_entry['fieldid'] = fields_entry['fieldid']
    assign_entry['racen'] = fields_entry['racen']
    assign_entry['deccen'] = fields_entry['deccen']
    assign_entry['cadence'] = field_cadence
    nvisit = cadencelist.cadences[field_cadence].nexp_total
    assign_entry['nvisit'] = nvisit

    if(f is None):
        return(assign_entry[0])

    assign_entry['ntargets'] = len(f.targets)
    target_got = np.zeros(len(f.targets), dtype=np.int32)

    if(nfield):
        target_assigned = np.zeros((len(f.targets), nvisit),
                                   dtype=np.int32)
        for catalogid in np.unique(f.targets['catalogid']):
            icat = np.where(f.targets['catalogid'] == catalogid)[0]
            robotID = f.assignments['robotID'][icat, 0:nvisit]
            target_assigned[icat] = robotID.max(axis=0) >= 0
        target_nexposures = np.array([cadencelist.cadences[t].nexp_total
                                      if((t != 'none') & (t != '')) else 1
                                      for t in f.targets['cadence']])
        igot = np.where((target_assigned.sum(axis=1) >=
                         target_nexposures) &
                        (f.assignments['satisfied']))[0]
    else:
        igot = np.where(f.assignments['satisfied'])[0]
    target_got[igot] = 1
    iok = np.where((f.assignments['incadence']) & (f.targets['within']))[0]
    assign_entry['nwithin'] = len(iok)
    assign_entry['ngot'] = target_got.sum()
    assign_entry['valuegot'] = f.targets['value'][igot].sum()

    for indx in np.arange(len(utcadences), dtype=np.int32):
        utcadence = utcadences[indx]
        ic = np.where((f.targets['cadence'] == utcadence) &
                      (f.assignments['incadence']))[0]
        assign_entry['nwithin_pcd'][0, indx] = f.targets['within'][ic].sum()
        assign_entry['ngot_pcd'][0, indx] = target_got[ic].sum()
        icg = np.where((f.targets['cadence'] == utcadence) &
                       (target_got > 0) &
                       (f.assignments['incadence']))[0]
        assign_entry['valuegot_pcd'][0, indx] = f.targets['value'][icg].sum()

    for indx in np.arange(len(utcartons), dtype=np.int32):
        utcarton = utcartons[indx]
        ip = np.where((f.targets['carton'] == utcarton) &
                      (f.assignments['incadence']))[0]
        assign_entry['nwithin_pct'][0, indx] = f.targets['within'][ip].sum()
        assign_entry['ngot_pct'][0, indx] = target_got[ip].sum()
        ipg = np.where((f.targets['carton'] == utcarton) &
                       (target_got > 0) &
                       (f.assignments['incadence']))[0]
        assign_entry['valuegot_pct'][0, indx] = f.targets['value'][ipg].sum()

    return(assign_entry[0])


def field_options(ifield):
    """Check cadence options for this field

    Parameters:
    ----------

    ifield : int
        index into fields_array global variable

    Notes:
    -----

    Writes rsFieldOptions file for the field
"""
    assign_array = np.zeros(0, dtype=assign_dtype)
    fields_entry = fields_array[ifield]
    fieldid = fields_entry['fieldid']
    print("fieldid {f}: Checking options ...".format(f=fieldid), flush=True)

    if((fields_entry['type'] == 'RM') |
       (fields_entry['type'] == 'RMlite')):
        print("fieldid {f}: RM field should have only one option".format(f=fieldid))

    tmp_file = sdss_path.full('rsFieldTargets', plan=plan,
                              observatory=observatory,
                              fieldid=fieldid)
    if(test is False):
        options_file = tmp_file.replace('rsFieldTargets', 'rsFieldOptions')
    else:
        options_file = tmp_file.replace('rsFieldTargets', 'rsFieldOptionsTest')

    if((noclobber is True) & os.path.isfile(options_file)):
        print("Fieldid {f} exists already".format(f=fieldid))
        return

    field_target_file = sdss_path.full('rsFieldTargets', plan=plan,
                                       observatory=observatory,
                                       fieldid=fieldid)
    f = field.FieldSpeedy(filename=field_target_file,
                          verbose=True, fieldid=fieldid)

    icadences = np.where(cadence_mask[ifield, :] != 0)[0]
    field_cadences = all_cadences[icadences]

    if((len(field_cadences) == 1) &
       ((field_cadences[0] == 'dark_100x8') |
        (field_cadences[0] == 'dark_174x8'))):
        print("fieldid {f}: RM field is guaranteed so we can skip".format(f=fieldid))
        assign_entry = make_assign_entry(None, fields_entry,
                                         field_cadences[0],
                                         utcadences, utcartons,
                                         assign_dtype)
        assign_array = np.append(assign_array, assign_entry)
        field_cadences = []

    print("fieldid {f}: Trying cadences: {fc}".format(f=fieldid, fc=field_cadences), flush=True)

    for full_field_cadence in field_cadences:
        last = full_field_cadence.split('_')[-1]
        if(last[0] == 'n'):
            n_field_cadence = True
            if(last != 'nx1'):
                minn = int(last[1])
            else:
                minn = 1
            field_cadence_base = "_".join(full_field_cadence.split('_')[0:-1])
            field_cadence = field_cadence_base + "_nx1"
        else:
            n_field_cadence = False
            minn = 0
            field_cadence_base = ''
            field_cadence = full_field_cadence

        print("fieldid {fi}: - on cadence {fc}".format(fc=field_cadence, fi=fieldid), flush=True)

        print("fieldid {fi}: Assigning".format(fi=fieldid), flush=True)
        f.set_field_cadence(field_cadence)
        f.assign_science()
        f.decollide_unassigned()

        print("fieldid {fi}: Making field-cadence entry(ies)".format(fi=fieldid), flush=True)
        last = field_cadence.split('-')[-1]
        if(n_field_cadence):
            print("fieldid {fi}: {fc} is an nx1 case".format(fc=field_cadence, fi=fieldid), flush=True)
            assign_entries = np.zeros(ncadence - minn + 1, dtype=assign_dtype)

            # 21x1 and longer, just take the results for the full cadence
            # solution
            for indx in np.arange(21, ncadence + 1, dtype=np.int32):
                print("fieldid {fi}: {fc} indx={indx}".format(fc=field_cadence, fi=fieldid, indx=indx), flush=True)
                fcadence = '{base}_{n}x1'.format(base=field_cadence_base,
                                                 n=indx)
                assign_entry = make_assign_entry(f, fields_entry,
                                                 fcadence, utcadences,
                                                 utcartons, assign_dtype,
                                                 nfield=True)
                assign_entries[indx - minn] = assign_entry

            # Up to 20x1, do them individually; this is necessary 
            # because if there is a cadenced observation of (say) 9x1,
            # which is HIGH priority, it can get favored in the 99x1 
            # case, but then you lose it for (say) 6x1. This here
            # assumes our longest cadenced nx1 case is 18x1
            for indx in np.arange(minn, 21, dtype=np.int32):
                print("fieldid {fi}: {fc} indx={indx}".format(fc=field_cadence, fi=fieldid, indx=indx), flush=True)
                f.clear_field_cadence()
                fcadence = '{base}_{n}x1'.format(base=field_cadence_base,
                                                 n=indx)
                f.set_field_cadence(fcadence)
                f.assign_science()
                f.decollide_unassigned()
                assign_entry = make_assign_entry(f, fields_entry,
                                                 fcadence, utcadences,
                                                 utcartons, assign_dtype,
                                                 nfield=True)
                assign_entries[indx - minn] = assign_entry

            if(assign_entries['ngot'].max() == 0):
                print("fieldid {fid}: Keeping the first because nobody got nothing".format(fid=fieldid), flush=True)
                ikeep = 0
            else:
                if(ifgotcarton != -1):
                    print("fieldid {fid}: ifgotcarton set".format(fid=fieldid), flush=True)
                    ngot_pct = assign_entries['ngot_pct'][:, ifgotcarton]
                else:
                    print("fieldid {fid}: ifgotcarton not set".format(fid=fieldid), flush=True)
                    ngot_pct = np.array([0.])
                if(ngot_pct.max() > 0):
                    vgot = assign_entries['valuegot']
                    fgot = ngot_pct / ngot_pct.max()
                    #fgot_unique, iunique = np.unique(fgot,
                                                     #return_index=True)
                    indx = np.where((fgot >= fgot_minimum) &
                                    (fgot <= fgot_maximum))[0]
                    if(len(indx) > 0):
                        print("fieldid {fid}: some passed".format(fid=fieldid))
                        isort = np.argsort(vgot[indx], kind='stable')
                        vgot_unique, iunique = np.unique(vgot[indx[isort]],
                                                         return_index=True)
                        iunique = indx[isort[iunique]]
                    else:
                        print("fieldid {fid}: none passed".format(fid=fieldid))
                        isort = np.argsort(vgot[indx], kind='stable')
                        vgot_unique, iunique = np.unique(vgot[indx[isort]],
                                                         return_index=True)
                        iunique = indx[isort[iunique[-1]]]
                        
                    print("fieldid {fid}: cadences {iu}".format(fid=fieldid, iu=assign_entries['cadence']), flush=True)
                    print("fieldid {fid}: valuegot {iu}".format(fid=fieldid, iu=assign_entries['valuegot']), flush=True)
                    print("fieldid {fid}: fgot {iu}".format(fid=fieldid, iu=fgot), flush=True)
                    print("fieldid {fid}: iunique {iu}".format(fid=fieldid, iu=iunique), flush=True)
                    ikeep = iunique
                else:
                    print("fieldid {fid}: keep em all".format(fid=fieldid), flush=True)
                    ikeep = np.arange(len(assign_entries))

            assign_array = np.append(assign_array, assign_entries[ikeep])
        else:
            assign_entry = make_assign_entry(f, fields_entry,
                                             field_cadence,
                                             utcadences, utcartons,
                                             assign_dtype)
            assign_array = np.append(assign_array, assign_entry)

        f.clear_field_cadence()

    # Write out at each field to allow parallelization
    hd = robostrategy.header.rsheader()
    fitsio.write(options_file, assign_array, header=hd, clobber=True)

    cadence_dtype = [('cadence', np.unicode_, 60)]
    cadence_arr = np.zeros(len(utcadences), dtype=cadence_dtype)
    cadence_arr['cadence'] = utcadences
    fitsio.write(options_file, cadence_arr, clobber=False)

    carton_dtype = [('carton', np.unicode_, 60)]
    carton_arr = np.zeros(len(utcartons), dtype=carton_dtype)
    carton_arr['carton'] = utcartons
    fitsio.write(options_file, carton_arr, clobber=False)

    return


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Generate outcomes for all cadence options for all fields')

    parser.add_argument('-n', '--ncadence', dest='ncadence',
                        type=np.int32, help='max number of cadences',
                        default=99)
    parser.add_argument('-l', '--limit-pool', dest='limit_pool',
                        help='upper limit on thread pool size', required=False,
                        default=None, type=np.int32)
    parser.add_argument('-p', '--plan', dest='plan',
                        type=str, help='name of plan', required=True)
    parser.add_argument('-s', '--start', dest='start',
                        type=np.int32, help='field to start', required=False,
                        default=0)
    parser.add_argument('-f', '--fields', dest='fields',
                        type=str, help='fields to run', required=False,
                        default=None)
    parser.add_argument('-S', '--no-summary', dest='nosummary',
                        help='do not make summary file', required=False,
                        default=False, action='store_true')
    parser.add_argument('-C', '--no-clobber', dest='noclobber',
                        help='do not clobber', required=False,
                        default=False, action='store_true')
    parser.add_argument('-e', '--end', dest='end',
                        type=np.int32, help='field to end', required=False,
                        default=-1)
    parser.add_argument('-o', '--observatory', dest='observatory',
                        type=str, help='apo or lco',
                        choices=['apo', 'lco'], required=True)
    parser.add_argument('-t', '--test', dest='test',
                        action='store_true', default=False,
                        required=False)
    parser.add_argument('-M', '--no-multiprocessing',
                        dest='nomultiprocessing',
                        action='store_true', default=False,
                        required=False)

    args = parser.parse_args()
    plan = args.plan
    start = args.start
    end = args.end
    observatory = args.observatory
    ncadence = args.ncadence
    test = args.test
    fieldids_str = args.fields
    noclobber = args.noclobber
    nomultiprocessing = args.nomultiprocessing
    limit_pool = args.limit_pool
    nosummary = args.nosummary

    if(fieldids_str is not None):
        fieldids = [np.int32(x) for x in fieldids_str.split(',')]
    else:
        fieldids = None

    rsParams = params.RobostrategyParams(plan=plan)

    # Change this to implement in allocation
    #fgot_minimum = np.float32(rsParams.cfg.get('Assignment', 'fgot_minimum'))
    #fgot_maximum = np.float32(rsParams.cfg.get('Assignment', 'fgot_maximum'))
    if('fgotCarton' in rsParams.cfg['Allocation']):
        fgot_carton = rsParams.cfg['Allocation']['fgotCarton']
    else:
        fgot_carton = 'mwm_galactic_core'
    fgot_minimum = 0.
    fgot_maximum = 1.

    if('Rotate' in rsParams.cfg['Fields']):
        rotate = True
        paname = rsParams.cfg['Fields']['Rotate']
    else:
        rotate = False
        paname = ''

    cadences_file = sdss_path.full('rsCadences', plan=plan,
                                   observatory=observatory)
    cadencelist.fromfits(filename=cadences_file, unpickle=True)

    fields_file = sdss_path.full('rsFields', plan=plan,
                                 observatory=observatory)
    if(rotate):
        fields_file = fields_file.replace('rsFields', 'rsFieldsRotated')
    fields_array = fitsio.read(fields_file)

    field_cadence_file = sdss_path.full('rsFieldCadences',
                                        plan=plan, observatory=observatory)
    cadence_mask, hdr = fitsio.read(field_cadence_file, header=True)

    # Make list of all field cadences
    ncad = np.int32(hdr['NCAD'])
    all_cadences = []
    for indx in np.arange(ncad):
        all_cadences.append(hdr['CAD{indx}'.format(indx=indx)])
    all_cadences = np.array(all_cadences)

    target_cadence_file = field_cadence_file.replace('rsFieldCadences',
                                                     'rsTargetCadences')
    carr = fitsio.read(target_cadence_file, ext=1)
    utcadences = carr['cadence']
    nutcadences = len(utcadences)

    carr = fitsio.read(target_cadence_file, ext=2)
    utcartons = carr['carton']
    nutcartons = len(utcartons)

    ifgotcarton = np.where(utcartons == fgot_carton)[0]
    if(len(ifgotcarton) == 1):
        ifgotcarton = ifgotcarton[0]
    else:
        ifgotcarton = -1

    assign_dtype = [('fieldid', np.int32),
                    ('racen', np.float64),
                    ('deccen', np.float64),
                    ('ntargets', np.int32),
                    ('cadence', np.unicode_, 30),
                    ('nvisit', np.int32),
                    ('nwithin', np.int32),
                    ('ngot', np.int32),
                    ('valuegot', np.float32),
                    ('nwithin_pcd', np.int32, nutcadences),
                    ('ngot_pcd', np.int32, nutcadences),
                    ('valuegot_pcd', np.float32, nutcadences),
                    ('nwithin_pct', np.int32, nutcartons),
                    ('ngot_pct', np.int32, nutcartons),
                    ('valuegot_pct', np.float32, nutcartons)]

    if(end < 0):
        end = fields_array['fieldid'].max()


    keep = ((fields_array['fieldid'] >= start) &
            (fields_array['fieldid'] <= end))

    if(fieldids is not None):
        inlist = np.zeros(len(keep), dtype=bool)
        for fieldid in fieldids:
            inlist = inlist | (fields_array['fieldid'] == fieldid)
    else:
        inlist = np.ones(len(keep), dtype=bool)

    ikeep = np.where(keep & inlist)[0]

    if((len(ikeep) > 1) and (nomultiprocessing is False)):
        with multiprocessing.Pool(limit_pool) as pool:
            pool.map(field_options, ikeep)
    else:
        for ifield in ikeep:
            field_options(ifield)

    if(test):
        sys.exit(0)

    if(nosummary):
        sys.exit(0)

    # Concatenate all
    assign_all = np.zeros(0, dtype=assign_dtype)
    for fieldid in fields_array['fieldid']:
        print(fieldid, flush=True)
        tmp_file = sdss_path.full('rsFieldTargets', plan=plan,
                                  observatory=observatory,
                                  fieldid=fieldid)
        options_file = tmp_file.replace('rsFieldTargets', 'rsFieldOptions')
        try:
            assign_tmp_in = fitsio.read(options_file)
            assign_tmp = np.zeros(len(assign_tmp_in), dtype=assign_dtype)
            for n in assign_tmp.dtype.names:
                assign_tmp[n] = assign_tmp_in[n]
        except:
            assign_tmp = np.zeros(0, dtype=assign_dtype)
        assign_all = np.append(assign_all, assign_tmp)

    options_file = sdss_path.full('rsOptions', plan=plan,
                                  observatory=observatory)
    hd = robostrategy.header.rsheader()
    fitsio.write(options_file, assign_all, header=hd, clobber=True)

    cadence_dtype = [('cadence', np.unicode_, 60)]
    cadence_arr = np.zeros(len(utcadences), dtype=cadence_dtype)
    cadence_arr['cadence'] = utcadences
    fitsio.write(options_file, cadence_arr, clobber=False)

    carton_dtype = [('carton', np.unicode_, 60)]
    carton_arr = np.zeros(len(utcartons), dtype=carton_dtype)
    carton_arr['carton'] = utcartons
    fitsio.write(options_file, carton_arr, clobber=False)
