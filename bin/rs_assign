#!/usr/bin/env python
# encoding: utf-8
#
# @Author: Michael R. Blanton
# @Date: Aug 3, 2018
# @Filename: rs_assign_ggsp
# @License: BSD 3-Clause
# @Copyright: Michael R. Blanton


from __future__ import division
from __future__ import print_function
from __future__ import absolute_import
from __future__ import unicode_literals

import argparse
import os
import sys
import numpy as np
import astropy.coordinates as coordinates
import astropy.units as units
import fitsio
import roboscheduler.cadence as cadence
import robostrategy.field as field
import robostrategy.params as params
import sdss_access.path

sdss_path = sdss_access.path.Path()
cadencelist = cadence.CadenceList()


def make_assign_entry(f, fields_entry, field_cadence, utcadences,
                      utprograms, assign_dtype):
    assign_entry = np.zeros(1, dtype=assign_dtype)

    assign_entry['fieldid'] = fields_entry['fieldid']
    assign_entry['racen'] = fields_entry['racen']
    assign_entry['deccen'] = fields_entry['deccen']
    assign_entry['cadence'] = field_cadence
    nvisit = cadencelist.cadences[field_cadence].nexposures
    assign_entry['nvisit'] = nvisit
    assign_entry['ntargets'] = f.ntarget
    target_got = np.zeros(f.ntarget, dtype=np.int32)
    igot = np.where(f.assignments[:, 0:nvisit] >= 0)
    tgot = np.unique(f.assignments[igot])
    target_got[tgot] = 1
    iok = np.where((f.target_incadence) & (f.target_within))[0]
    assign_entry['nwithin'] = len(iok)
    assign_entry['ngot'] = target_got.sum()
    assign_entry['valuegot'] = f.target_value[tgot].sum()

    for indx in np.arange(len(utcadences), dtype=np.int32):
        utcadence = utcadences[indx]
        ic = np.where((f.target_cadence == utcadence) &
                      (f.target_incadence))[0]
        assign_entry['nwithin_pc'][0, indx] = f.target_within[ic].sum()
        assign_entry['ngot_pc'][0, indx] = target_got[ic].sum()
        icg = np.where((f.target_cadence == utcadence) &
                       (target_got > 0) &
                       (f.target_incadence))[0]
        assign_entry['valuegot_pc'][0, indx] = f.target_value[icg].sum()

    for indx in np.arange(len(utprograms), dtype=np.int32):
        utprogram = utprograms[indx]
        ip = np.where((f.target_program == utprogram) &
                      (f.target_incadence))[0]
        assign_entry['nwithin_pp'][0, indx] = f.target_within[ip].sum()
        assign_entry['ngot_pp'][0, indx] = target_got[ip].sum()
        ipg = np.where((f.target_cadence == utcadence) &
                       (target_got > 0) &
                       (f.target_incadence))[0]
        assign_entry['valuegot_pp'][0, indx] = f.target_value[ipg].sum()

    return(assign_entry)


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Field assignment test for Galactic Genesis')

    parser.add_argument('-n', '--ncadence', dest='ncadence',
                        type=np.int32, help='max number of cadences',
                        default=100)
    parser.add_argument('-p', '--plan', dest='plan',
                        type=str, help='name of plan', required=True)
    parser.add_argument('-o', '--observatory', dest='observatory',
                        type=str, help='apo or lco',
                        choices=['apo', 'lco'], required=True)

    args = parser.parse_args()
    plan = args.plan
    observatory = args.observatory
    ncadence = args.ncadence

    rsParams = params.RobostrategyParams(plan=plan)
    fgot_minimum = np.float32(rsParams.cfg.get('Assignment', 'fgot_minimum'))
    fgot_maximum = np.float32(rsParams.cfg.get('Assignment', 'fgot_maximum'))

    cadences_file = sdss_path.full('rsCadences', plan=plan,
                                   observatory=observatory)
    cadencelist.fromfits(filename=cadences_file, unpickle=True)

    fields_file = sdss_path.full('rsFields', plan=plan,
                                 observatory=observatory)
    fields_array = fitsio.read(fields_file)
    
    # ikeep = np.where(fields_array['fieldid'] == 11938)[0]
    # fields_array = fields_array[ikeep]

    targets_file = sdss_path.full('rsTargets', plan=plan,
                                  observatory=observatory)
    targets_all = fitsio.read(targets_file)
    targets_coord = coordinates.SkyCoord(ra=targets_all['ra'] * units.degree,
                                         dec=targets_all['dec'] * units.degree)

    field_cadence_file = sdss_path.full('rsFieldCadences',
                                        plan=plan, observatory=observatory)
    cadence_mask, hdr = fitsio.read(field_cadence_file, header=True)

    # Make list of all field cadences
    ncad = np.int32(hdr['NCAD'])
    all_cadences = []
    for indx in np.arange(ncad):
        all_cadences.append(hdr['CAD{indx}'.format(indx=indx)])
    all_cadences = np.array(all_cadences)

    # Make list of all unique target cadences
    tcadences = [x.decode().strip() for x in targets_all['cadence']]
    utcadences = np.unique(np.array(tcadences))
    nutcadences = len(utcadences)

    # Make list of all unique target programs
    tprograms = [x.decode().strip() for x in targets_all['program']]
    utprograms = np.unique(np.array(tprograms))
    nutprograms = len(utprograms)

    assign_dtype = [('fieldid', np.int32),
                    ('racen', np.float64),
                    ('deccen', np.float64),
                    ('ntargets', np.int32),
                    ('cadence', cadence.fits_type),
                    ('nvisit', np.int32),
                    ('nwithin', np.int32),
                    ('ngot', np.int32),
                    ('valuegot', np.float32),
                    ('nwithin_pc', np.int32, nutcadences),
                    ('ngot_pc', np.int32, nutcadences),
                    ('valuegot_pc', np.float32, nutcadences),
                    ('nwithin_pp', np.int32, nutprograms),
                    ('ngot_pp', np.int32, nutprograms),
                    ('valuegot_pp', np.float32, nutprograms)]

    assign_array = np.zeros(0, dtype=assign_dtype)

    for ifield in np.arange(len(fields_array)):
        fields_entry = fields_array[ifield]
        fieldid = fields_entry['fieldid']
        if((fieldid % 1) == 0):
            print(fieldid, flush=True)

        field_target_file = sdss_path.full('rsFieldTargets', plan=plan,
                                           observatory=observatory,
                                           fieldid=fieldid)
        targets = fitsio.read(field_target_file)

        f = field.Field(racen=fields_entry['racen'],
                        deccen=fields_entry['deccen'],
                        observatory=observatory)
        f.targets_fromarray(targets)

        icadences = np.where(cadence_mask[ifield, :] != 0)[0]
        field_cadences = all_cadences[icadences]

        for field_cadence in field_cadences:
            print(field_cadence)
            f = field.Field(racen=fields_entry['racen'],
                            deccen=fields_entry['deccen'],
                            observatory=observatory)
            f.targets_fromarray(targets)

            f.field_cadence = field_cadence
            f.assign(include_calibration=False)

            if(field_cadence.split('-')[-1] == 'n'):
                field_cadence_base = field_cadence.split('-')[0]
                assign_entries = np.zeros(ncadence, dtype=assign_dtype)
                for indx in np.arange(ncadence, dtype=np.int32) + 1:
                    fcadence = '{base}-{n}'.format(base=field_cadence_base,
                                                   n=indx)
                    assign_entry = make_assign_entry(f, fields_entry,
                                                     fcadence, utcadences,
                                                     utprograms, assign_dtype)
                    assign_entries[indx - 1] = assign_entry

                if(assign_entries['ngot'].max() == 0):
                    ikeep = 0
                else:
                    fgot = (assign_entries['ngot'] /
                            assign_entries['ngot'].max())
                    fgot_unique, iunique = np.unique(fgot, return_index=True)
                    indx = np.where((fgot_unique >= fgot_minimum) &
                                    (fgot_unique <= fgot_maximum))[0]
                    if(len(indx) > 0):
                        ikeep = iunique[indx]
                    else:
                        ikeep = [iunique[-1]]

                assign_array = np.append(assign_array, assign_entries[ikeep])
            else:
                assign_entry = make_assign_entry(f, fields_entry,
                                                 field_cadence,
                                                 utcadences, utprograms,
                                                 assign_dtype)
                assign_array = np.append(assign_array, assign_entry)

    options_file = sdss_path.full('rsOptions', plan=plan,
                                  observatory=observatory)
    fitsio.write(options_file, assign_array, clobber=True)

    cadence_dtype = [('cadence', cadence.fits_type)]
    cadence_arr = np.zeros(len(utcadences), dtype=cadence_dtype)
    cadence_arr['cadence'] = utcadences
    fitsio.write(options_file, cadence_arr, clobber=False)

    program_dtype = [('program', cadence.fits_type)]
    program_arr = np.zeros(len(utprograms), dtype=program_dtype)
    program_arr['program'] = utprograms
    fitsio.write(options_file, program_arr, clobber=False)
