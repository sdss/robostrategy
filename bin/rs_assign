#!/usr/bin/env python
# encoding: utf-8
#
# @Author: Michael R. Blanton
# @Date: Aug 3, 2018
# @Filename: rs_assign_ggsp
# @License: BSD 3-Clause
# @Copyright: Michael R. Blanton


from __future__ import division
from __future__ import print_function
from __future__ import absolute_import
from __future__ import unicode_literals

import argparse
import os
import sys
import numpy as np
import astropy.coordinates as coordinates
import astropy.units as units
import fitsio
import robostrategy
import roboscheduler.cadence as cadence
import robostrategy.field as field
import robostrategy.params as params
import sdss_access.path
import multiprocessing

sdss_path = sdss_access.path.Path(release='sdss5')
cadencelist = cadence.CadenceList()


def make_assign_entry(f, fields_entry, field_cadence, utcadences,
                      utcartons, assign_dtype):
    assign_entry = np.zeros(1, dtype=assign_dtype)

    assign_entry['fieldid'] = fields_entry['fieldid']
    assign_entry['racen'] = fields_entry['racen']
    assign_entry['deccen'] = fields_entry['deccen']
    assign_entry['cadence'] = field_cadence
    nvisit = cadencelist.cadences[field_cadence].nexposures
    assign_entry['nvisit'] = nvisit
    assign_entry['ntargets'] = f.ntarget
    target_got = np.zeros(f.ntarget, dtype=np.int32)
    igot = np.where(f.assignments[:, 0:nvisit] >= 0)
    gotids, gotn = np.unique(f.assignments[igot], return_counts=True)
    gotindx = np.array([f.rsid2indx[x] for x in gotids], dtype=np.int32)
    try:
        tgot = gotindx[gotn >= f.target_nexposures[gotindx]]
    except:
        print(f.target_nexposures[gotindx])
        print(len(igot))
        print(igot)
        print(f.assignments.min())
        print(f.assignments.max())
        print(gotids)
        print(gotindx)
        sys.exit(1)
    target_got[tgot] = 1
    iok = np.where((f.target_incadence) & (f.target_within))[0]
    assign_entry['nwithin'] = len(iok)
    assign_entry['ngot'] = target_got.sum()
    assign_entry['valuegot'] = f.target_value[tgot].sum()

    for indx in np.arange(len(utcadences), dtype=np.int32):
        utcadence = utcadences[indx]
        ic = np.where((f.target_cadence == utcadence) &
                      (f.target_incadence))[0]
        assign_entry['nwithin_pcd'][0, indx] = f.target_within[ic].sum()
        assign_entry['ngot_pcd'][0, indx] = target_got[ic].sum()
        icg = np.where((f.target_cadence == utcadence) &
                       (target_got > 0) &
                       (f.target_incadence))[0]
        assign_entry['valuegot_pcd'][0, indx] = f.target_value[icg].sum()

    for indx in np.arange(len(utcartons), dtype=np.int32):
        utcarton = utcartons[indx]
        ip = np.where((f.target_carton == utcarton) &
                      (f.target_incadence))[0]
        assign_entry['nwithin_pct'][0, indx] = f.target_within[ip].sum()
        assign_entry['ngot_pct'][0, indx] = target_got[ip].sum()
        ipg = np.where((f.target_carton == utcarton) &
                       (target_got > 0) &
                       (f.target_incadence))[0]
        assign_entry['valuegot_pct'][0, indx] = f.target_value[ipg].sum()

    return(assign_entry[0])


def field_options(ifield):
    assign_array = np.zeros(0, dtype=assign_dtype)
    fields_entry = fields_array[ifield]
    fieldid = fields_entry['fieldid']
    if((fieldid % 1) == 0):
        print(fieldid, flush=True)

    field_target_file = sdss_path.full('rsFieldTargets', plan=plan,
                                       observatory=observatory,
                                       fieldid=fieldid)
    targets = fitsio.read(field_target_file)

    f = field.Field(racen=fields_entry['racen'],
                    deccen=fields_entry['deccen'],
                    observatory=observatory)
    if(rotate):
        f.pa = np.float32(fields_entry[paname])
    f.targets_fromarray(targets)

    try:
        icadences = np.where(cadence_mask[ifield, :] != 0)[0]
    except:
        print(ifield)
        print(cadence_mask.shape)
        sys.exit(1)
    field_cadences = all_cadences[icadences]

    print(field_cadences)

    for full_field_cadence in field_cadences:
        last = full_field_cadence.split('-')[-1]
        if(last[0] == 'n'):
            n_field_cadence = True
            if(last != 'n'):
                minn = int(last[1:])
            else:
                minn = 1
            field_cadence_base = full_field_cadence.split('-')[0]
            field_cadence = field_cadence_base + "-n"
        else:
            n_field_cadence = False
            minn = 0
            field_cadence_base = ''
            field_cadence = full_field_cadence

        print("{fc} {fi}".format(fc=field_cadence, fi=fieldid), flush=True)
        f = field.Field(racen=fields_entry['racen'],
                        deccen=fields_entry['deccen'],
                        observatory=observatory)
        if(rotate):
            f.pa = np.float32(fields_entry[paname])
        f.targets_fromarray(targets)

        print("got targets {fi}".format(fi=fieldid), flush=True)

        f.set_field_cadence(field_cadence)
        print("set cadence {fi}".format(fi=fieldid), flush=True)
        f.assign(include_calibration=False, kaiju=False)

        print("assigned {fi}".format(fi=fieldid), flush=True)

        last = field_cadence.split('-')[-1]
        if(n_field_cadence):
            assign_entries = np.zeros(ncadence - minn + 1, dtype=assign_dtype)
            for indx in np.arange(minn, ncadence + 1, dtype=np.int32):
                fcadence = '{base}-{n}'.format(base=field_cadence_base,
                                               n=indx)
                assign_entry = make_assign_entry(f, fields_entry,
                                                 fcadence, utcadences,
                                                 utcartons, assign_dtype)
                assign_entries[indx - minn] = assign_entry

            if(assign_entries['ngot'].max() == 0):
                ikeep = 0
            else:
                if(ifgotcarton != -1):
                    ngot_pct = assign_entries['ngot_pct'][:, ifgotcarton]
                else:
                    ngot_pct = np.array([0.])
                if(ngot_pct.max() > 0):
                    print(ifgotcarton)
                    print(utcartons[ifgotcarton])
                    print(ngot_pct)
                    fgot = ngot_pct / ngot_pct.max()
                    fgot_unique, iunique = np.unique(fgot,
                                                     return_index=True)
                    indx = np.where((fgot_unique >= fgot_minimum) &
                                    (fgot_unique <= fgot_maximum))[0]
                    if(len(indx) > 0):
                        ikeep = iunique[indx]
                    else:
                        ikeep = [iunique[-1]]
                else:
                    ikeep = np.arange(len(assign_entries))

            assign_array = np.append(assign_array, assign_entries[ikeep])
        else:
            assign_entry = make_assign_entry(f, fields_entry,
                                             field_cadence,
                                             utcadences, utcartons,
                                             assign_dtype)
            assign_array = np.append(assign_array, assign_entry)

    # Write out at each field to allow resumption
    hd = {'RSTVER': robostrategy.__version__}
    tmp_file = sdss_path.full('rsFieldTargets', plan=plan,
                              observatory=observatory,
                              fieldid=fieldid)
    if(test is False):
        options_file = tmp_file.replace('rsFieldTargets', 'rsFieldOptions')
    else:
        options_file = tmp_file.replace('rsFieldTargets', 'rsFieldOptionsTest')
    fitsio.write(options_file, assign_array, header=hd, clobber=True)

    cadence_dtype = [('cadence', cadence.fits_type)]
    cadence_arr = np.zeros(len(utcadences), dtype=cadence_dtype)
    cadence_arr['cadence'] = utcadences
    fitsio.write(options_file, cadence_arr, clobber=False)

    carton_dtype = [('carton', cadence.fits_type)]
    carton_arr = np.zeros(len(utcartons), dtype=carton_dtype)
    carton_arr['carton'] = utcartons
    fitsio.write(options_file, carton_arr, clobber=False)

    return


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Field assignment test for Galactic Genesis')

    parser.add_argument('-n', '--ncadence', dest='ncadence',
                        type=np.int32, help='max number of cadences',
                        default=100)
    parser.add_argument('-p', '--plan', dest='plan',
                        type=str, help='name of plan', required=True)
    parser.add_argument('-s', '--start', dest='start',
                        type=np.int32, help='field to start', required=False,
                        default=0)
    parser.add_argument('-e', '--end', dest='end',
                        type=np.int32, help='field to end', required=False,
                        default=-1)
    parser.add_argument('-o', '--observatory', dest='observatory',
                        type=str, help='apo or lco',
                        choices=['apo', 'lco'], required=True)
    parser.add_argument('-t', '--test', dest='test',
                        action='store_true', default=False,
                        required=False)

    args = parser.parse_args()
    plan = args.plan
    start = args.start
    end = args.end
    observatory = args.observatory
    ncadence = args.ncadence
    test = args.test

    rsParams = params.RobostrategyParams(plan=plan)
    fgot_minimum = np.float32(rsParams.cfg.get('Assignment', 'fgot_minimum'))
    fgot_maximum = np.float32(rsParams.cfg.get('Assignment', 'fgot_maximum'))
    fgot_carton = 'mwm_gg_core'

    if('Rotate' in rsParams.cfg['Fields']):
        rotate = True
        paname = rsParams.cfg['Fields']['Rotate']
    else:
        rotate = False
        paname = ''

    cadences_file = sdss_path.full('rsCadences', plan=plan,
                                   observatory=observatory)
    cadencelist.fromfits(filename=cadences_file, unpickle=True)

    fields_file = sdss_path.full('rsFields', plan=plan,
                                 observatory=observatory)
    if(rotate):
        fields_file = fields_file.replace('rsFields', 'rsFieldsRotated')
    fields_array = fitsio.read(fields_file)
    print(fields_file)

    targets_file = sdss_path.full('rsTargets', plan=plan,
                                  observatory=observatory)
    targets_all = fitsio.read(targets_file)
    targets_coord = coordinates.SkyCoord(ra=targets_all['ra'] * units.degree,
                                         dec=targets_all['dec'] * units.degree)

    field_cadence_file = sdss_path.full('rsFieldCadences',
                                        plan=plan, observatory=observatory)
    cadence_mask, hdr = fitsio.read(field_cadence_file, header=True)

    # Make list of all field cadences
    ncad = np.int32(hdr['NCAD'])
    all_cadences = []
    for indx in np.arange(ncad):
        all_cadences.append(hdr['CAD{indx}'.format(indx=indx)])
    all_cadences = np.array(all_cadences)

    # Make list of all unique target cadences
    tcadences = [x.strip() for x in targets_all['cadence']]
    utcadences = np.unique(np.array(tcadences))
    nutcadences = len(utcadences)

    # Make list of all unique target cartons
    tcartons = [x.strip() for x in targets_all['carton']]
    utcartons = np.unique(np.array(tcartons))
    ifgotcarton = np.where(utcartons == fgot_carton)[0]
    if(len(ifgotcarton) == 1):
        ifgotcarton = ifgotcarton[0]
    else:
        ifgotcarton = -1
    nutcartons = len(utcartons)

    assign_dtype = [('fieldid', np.int32),
                    ('racen', np.float64),
                    ('deccen', np.float64),
                    ('ntargets', np.int32),
                    ('cadence', cadence.fits_type),
                    ('nvisit', np.int32),
                    ('nwithin', np.int32),
                    ('ngot', np.int32),
                    ('valuegot', np.float32),
                    ('nwithin_pcd', np.int32, nutcadences),
                    ('ngot_pcd', np.int32, nutcadences),
                    ('valuegot_pcd', np.float32, nutcadences),
                    ('nwithin_pct', np.int32, nutcartons),
                    ('ngot_pct', np.int32, nutcartons),
                    ('valuegot_pct', np.float32, nutcartons)]

    if(end < 0):
        end = fields_array['fieldid'].max()

    ikeep = np.where((fields_array['fieldid'] >= start) &
                     (fields_array['fieldid'] <= end))[0]

    if(len(ikeep) > 10):
        with multiprocessing.Pool() as pool:
            pool.map(field_options, ikeep)
    else:
        for ifield in ikeep:
            field_options(ifield)

    if(test):
        sys.exit(0)

    # Concatenate all
    assign_all = np.zeros(0, dtype=assign_dtype)
    for fieldid in fields_array['fieldid']:
        print(fieldid)
        tmp_file = sdss_path.full('rsFieldTargets', plan=plan,
                                  observatory=observatory,
                                  fieldid=fieldid)
        options_file = tmp_file.replace('rsFieldTargets', 'rsFieldOptions')
        try:
            assign_tmp_in = fitsio.read(options_file)
            assign_tmp = np.zeros(len(assign_tmp_in), dtype=assign_dtype)
            for n in assign_tmp.dtype.names:
                assign_tmp[n] = assign_tmp_in[n]
        except:
            assign_tmp = np.zeros(0, dtype=assign_dtype)
        assign_all = np.append(assign_all, assign_tmp)

    options_file = sdss_path.full('rsOptions', plan=plan,
                                  observatory=observatory)
    hd = {'RSTVER': robostrategy.__version__}
    fitsio.write(options_file, assign_all, header=hd, clobber=True)

    cadence_dtype = [('cadence', cadence.fits_type)]
    cadence_arr = np.zeros(len(utcadences), dtype=cadence_dtype)
    cadence_arr['cadence'] = utcadences
    fitsio.write(options_file, cadence_arr, clobber=False)
    
    carton_dtype = [('carton', cadence.fits_type)]
    carton_arr = np.zeros(len(utcartons), dtype=carton_dtype)
    carton_arr['carton'] = utcartons
    fitsio.write(options_file, carton_arr, clobber=False)
    
